game.import("extension", function(lib, game, ui, get, ai, _status) {
    return {
        name: "萌娘全史",
        content: function(config, pack) {

        },
        precontent: function() {

        },
        config: {},
        help: {},
        package: {
            character: {
                character: {
                    "hx_xiean": ["female", "jin", 3, ["hx_fengshen", "hx_yinshi"],
                        ["des:谢安（320年－385年10月12日），字安石。陈郡阳夏（今河南省太康县）人。东晋时期政治家、名士，太常谢裒第三子、镇西将军谢尚堂弟。谢安出身陈郡谢氏。自少以清谈知名，屡辞辟命，隐居会稽郡山阴县之东山，与王羲之、许询等游山玩水，并教育谢家子弟。后谢氏家族于朝中之人尽数逝去，他才东山再起，历任征西大将军司马、吴兴太守、侍中、吏部尚书、中护军等职。简文帝逝后，谢安与王坦之挫败桓温篡位意图。桓温死后，更与王彪之等共同辅政。在淝水之战中，谢安作为东晋一方的总指挥，以八万兵力打败了号称百万的前秦军队，使晋室得以存续。战后因功名太盛而被孝武帝猜忌，被迫前往广陵避祸。太元十年（385年），谢安病逝，享年六十六岁。获赠太傅、庐陵郡公，谥号“文靖”。谢安多才多艺，善行书，通音乐。性情闲雅温和，处事公允明断，不专权树私，不居功自傲，有宰相气度。他治国以儒、道互补，作为高门士族，能顾全大局，以谢氏家族利益服从于晋室利益，齐人王俭称其为“江左风流宰相”。</p>Pixiv ID: 36082516</p>Member: arttssam</p>技能: Jordan圣帝"]
                    ],
                    "hx_wangmeng": ["female", "qun", 3, ["hx_jingzhi", "hx_yiliao"],
                        ["des:王猛（325年～375年6月），字景略，北海郡剧县（今山东省寿光市）人。前秦时期大臣、政治家、军事家。王猛出身贫寒，瑰姿俊伟。寄居魏郡，好读兵书，善于谋略和用兵，文武双全。与东海王苻坚一见如故，后出任中书侍郎，累迁辅国将军、居中宿卫、仆射、京兆尹、太子詹事、吏部尚书、司隶校尉、散骑常侍、中书监、尚书令、开府仪同三司、丞相等职，册封清河郡侯，成为苻坚的股肱大臣。任职十八年，鞠躬尽瘁，综合儒法，选拔廉明，励精图治。政治上，抵制权贵，整肃吏治，强化中央集权。军事上，军纪严明，平定五公之乱，统兵攻占前燕都城，都督关东六州军事。经济上，劝课农桑，开放山泽，兴修水利，实现田畴开辟，仓库充实。执政期间，北方呈现小康景象。建元十一年（375年）六月，病逝，享年五十一岁，追赠大将军、冀州牧，谥号为武，葬礼如西汉霍光故事。</p>Pixiv ID: 9212166</p>Member: ふわり</p>技能: Jordan圣帝"]
                    ],
                    "hx_zhaokuangyi": ["female", "wu", 4, ["hx_zhangbing", "hx_shiquan", "hx_jiashen"],
                        ["zhu", "des:宋太祖赵匡胤（927年3月21日－976年11月21日），字元朗，小名香孩儿、赵九重。祖籍涿郡保塞县（今河北省保定市清苑区），宋朝（北宋）开国皇帝，父亲赵弘殷，母亲杜氏。后唐明宗天成年间（927年3月21日）生于后唐洛阳夹马营（今河南省洛阳市瀍河回族区东关）。后汉时，赵匡胤于后汉隐帝在位期间投奔郭威，之后郭威篡汉建立后周，是为周太祖；而赵匡胤则得任东西班行首，始入宦途。959年，后周世宗于北征回京后不久驾崩，逝世前任命赵匡胤为殿前都点检，执掌殿前司诸军。隔年（960年）元月初一，北汉及契丹联兵犯边，赵匡胤受命防御。初三夜晚，大军于京城开封府（今河南省开封市）东北二十公里的陈桥驿（今河南省封丘县陈桥镇）发生政变，将士于隔日清晨拥立赵匡胤为帝，史称“陈桥兵变”。大军随即回师京城，后周恭帝禅位，赵匡胤登基，建国号“宋”，是为“宋太祖”，年号为建隆，建立北宋。北宋和之后宋高宗建立的南宋国祚合计长达319年，敝除三代，在中国古代朝代中延续时间仅次于两汉。</p>Pixiv ID: 2077236</p>Member: Nyx</p>技能: Jordan圣帝"]
                    ],
                    "hx_zhangliang": ["female", "shu", 3, ["hx_choushi", "hx_zhiyin"],
                        ["des:张良（？—前186年），字子房，颍川城父（今河南郏县）人。秦末汉初杰出谋臣，西汉开国功臣，政治家，与韩信、萧何并称为“汉初三杰”。张良先辈在韩国任过五代韩王之国相。力劝刘邦在鸿门宴上卑辞言和，保存实力，并疏通项羽季父项伯，使得刘邦顺利脱身。凭借出色的智谋，协助汉王刘邦赢得楚汉战争，建立大汉王朝，帮助吕后之子刘盈成为皇太子，册封为留侯。张良精通黄老之道，不恋权位，晚年随赤松子云游四海，汉高后二年（前186年）去世，谥号文成。汉高祖刘邦曾在洛阳南宫评价他说：“夫运筹策帷帐之中，决胜于千里之外，吾不如子房。”</p>Pixiv ID: 15231158</p>Member: SuperPig</p>技能: Jordan圣帝"]
                    ],
                    "hx_licunxu": ["female", "qun", 6, ["hx_zhuantu", "hx_baizhan", "hx_shangyue"],
                        ["zhu", "des:后唐庄宗李存勖（885年12月2日－926年5月15日），本姓朱邪，字亚子，应州金城县（今山西省应县）人，沙陀族。五代时期后唐开国皇帝，后唐太祖李克用之子。李存勖善于骑射，文武双全。唐朝末年，随父征战四方，颇有功勋，累迁检校司空、晋州刺史。天祐五年（908年），出任河东节度使，袭封晋王。骁勇善战，长于谋略，南击后梁，北却契丹，东取河北，西并河中，使得晋国日益强盛。同光元年（923年），于魏州（今河北省邯郸市大名县）称帝，建立后唐。带兵灭亡后梁，定都于洛阳（今河南省洛阳市）。在位期间，吞并岐国，灭亡前蜀，取得凤翔、汉中及两川，震动南方割据诸国，“五代领域，无盛于此者”。后期沉湎声色，用人无方，纵容皇后干政，重用伶人、宦官，猜忌杀戮功臣，横征暴敛，吝惜钱财，以致百姓困苦、藩镇怨愤、士卒离心。同光四年（926年），于兴教门之变中被杀，时年四十二岁，在位三年，谥号光圣神闵孝皇帝，庙号庄宗，安葬于雍陵。</p>Pixiv ID: 73152</p>Member: 光崎</p>技能: Jordan圣帝"]
                    ],
                    "hx_zuti": ["female", "jin", 4, ["hx_huaizhi"],
                        ["des:祖逖（266年～321年），字士稚，范阳郡遒县（今河北省保定市涞水县）人。东晋时期杰出的军事家、民族英雄。祖逖出身于范阳祖氏，曾任司州主簿、大司马掾、骠骑祭酒、太子中舍人等职。永嘉之乱后，率领亲党避乱于江淮，担任奋威将军、豫州刺史。他在建武元年（317年）率部北伐，得到各地人民的响应。数年间，收复黄河以南大片领土，使得石勒不敢南侵，进号镇西将军。后因功勋巨大，受到东晋朝廷的忌惮。太兴四年（321年），朝廷命戴渊出镇合肥，以牵制祖逖的北伐。祖逖目睹朝内明争暗斗，国事日非，最终忧愤而死，朝廷追赠车骑将军，部众被弟弟祖约接掌，祖逖的北伐大业也因此而功败垂成。</p>Pixiv ID: 75330</p>Member: 雪うさぎ</p>技能: Jordan圣帝"]
                    ],
                    "hx_huanwen": ["female", "jin", 4, ["hx_zaifa", "hx_kuiding"],
                        ["des:桓温（312年－373年），字元子，谯国龙亢（今安徽怀远县龙亢镇）人。东晋重要将领及权臣、军事家，谯国桓氏代表人物。官至大司马、录尚书事。宣城内史桓彝长子，因领兵消灭成汉而声名大盛，又曾三次领导北伐，掌握朝政并曾操纵废立，更有意夺取帝位，但终因最后一次北伐大败而令声望受损，受制于朝中王氏和谢氏势力而未能如愿。死前欲得九锡亦因谢安等人借故拖延，直至去世时也未能实现。因桓温获赐谥号宣武，故《世说新语》称其为“桓宣武”。其子桓玄后来一度篡夺东晋帝位而建立桓楚，追尊桓温为“楚宣武帝”。</p>Pixiv ID: 6957790</p>Member: WsMan</p>技能: Jordan圣帝"]
                    ],
                    "hx_sushi": ["female", "wu", 3, ["hx_leiyue", "hx_diedang"],
                        ["des:苏轼（1037年1月8日－1101年8月24日），眉州眉山（今四川省眉山市）人，北宋时著名的文学家、政治家、艺术家、医学家。字子瞻，一字和仲，号东坡居士、铁冠道人。嘉佑二年进士，累官至端明殿学士兼翰林学士，礼部尚书。南宋理学方炽时，加赐谥号文忠，复追赠太师。有《东坡先生大全集》及《东坡乐府》词集传世，宋人王宗稷收其作品，编有《苏文忠公全集》。其散文、诗、词、赋均有成就，且善书法和绘画，是文学艺术史上的通才，也是公认韵文散文造诣皆比较杰出的大家。苏轼的散文为唐宋四家（韩柳欧苏）之末，与唐代的古文运动发起者韩愈并称为“韩潮苏海”，也与欧阳修并称“欧苏”；更与父亲苏洵、弟苏辙合称“三苏”，父子三人，同列唐宋八大家。苏轼之诗与黄庭坚并称“苏黄”，又与陆游并称“苏陆”；其词“以诗入词”，首开词坛“豪放”一派，振作了晚唐、五代以来绮靡的西昆体余风。后世与南宋辛弃疾并称“苏辛”，惟苏轼故作豪放，其实清朗；其赋亦颇有名气，最知名者为贬谪期间借题发挥写的前后《赤壁赋》。宋代每逢科考常出现其文命题之考试，故当时学者曰：“苏文熟，吃羊肉、苏文生，嚼菜羹”。艺术方面，书法名列“苏、黄、米、蔡”北宋四大书法家（宋四家）之首；其画则开创了湖州画派；并在题画文学史上占有举足轻重的地位。在王安石变法期间，苏轼虽赞同政治应该改革，但反对操之过急的政策及王安石任用的后任吕惠卿，因此招来新党爪牙李定横加陷害；后来又因苏轼反对“尽废新法”，受到司马光为首的旧党斥退，终生当不了宰相。由于苏轼在新旧党争中两边不讨好导致仕途失意，被侍妾王朝云戏称为“一肚皮不合时宜”。在元祐更化中一度官至尚书；绍圣年间因新党的章惇为相，又加贬谪至儋州（海南岛）；徽宗即位，遇赦北归时病卒于常州。墓在河南郏县。</p>Pixiv ID: 2705736</p>Member: マナカッコワライ@ツイッター</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_dufu": ["female", "wei", 3, ["hx_xinyong", "hx_guge", "hx_lvye"],
                        ["des:杜甫（712年2月12日－770年），字子美，号少陵野老，一号杜陵野客、杜陵布衣，唐朝现实主义诗人，其著作以弘大的社会写实著称。杜甫家族出于京兆杜氏分支，唐朝时京兆杜氏多自称为杜陵人。曾任左拾遗、检校工部员外郎，后曾隐居成都草堂，世称杜拾遗、杜工部，又称杜少陵、杜草堂。杜甫与李白并称“李杜”，为了与晚唐的两位诗人李商隐与杜牧即“小李杜”区别，又称作“大李杜”，明清以后也常被尊称为“老杜”。虽然在世时名声并不显赫，但在身后，杜甫的作品最终对中国古典文学和日本近世文学产生了深远的影响。约1500首诗歌被保留了下来，作品集为《杜工部集》。他在中国古典诗歌中以风格浑朴沉郁著称。相对李白疏朗洒脱的“诗仙”，杜甫被后人奉为“诗圣”。他的诗也因其社会时代意义被誉为“诗史”。</p>Pixiv ID: 652196</p>Member: ぶーた</p>技能: Jordan圣帝"]
                    ],
                    "hx_wangshouren": ["female", "wu", 3, ["hx_zhixing", "hx_mingwu"],
                        ["des:王守仁（1472年10月31日－1529年1月9日），幼名云，字伯安，号阳明子，谥文成。浙江绍兴府余姚县（今浙江省宁波余姚市）人，明代思想家、哲学家、书法家兼军事家、教育家，官至南京兵部尚书、都察院左都御史，因平定宸濠之乱等军功而封爵新建伯，隆庆时追赠侯爵。王守仁是陆王心学之集大成者，不但精通儒、释、道三教，而且能统军征战。因他曾在贵阳修文阳明洞天居住，自号“阳明子”，故被学者称为“阳明先生”，后世一般称王阳明，其学说世称“阳明学”，在中国、日本、朝鲜半岛都有重要而深远的影响。</p>Pixiv ID: 31640034</p>Member: UNJEM</p>技能: Jordan圣帝"]
                    ],
                    "hx_huoqubing": ["female", "shu", 4, ["hx_qiongqu"],
                        ["des:霍去病（公元前140年－公元前117年），河东平阳（今山西省临汾市）人，西汉名将、军事家、民族英雄。汉武帝皇后卫子夫及大司马大将军卫青的外甥，大司马大将军霍光的同父异母兄长。霍去病用兵灵活，注重方略，不拘古法，善于长途奔袭、快速突袭和大迂回、大穿插、歼灭战。十七岁为票姚校尉，率领八百骑兵深入大漠，两次功冠全军，封冠军侯。十九岁时升任骠骑将军，指挥两次河西之战，歼灭和招降河西匈奴近十万人，俘匈奴祭天金人，直取祁连山。这是华夏政权第一次占领河西走廊，从此丝绸之路得以开辟。漠北之战消灭匈奴左部主力七万余人，封狼居胥。战后加拜大司马，与卫青同掌军政。元狩六年（前117年），霍去病病逝，年仅二十四岁，陪葬于茂陵，谥号景桓，坟墓如同祁连山的样子。</p>Pixiv ID: 215287</p>Member: マツモトミツアキ</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_licunxiao": ["female", "qun", 4, ["hx_juecheng", "hx_yulie"],
                        ["des:李存孝（858―894年），本姓安，名敬思，代州飞狐县（今山西省灵丘县）人，粟特族。唐末著名的猛将。武艺非凡，勇猛过人，成为晋王李克用麾下骁将、义子，人称“十三太保”。随着李克用南征北战，平定黄巢起义，收复潞州，讨伐幽州，攻无不克，战无不胜，历任汾邠邢三州刺史。带兵攻打赵王王镕，受到李存信诬陷，投降唐昭宗，出任邢洺磁节度使。乾宁元年（894年），受到李克用的围攻，兵败出降，处死于太原。</p>Pixiv ID: 4480830</p>Member: CrystalHerb</p>技能: Jordan圣帝"]
                    ],
                    "hx_diqing": ["female", "wu", 4, ["hx_rongfu"],
                        ["des:狄青（1008年-1057年），字汉臣，汾州西河县（今山西省吕梁市文水县）人。北宋时期名将。狄青出身寒门，年少入伍，因面有刺字，善于骑射，人称“面涅将军”。宋仁宗时，凭借战功，累迁延州指挥使。皇祐五年（1053年），领兵夜袭昆仑关，平定侬智高之乱。此后历任枢密副使、护国军节度使、河中尹，迁升枢密使。后受到文官集团排挤，于嘉祐元年（1056年），被免去枢密使之职，加同中书门下平章事之衔，出知陈州。嘉祐二年（1057年）三月，狄青抑郁而终，年仅四十九岁。获赠中书令，谥号武襄。</p>Pixiv ID: 4493551</p>Member: こうましろ</p>技能: Jordan圣帝"]
                    ],
                    "hx_xueli": ["female", "wei", 4, ["hx_fenru", "hx_yuding"],
                        ["des:薛仁贵（614年－683年3月24日），名礼，字仁贵。河东道绛州龙门县修村（今山西河津市修村）人。唐朝初年名将，北魏河东王薛安都六世孙。薛仁贵出身于河东薛氏南祖房，于贞观末年投军，随征高丽，受唐太宗拔擢。自此征战数十年，曾大败九姓铁勒，军中传唱说：“将军三箭定天山，壮士长歌入汉关。”，从此九姓铁勒衰败，不再为边患。又降服高丽，击破突厥，功勋卓著，至唐高宗时，累官至瓜州长史、右领军卫将军、检校代州都督，封平阳郡公。永淳二年（683年），薛仁贵去世，年七十。册赠左骁卫大将军、幽州都督。著有《周易新注本义》十四卷，今已佚。</p>Pixiv ID: 1118770</p>Member: いお</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_xiaohe": ["female", "shu", 3, ["hx_geixiang", "hx_zhonglv"],
                        ["des:萧何（前257年～前193年），沛郡丰邑（今江苏省丰县）人。西汉开国功臣、政治家、丞相。早年入仕秦朝，担任沛县主吏掾，辅佐沛公刘邦起义。攻克咸阳后，接收了秦丞相府、御史府所藏的律令、图书，掌握全国山川险要、郡县户口，对日后制定政策起到重要作用。楚汉之争时，留守关中，打造汉军的巩固后方，输送士兵、粮饷支援作战，对刘邦战胜项羽、建立汉朝起了重要作用。西汉建立后，担任相国，史称“萧相国”，册封酂侯，名列功臣第一。采摭秦朝六法，制定实施《九章律》。主张无为而治，采用黄老之术，休养生息。汉高帝十一年（前196年），协助刘邦消灭韩信、英布等异姓诸侯王。刘邦死后，辅佐汉惠帝。汉惠帝二年（前193年）七月，去世，谥号“文终”。</p>Pixiv ID: 8062849</p>Member: Enuni</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_lijing": ["female", "wei", 4, ["hx_binglun", "hx_tuqiu"],
                        ["des:李靖（571年－649年7月2日），字药师（一称本名药师），雍州三原（今陕西三原县）人，祖籍陇西狄道（今甘肃临洮县）。隋末至初唐时期杰出的军事家。李靖初仕隋朝，拜马邑郡丞。晋阳起兵后，转而效力唐朝。随秦王李世民进击王世充。武德三年（620年）辅佐赵郡王李孝恭南平萧铣和辅公祏，并招抚岭南诸部。武德八年（625年）起在北疆抵御东突厥入侵，贞观三年（629年）以定襄道行军总管总统诸将北征，以精骑三千夜袭定襄，使颉利可汗部惊溃，又奔袭阴山，一举灭亡东突厥，使唐朝疆域自阴山北直至大漠。因功拜尚书右仆射，获封代国公。贞观九年（635年）再获起用，统军西破吐谷浑。后改封卫国公，世称“李卫公”。晚年多病，阖门自守，不预政事。贞观十七年（643年）成为“凌烟阁二十四功臣”之一。贞观二十三年（649年），李靖病逝，终年七十九岁。册赠司徒、并州都督，谥号“景武”，陪葬昭陵。唐肃宗时配享武成王庙，位列十哲。李靖一生征战数十年，为唐王朝的建立及发展立下赫赫战功。他的治军作战经验，进一步丰富了中国古代的军事思想和兵法理论。著有《六军镜》《卫公兵法》等多部兵书，多已失传。</p>Pixiv ID: 3664310</p>Member: ほーじろ</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_hanxin": ["female", "shu", 5, ["hx_qianfa", "hx_nizhen", "hx_juezhen"],
                        ["des:韩信（约前231年－前196年），泗水郡淮阴县（今江苏省淮安市淮安区，一说淮阴区）人。西汉开国功臣、军事家，“汉初三杰”，“兵家四圣”，古代“军事思想“兵权谋家”的代表人物，后人奉为“兵仙”、“神帅”。秦末大乱之际投奔项梁、项羽，未得重用。转投刘邦，经夏侯婴推荐，拜治粟都尉；经萧何保为大将，制定“汉中对策”，申军法，设还定三秦之计。刘邦兵败于彭城后，韩信先破楚军于京、索之间，后平定魏国，请命北伐拿下代国。刘邦收其精兵后，背水一战，击败赵国，派人降服燕国。支援刘邦以及清除项羽派往赵国的奇兵的同时平定剩下的赵国城邑。刘邦成皋兵败夺其精兵后，奉命攻打齐国，全歼龙且二十万楚军。韩信攻打楚国，项羽与刘邦签订鸿沟协议。刘邦听从张良、陈平计策，撕毁鸿沟协议，追击项羽失败。汉五年，带兵会师垓下，围歼楚军。项羽死后，解除兵权，徙为楚王。因人诬告，贬为淮阴侯。吕后与萧何合谋，诱杀于长乐宫钟室，夷灭三族。“国士无双”、“功高无二，略不世出”是时人对其的评价。作为统帅，擒魏、取代、破赵、胁燕、击齐，灭楚，名闻海内，威震天下；作为军事理论家，联合张良整理兵书、序次兵法，并著有《韩信兵法》三篇。</p>Pixiv ID: 2490522</p>Member: 未早</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_tuobahong": ["female", "wei", 3, ["hx_xingxiao", "hx_gezhi", "hx_fuwen"],
                        ["zhu", "des:北魏孝文帝拓跋宏（467年10月13日～499年4月26日），汉名元宏，代郡平城（今山西省大同市），鲜卑族。南北朝时期杰出的政治家、改革家，北魏帝国第七位皇帝，献文帝拓跋弘长子，母为李夫人。皇兴三年（469年），册立皇太子。皇兴五年，受禅即位，年号延兴。祖母文明太后临朝执政，着手推行一系列中央集权的改革。太和十四年（490年），孝文帝正式亲政后，进一步推动改革。整顿吏治，设立三长制，实行均田制；太和十八年（494年），迁都洛阳，全面改革鲜卑旧俗，进行政治改革，镇压反对改革的守旧贵族，处死太子元恂。一系列举动推动北魏经济、文化、社会、政治、军事等的全面发展，史称“太和改制”，有效缓解民族隔阂，对北方民族融合和发展起了积极作用。太和二十三年（499年4月26日），驾崩于谷塘原行宫，年仅三十三岁，临终仍心怀“仰光七庙，俯济苍生”之志，谥号孝文皇帝，庙号高祖，葬于长陵。</p>Pixiv ID: 5851220</p>Member: star741</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_zhangqian": ["female", "shu", 4, ["hx_kulv"],
                        ["des:张骞（约前164年－前114年），字子文，汉中郡城固（今陕西省汉中市城固县）人，中国汉代杰出的外交家、旅行家、探险家，丝绸之路的开拓者。故里在陕西省汉中市城固县城南2千米处汉江之滨的博望村。张骞富有开拓和冒险精神。西汉建元二年（前139年），奉汉武帝之命，由大汉帝都长安出发，甘父做向导，率领一百多人出使西域，打通了汉朝通往西域的南北道路，即赫赫有名的“丝绸之路”，汉武帝以军功封其为博望侯。司马迁称赞张骞出使西域为“凿空”，意思是“开通大道”。张骞先后两次出使西域，打开了中国与中亚、西亚、南亚以至通往欧洲陆路交通，从此中国人通过这条通道向西域和中亚等国出售丝绸、茶叶、漆器和其他产品，同时从欧洲、西亚和中亚引进宝石、玻璃器等产品。张骞被誉为“丝绸之路的开拓者”、“第一个睁开眼睛看世界的中国人”。汉武帝元鼎三年（前114年），张骞病逝于长安，归葬汉中故里。</p>Pixiv ID: 1248336</p>Member: Empew</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_lidingguo": ["female", "qun", 4, ["hx_qinghui"],
                        ["des:李定国（1621年—1662年），字宁宇（或云字一人，初名如靖），南明永历政权抗清名将，民族英雄，陕西榆林（或作延安）人。李定国出生于贫苦农民家庭，公元1630年（崇祯三年），张献忠发动陕北饥民起义，将少年李定国收为养子，改姓张。从此，他跟随张献忠转战南北。李定国成年后，勇敢善战，为张献忠所钟爱。张献忠死后归顺南明政权，公元1652年（永历六年，清顺治九年）初，李定国在经过充分准备之后，出兵八万攻湖南。先取沅州（今湖南黔阳）、靖州（今湖南邵阳），继攻广西桂林，大败清军，逼得清军主帅、定南王孔有德自杀。李定国七月初占领桂林，随后，直下柳州、衡州等四州，兵锋指向长沙。清廷闻讯大惊，增派十万大军驰援。为避清军锐气，李定国暂时撤离长沙外围，退守衡州。清军主帅、亲王尼堪率军尾追，李定国设伏将清军团团包围，四面猛攻，清军大溃，尼堪被阵斩，全军覆没。李定国取得桂林、衡阳两大战役的胜利，使南明的抗清斗争打开了一个新局面。公元1661年（永历十五年，顺治十八年），清军吴三桂部十万大军进入缅甸，逼缅王交出永历帝，未果。次年，吴三桂在昆明将永历帝缢杀，南明至此灭亡。李定国闻讯，悲愤成疾，在西南边陲坚持抗清斗争17年的李定国于公元1662年六月在勐腊（在澜沧江以西）病逝，时年42岁。当下云南人仍然视李定国为滇中的脊梁，晚清革命党人起义，蔡锷等仍以李定国为榜样，章炳麟说：“愿吾滇人，毋忘李定国！”</p>Pixiv ID: 3664310</p>Member: ほーじろ</p>技能: Jordan圣帝"]
                    ],
                    "hx_weiqing": ["female", "shu", 4, ["hx_jiexing"],
                        ["des:卫青（？-前106年），字仲卿，河东平阳（今山西临汾西南）人，汉朝著名的将领、军事家，伟大的民族英雄。生父郑季，是平阳侯曹寿手下的一名小吏。其母卫媪是平阳公主的女奴。卫青从小就给人家做牧童，受尽苦楚。成年后，又做平阳公主的骑奴，公主出行时，他骑马相随。后来，他的姐姐卫子夫被选入宫，得到武帝宠幸，他才被提为太中大夫。由于他精于骑射技术，常随武帝外出围猎，很得武帝赏识。公元前129年，匈奴骑兵大举入侵，汉兵分四路出击。其余三路皆失利，只有卫青一路在龙城之战获大胜而归。武帝大喜，封他为关内侯。公元前127年，收复河套地区。公元前124年，匈奴分三路大举南下，爆发漠南之战。卫青利用右贤王傲慢轻敌、麻痹大意的弱点，乘夜奔袭，围追堵杀，又获大胜。捷报传到长安，汉武帝喜出望外，特派使者赶到边塞，拜卫青为大将军，统帅六师。公元前119年，漠北之战，卫青、霍去病重挫匈奴，迫使匈奴不敢南侵。后来，平阳侯病死，平阳公主居孀，汉武帝下诏命卫青娶平阳公主为妻。元封五年（前106年），卫青病故，谥称为烈侯，葬于茂陵。</p>Pixiv ID: 5596229</p>Member: えみょ</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_yuefei": ["female", "wu", 4, ["hx_zhikun"],
                        ["des:岳飞（1103年3月24日－1142年1月27日），字鹏举，相州汤阴（今河南省安阳市汤阴县）人，宋朝抗金名将，又有“民族英雄”称号。官至少保、枢密副使，封武昌郡开国公。岳飞被宋高宗下令杀害，死后多年宋孝宗为其平反，追谥武穆、后追赠太师、追封鄂王，改谥忠武，故后人称呼岳武穆、武穆王、岳忠武王。明神宗万历帝加封三界靖魔大帝忠孝庙法天尊岳圣帝君，配奉于各地武庙。岳飞于北宋末年投军，从南宋建炎二年（1128）年遇宗泽起到绍兴十一年（1141年）为止的十余年间，率领岳家军与金军进行过数百次大小战斗。绍兴十年（1140年），金太祖四子完颜兀术毁盟攻宋，岳飞挥师北伐，先后收复郑州、洛城等地，又于郾城、颍昌大败金军，进军朱仙镇。宋高宗却一意求和，以十二道金字牌下令退兵，岳飞在孤立无援之下被迫班师。在绍兴和议过程中，岳飞遭受秦桧、张俊等人的诬陷，被捕入狱。绍兴十二年（1142年1月），岳飞以“莫须有”的谋反罪名，迫令其自尽，其长子岳云和部将张宪皆早岳飞一个月先被害。宋孝宗即位后被平反，改葬于西湖畔栖霞岭。元修《宋史》记载：岳飞治军以身作则，赏罚分明，纪律严整，又能体恤部属，他率领的“岳家军”号称“冻死不拆屋，饿死不掳掠”；敌方女真人赞叹为“撼山易，撼岳家军难”。岳飞是南宋初唯一成功组织大规模进攻的统帅，他反对宋高宗“仅令自守以待敌，不敢远攻而求胜”之消极防御战略，一贯主张积极进攻。他重视民间抗金力量，继承李纲与宗泽之“连结河朔”之谋，主张河北抗金武装和宋官军互相配合，夹击金军，以收复失地。岳飞之文学才华也是将帅中少有，著有词作《满江红·写怀》。其著作编成《岳忠武王文集》。形意拳相传是岳飞本人创造的武术。</p>Pixiv ID: 4699098</p>Member: 唯Tu</p>技能: Jordan圣帝"]
                    ],
                    "hx_guanyiwu": ["female", "qun", 3, ["hx_zhenbing", "hx_zhengmin"],
                        ["des:管仲（前725年？－前645年），姬姓，管氏，名夷吾，字仲，谥敬，被称为管子、管夷吾、管敬仲，颍上（今安徽省颍上县）人，春秋时代法家代表人物。齐国的政治家，哲学家，与乐毅齐名，周穆王的后代。管仲虽然仅是齐国下卿，却被视为中国历史上宰相的典范，任内大兴改革，重视商业。《国语·齐语》、《史记·管晏列传》、《管子》、《左传》等都载有他的生活传记，《论语》中也有几处关于孔子对他的评论，北宋苏洵的《管仲论》也对管仲做出了分析和批判。</p>Pixiv ID: 17091516</p>Member: 明春</p>技能: Jordan圣帝"]
                    ],
                    "hx_liubang": ["female", "shu", 4, ["hx_xiongyu", "hx_gefeng"],
                        ["zhu", "des:汉高祖刘邦（前256年或前247年－前195年6月1日），字季，是中国第一位有庙号及谥号的皇帝。楚国沛丰邑中阳里（今江苏徐州丰县）人。秦末汉初的军事家、政治家。刘邦从沛县起兵反秦，被萧何、曹参、樊哙等人拥立，人称沛公，后投奔楚项梁，以“先入定关中者为王”之约，破武关，秦三世子婴降。秦朝灭亡后，项羽分封入关诸侯有功者，封刘邦为汉王。楚汉战争中，刘邦击败项羽获胜，统一自秦亡后的天下，于公元前202年称帝，史称西汉，为汉朝开国皇帝，驾崩于公元前195年，在位7年，死后庙号太祖，谥号高皇帝，史称汉高帝。太祖为其正式庙号，而史书多称呼 “汉高祖”。</p>Pixiv ID: 529070</p>Member: RJ</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_fangxuanling": ["female", "wei", 3, ["hx_shanhua", "hx_chengjian"],
                        ["des:房玄龄（579年～648年8月18日），名乔，字玄龄，齐州临淄县（今山东省淄博市）人。唐朝初年名相、政治家、史学家，隋朝泾阳令房彦谦之子。善诗能文，博览经史。十八岁，举进士出身，授羽骑尉、隰城县尉。晋阳起兵后，投靠秦王李世民后，积极出谋划策，典管书记，选拔人才，成为秦王府得力谋士之一。武德九年（626年），谋划“玄武门之变”，随同杜如晦等五人居于首功。唐太宗即位后，拜中书令、邢国公，负责综理朝政，兼修国史、编纂《晋书》。执政期间，房玄龄善于谋略，杜如晦处事果断，并称“房谋杜断”，成为良相典范，累迁尚书左仆射、司空，受封梁国公，名列“凌烟阁二十四功臣”。贞观二十二年（648年），病逝，追赠太尉，谥号文昭，配享太宗庙廷，陪葬昭陵。</p>Pixiv ID: 429077</p>Member: MISSILE228</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_duruhui": ["female", "wei", 3, ["hx_shijue", "hx_fubian"],
                        ["des:杜如晦（585年－630年），字克明，京兆郡杜陵县（今陕西省西安市长安区）人。唐朝初年名相，襄州刺史杜吒之子。出身京兆杜氏，初仕隋朝，授滏阳县尉。晋阳起兵后，成为唐太宗李世民幕府谋臣，授兵曹参军。迁陕州长史，从平薛仁杲、刘武周、王世充、窦建德叛乱。迁秦王府从事中郎，积极运筹帷幄，为时人所敬服。文学馆建立后，位列十八学士之首。参与策划“玄武门之变”时，位居首功，拜太子左庶子，册封蔡国公。唐太宗即位后，历任兵部尚书、检校侍中、吏部尚书，迁右仆射，配合房玄龄同心辅政，负责选拔人才、制定法度等，并称“房谋杜断”。贞观四年（630年5月6日），病逝，时年四十六岁，追赠司空、莱国公，谥号为成。贞观十七年（643年），图形凌烟阁，位列第三。</p>Pixiv ID: 429077</p>Member: MISSILE228</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_caocao": ["female", "wei", 4, ["hx_yehai", "hx_wenxian"],
                        ['zhu', "des:魏武帝曹操（155年～220年3月15日），字孟德，小名阿瞒、吉利，沛国谯县（今安徽省亳州市）人。中国古代杰出的政治家、军事家、文学家、书法家、诗人。东汉末年宰相，太尉曹嵩之子，曹魏政权的奠基者。东汉末年，面对天下大乱，以汉献帝刘协名义征讨四方，对内消灭二袁、吕布、刘表、马超、韩遂等割据势力，对外降服南匈奴、乌桓、鲜卑等，统一中国北方地区，扩大屯田、兴修水利、奖励农桑、重视手工业、安置流民、实行“租调制”，促进中原地区经济生产和社会稳定。建安十八年（213年），获封魏公，建立魏国，定都邺城。建安二十一年（216年），册封魏王，权位在诸王之上。建安二十五年（220年3月15日），曹操去世，谥号为武，安葬于高陵。其子曹丕称帝，追封皇帝，谥号为武，庙号太祖。曹操喜欢用诗歌、散文抒发政治抱负，反映民生疾苦，是东汉文学的代表人物，被鲁迅称赞“改造文章的祖师”。擅长书法，被唐朝张怀瓘《书断》评为“妙品”。</p>Pixiv ID: 177784</p>Member: 森倉円</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_liuyu": ["female", "shu", 4, ["hx_queyue", "hx_fubing"],
                        ['zhu', "des:宋武帝刘裕（363年4月16日－422年6月26日），字德舆，小名寄奴。彭城郡彭城县绥舆里人，生于晋陵郡丹徒县京口里。中国东晋至南北朝时期杰出的政治家、改革家、军事家，南朝刘宋开国君主（420年7月10日－422年6月26日在位）。刘裕自幼家贫，后投身北府军为将。自晋安帝隆安三年（399年）起，他对内平定孙恩起义，消灭桓楚、西蜀及卢循、刘毅、司马休之等割据势力，使南方出现百年未有的统一局面；对外消灭南燕、后秦等国，降服仇池，又以却月阵大破北魏铁骑，收复淮北、山东、河南、关中等地，光复洛阳、长安两都。凭借着巨大的军功，得以总揽东晋军政大权，官拜相国、扬州牧，封宋王。永初元年（420年），刘裕代晋自立，定都建康，国号“宋”。执政期间，吸取前朝士族豪强挟主专横的教训，加强集权，抑制兼并，实施土断，整顿吏治，重用寒士，振兴教育，并多次遣使访民间疾苦，轻徭薄赋，废除苛法，改善社会状况，终结了门阀专政的时代，奠定了南朝“寒人掌机要”的政治格局。他对江南经济的发展，汉文化的保护与发扬有重大贡献，并开创了江左六朝疆域最辽阔的时期，为“元嘉之治”打下坚实的基础。明人李贽誉之为“定乱代兴之君”。永初三年（422年），刘裕计划征伐北魏，尚未出师，便因病逝世，终年六十岁。庙号高祖，谥号武皇帝，葬于初宁陵。著有《兵法要略》一卷，今已佚。</p>Pixiv ID: 341747</p>Member: 朱シオ</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_baiqi": ["female", "wei", 5, ["hx_cuidi", "hx_lufu"],
                        ["des:白起（？—公元前257年），秦国白氏，名起，郿邑（今陕西眉县常兴镇白家村）人。战国时期名将，杰出的军事家，“兵家”代表人物。熟知兵法，善于用兵，交好秦宣太后，和穰侯魏冉的关系很好。辅佐秦昭王，屡立战功。伊阙之战，大破魏韩24万联军，彻底扫平秦军东进之路。伐楚之战，攻陷楚都郢城。长平之战，重创赵国主力。担任秦军主将30多年，攻城70余座，为秦国统一六国做出了巨大的贡献，受封为武安君。功高震主，得罪应侯，接连贬官。秦昭襄王五十年（前257年），赐死于杜邮。</p>Pixiv ID: 7664506</p>Member: Yuyo</p>技能: Jordan圣帝"]
                    ],
                    "hx_chenqingzhi": ["female", "wu", 4, ["hx_yanxi", "hx_lizu"],
                        ["des:陈庆之（484年—539年），字子云，义兴郡国山县（今江苏省宜兴市）人。南朝梁名将。陈庆之出身寒门，少为梁武帝萧衍随从，颇受信任，起家奉朝请。普通六年（525年），出任武威将军，迎接元法僧归附，迁宣猛将军。大通元年（527年），联合曹仲宗、韦放会攻打北魏涡阳，迫使涡阳城主王纬出降。大通二年（528年），加号飙勇将军，奉命护送降梁的魏北海王元颢北还。次年，击败拥兵7万、筑垒9座的魏将丘大千。在考城击败拥兵2万的魏将元晖业。五月，连拔荥阳、虎牢二城，长驱直入，护送元颢到洛阳。经历四十七战，平定三十二城，所向无前。后来，北魏重兵回师洛阳，元颢的十万大军惨败，陈庆之的梁军也随之而败。最终，陈庆之只身潜返江南。中大通二年（530年），出任司州刺史，参加悬瓠之战，击败北魏颍州刺史娄起；楚城之战，破东魏孙腾等人。大同元年（535年），与东魏尧雄交战两次，皆失利而还。大同二年（536年），破东魏侯景，进号仁威将军。大同五年（539年）十月，陈庆之去世，时年五十六岁，谥号为“武”。长子陈昭继承爵位。陈庆之身体文弱，难开弓弩，不善骑马，善抚军士，富有胆略，善于筹谋，带兵有方，是一位深得众心的儒将。</p>Pixiv ID: 3806145</p>Member: [みゅとん]뮤우톤</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_xiangyu": ["female", "qun", 4, ["hx_juechen", "hx_zhongchi"],
                        ["des:项羽（前232年－前202年），名籍，字羽，以字行，楚国下相（今江苏省宿迁市）人，秦朝末年西楚军事家、政治家。楚国名将项燕之孙，七岁后随叔父项梁迁吴中，秦末民变期间在会稽郡（今江苏苏州）起兵反秦，被楚后怀王封为鲁公。前207年钜鹿之战中，项羽统率楚军五万大破秦军四十万，决定秦朝覆亡之势，秦朝最后一位君主子婴自降为“秦王”，不再称“皇帝”。项羽起兵三年，即率领山东六国诸侯灭秦，分封天下，政由羽出，自封“西楚霸王”，统治黄河及长江下游的梁楚九郡，年仅二十五岁。前206年，汉王刘邦从汉中出兵进攻项羽，展开了历时四年的楚汉战争，期间项羽虽然彭城之战（今江苏徐州）大破刘邦，但项羽因分封矛盾引起各路诸侯纷纷反叛，且始终无法有固定的后方补给，粮草殆尽，最后反被刘邦所灭。前202年，项羽在垓下之战为刘邦指挥诸侯六十万联军所败，突围至乌江后，自刎而死。项羽被誉为中国历史最为勇猛的将领，史学家称“羽之神勇，千古无二”，且在“霸王”一词通常专指项羽。</p>Pixiv ID: 31150749</p>Member: NE∅N</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_liukun": ["female", "jin", 3, ["hx_qijia", "hx_jiaogong"],
                        ["des:刘琨（270年～318年6月22日），字越石，中山魏昌（今河北省无极县）人。东晋时期杰出的政治家、文学家、音乐家、军事家，西汉中山靖王刘胜之后、光禄大夫刘蕃之子。出身中山刘氏。工于诗赋，少有文名，为鲁公二十四友的重要成员。八王之乱时，效力诸王，累迁并州刺史，封广武侯。永嘉之乱，坚守晋阳九载，抵御汉赵和后赵的入侵。晋愍帝即位，拜司空、大将军、都督并冀幽诸军事。并州为石勒所陷后，投奔幽州刺史段匹磾，约为兄弟，惨遭杀害。太兴三年（320年），平反昭雪，追赠侍中、太尉，谥号为愍。刘琨善于文学，精通音律，诗歌多描写边塞生活。《隋书·经籍志》有《刘琨集》9卷，又有《别集》12卷。明朝张溥辑为《刘中山集》，收入《汉魏六朝百三家集》。</p>Pixiv ID: 4592232</p>Member: NoriZC</p>技能: Jordan圣帝"]
                    ],
                    "hx_liuji": ["female", "wu", 3, ["hx_jueyun", "hx_qianyin"],
                        ["des:刘基（1311年7月1日－1375年5月16日），字伯温，浙江青田（今浙江文成）人。元末明初政治家、文学家，明朝开国元勋。元至顺年间，刘基举进士。至正十九年（1359年），受朱元璋礼聘而至。他上书陈述时务十八策，倍受宠信。参与谋划平定张士诚、陈友谅与北伐中原等军事大计。吴元年（1367年）为太史令，进《戊申大统历》。奏请立法定制，以止滥杀。朱元璋即位后，他奏请设立军卫法，又请肃正纪纲，曾谏止建都于凤阳。洪武三年（1370年），封诚意伯，故又称刘诚意。次年赐归。刘基居乡隐形韬迹，只饮酒弈棋，口不言功。因左丞相胡惟庸诬陷而被夺禄。入京谢罪后，不久即逝世。明武宗时赠太师，谥号“文成”。刘基精通天文、兵法、数理等，尤以诗文见长。诗文古朴雄放，不乏抨击统治者腐朽、同情民间疾苦之作。与宋濂、高启并称“明初诗文三大家”。著作均收入《诚意伯文集》。刘基辅佐朱元璋平天下，计划立定，人莫能测。朱元璋多次称他为“吾之子房”。在中国民间，也流传着“三分天下诸葛亮，一统江山刘伯温；前朝军师诸葛亮，后朝军师刘伯温”的说法。</p>Pixiv ID: 17545569</p>Member: ちにく</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_lishimin": ["female", "wei", 4, ["hx_tianming", "hx_dingguo", "hx_guangna"],
                        ["zhu", "des:唐太宗李世民（598年1月23日－649年7月10日），唐朝第二任皇帝。出自陇西成纪，626年至649年在位。唐高祖李渊次子，母亲太穆皇后窦氏。他在灭亡东突厥汗国之后，被九姓铁勒、西域诸国国王、吐火罗叶护尊称为“天可汗”。李世民少年从军，曾于雁门关营救隋炀帝。唐朝建立后，李世民受封为秦公，后晋封为秦王，他是杰出的军事家，率部平定了薛仁果、刘武周、窦建德、王世充等隋末群雄，在唐朝的建立与统一过程中立下赫赫战功，最终统一天下。武德九年（626年）发动玄武门之变杀死自己的兄长太子李建成、四弟齐王李元吉二人及二人诸子，被立为太子，唐高祖李渊不久被迫退位，李世民即位，在位时间只使用一个年号贞观。李世民登基后，积极听取群臣的意见，以文治天下，并开疆拓土，成为中国史上著名的明君。他虚心纳谏，在国内厉行节约，使百姓能够休养生息，终于使得社会出现了国泰民安的局面，开创了中国历史上著名的贞观之治，为唐朝130年的盛世奠定重要基础。李世民爱好文学与书法，其真迹今仅存晋祠之铭并序碑刻。649年7月10日（贞观二十三年五月己巳日），唐太宗李世民因病驾崩于含风殿，享年51岁，在位23年，庙号太宗 ，谥号“文皇帝”，葬于昭陵。</p>Pixiv ID: 164921</p>Member: Rozer</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_liuche": ["female", "shu", 4, ["hx_zunwei", "hx_zuigong", "hx_tianen"],
                        ["zhu", "des:汉武帝刘彻（前156年7月31日－前87年3月29日），西汉第七位皇帝。于7岁时被册立为储君，16岁登基，在位达53年345天。其正式谥号为“孝武皇帝”，后世省略“孝”字称“汉武帝”，是清圣祖以前在位最长的中国皇帝，也是中国历史上在位第三长的皇帝。武帝即位初期，适逢国家休生养息了70年，商业贸易达臻鼎盛，接着因扩张战略，疆域大幅增加，但导致民生凋零、经济衰败，深远影响两汉的国势。对内政策上，开创了察举制并兴太学，培养出许多的名臣良将；颁布《推恩令》，削弱地方诸侯的势力；将盐铁和铸币权收归中央专卖；另外罢黜百家，独尊儒术，儒学从此成为中国社会主流思想，另有开辟丝绸之路、使用年号、设立刺史、加强内官权力等划时代的措施。对外政策上，汉武帝一改汉高祖刘邦白登之围以后朝廷所奉行的和亲传统，以武力对付匈奴，发动第二次汉匈战争，先后攻取了多处以前秦朝的领土；不过终其一世未能解除秦朝以来匈奴于中国西北部的威胁。汉武帝又以武力先后攻破东瓯国、南越国、闽越国、卫满朝鲜等，并且置郡县治理，册封夜郎国、滇国；同时两次派遣张骞出使西域，开辟丝绸之路、远征大宛，使汉帝国的影响力和控制力远播中亚，为汉朝武功的极盛时期。然而长年累月的穷兵黩武，对人民造成了浩大的负担，中年以后的汉武帝性情也变得迷信多疑，最后致使巫蛊之祸发生，动摇了朝廷的根基。他也对臣下擅用权力，司马迁和李陵家族都在他的盛怒下遭难。驾崩前两年，汉武帝下《轮台诏》，重拾文景之治时期的与民生息的政策，方使后来的昭、宣二帝国家的治理得以重回正轨。</p>Pixiv ID: 16831741</p>Member: domi</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_limi": ["female", "wei", 3, ["hx_wuwai", "hx_chaji"],
                        ["des:李泌（722年－789年4月1日），字长源。祖籍辽东郡襄平县（今辽宁辽阳），生于京兆府（今陕西西安）。唐朝中期政治家、谋臣、学者，北周太师李弼的六世孙。李泌出身辽东李氏，自幼聪颖，深得唐玄宗赏识，令其待诏翰林，为太子李亨的属官。后遭宰相杨国忠忌恨，只得归隐名山。安史之乱时，李亨即位于灵武后，召李泌参谋军事，宠遇有加。不久又被权宦李辅国等诬陷，再次隐居衡岳。唐代宗即位后，再被召为翰林学士，接连受宰相元载、常衮排挤，被外放至地方任职。唐德宗时入朝拜相，参预内政、外交、军事、财政等方面的筹划，对内勤修军政、调和将相，对外联结回纥、大食等国遏制吐蕃，达成“贞元之盟”，使边陲安定，在相当程度上保证了贞元时期唐帝国的稳定。累官至中书侍郎、同平章事，封邺县侯，世称“李邺侯”。贞元五年（789年），李泌病逝，享年六十八岁。获赠太子太傅。李泌博涉经史，精研易象。善作文章，尤工于诗。有《李泌集》二十卷，今已佚。《全唐诗》录其诗四首。</p>Pixiv ID: 1023317</p>Member: gomzi</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_xuda": ["female", "wu", 4, ["hx_fengtao", "hx_jishi"],
                        ["des:徐达（1332年－1385年），汉族，字天德。濠州钟离（今安徽凤阳东北）人。元末明初名将，明朝开国元勋。徐达出身农家。元朝末年，徐达参加了朱元璋领导的起义军，为淮西二十四将之一。至正二十三年（1363年），在鄱阳湖之战中大败陈友谅。次年，被任命为左相国。至正二十五年（1365年），麾师攻取淮东，并于两年后攻克平江，灭张士诚。旋即出任征虏大将军，与副将常遇春一同挥师北伐，推翻元朝的统治。洪武元年（1368年），攻入大都，灭亡元朝。此后连年出兵，打击元朝残余势力，官至太傅、中书右丞相、参军国事兼太子少傅，封魏国公。他为人谨慎，善于治军，戎马一生，为明朝建立了不朽的功勋。洪武十八年（1385年），徐达去世。追封中山王，谥号“武宁”，赐葬钟山之阴，御制神道碑文。又配享太庙，肖像功臣庙，为明朝开国第一功臣，位列开国“六王”之首。</p>Pixiv ID: 32404650</p>Member: Eunchong</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_zhuyuanzhang": ["female", "wu", 4, ["hx_xiongjue", "hx_qingsu"],
                        ["zhu", "des:明太祖朱元璋（1328年10月21日－1398年6月24日），或称洪武帝，明朝开国皇帝，原名朱重八，曾改名朱兴宗，投军被郭子兴取名元璋，字国瑞，庙号“太祖”，谥号“开天行道肇纪立极大圣至神仁文义武俊德成功高皇帝”，统称“太祖高皇帝”。在位三十一年，因年号洪武也俗称洪武帝。太祖之后的明朝皇帝除明英宗（复辟），皆实行一世一元制。朱元璋出身贫农家庭，幼时贫穷，曾为地主放牛。后因灾变，曾一度剃发出家，四出流浪，化缘为生，25岁（1352年）时，参加郭子兴领导的红巾军反抗蒙元政权。先后击败了陈友谅、张士诚等其他诸侯军阀，统一南方，后北伐灭元，建立大一统的封建皇朝政权，国号“大明”。明太祖下令农民归耕，奖励垦荒；大兴移民屯田和军屯；组织各地农民兴修水利；大力提倡种植桑、麻、棉等经济作物和果木作物；下令解放奴婢；减免赋税。派人到全国各地丈量土地，清查户口等等。经过洪武时期的努力，社会生产逐渐恢复和发展，史称“洪武之治”。同时立《大明律》，用严刑峻法管理百姓与官僚，禁止百姓自由迁徙，严厉打击官吏的贪污腐败，设立锦衣卫等特务机构，整肃显贵的势力及他认为对他的朝廷有威胁的人、并废中书省，由皇帝直领各部，进一步加强了中央集权。驾崩后传位于嫡长孙朱允炆为明惠宗。</p>Pixiv ID: 16831741</p>Member: domi</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_liubei": ["female", "shu", 4, ["hx_qingzhi", "hx_julie"],
                        ['zhu', "des:汉昭烈帝刘备（161年－223年6月10日），汉族，字玄德，涿郡涿县（今河北省涿州市）人，西汉中山靖王刘胜之后，蜀汉开国皇帝、政治家。史家多称其为先主。刘备少年时拜卢植为师，而后参与镇压黄巾起义、讨伐董卓等活动。因为自身实力有限，刘备在诸侯混战过程中屡屡遭受失败，所以先后依附公孙瓒、陶谦、曹操、袁绍、刘表等多个诸侯。但因其始终坚持以德服人的行为准则，受到了海内外名士的尊敬，至有陶谦、刘表等放弃让自己的儿子继承基业，而是选择将自己的领地徐州、荆州让给刘备统领。通过坚持不懈的努力，刘备于赤壁之战后，先后拿下荆州、益州，建立了蜀汉政权。而后因为关羽被东吴所害，刘备不听群臣劝阻，执意发动对吴国的战争，结果兵败夷陵，最终于章武三年（223年）病逝于白帝城，终年六十三岁，谥号昭烈皇帝，《晋书·王弥传》称之为烈祖，葬惠陵。刘备弘毅宽厚，知人待士，百折不挠，其临死前举国托付给诸葛亮的行为被陈寿赞为古今之盛轨。后世众多文艺作品以刘备为主角。成都武侯祠有昭烈庙为之纪念。</p>Pixiv ID: 177784</p>Member: 森倉円</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_menggong": ["female", "wu", 4, ["hx_jiegong", "hx_zhanyu"],
                        ["des:孟珙（1195年－1246年10月13日），字璞玉，号无庵居士。随州枣阳（今湖北枣阳）人，原籍绛州（今山西新绛）。南宋中后期军事家，民族英雄，左武卫将军孟宗政第四子。孟珙出身将门，曾祖孟安、祖父孟林都为岳飞部将。他早年随父于枣阳抗金，在孟宗政死后接管忠顺军，累官京西兵马钤辖。绍定六年（1233年），击败入侵的金国恒山公武仙所部。端平元年（1234年），参与蔡州之战，联合蒙古灭亡金国。宋蒙战争爆发后，统领南宋川蜀、京湖两大战场，以一人之力统御南宋三分之二战线上的战事。累官枢密都承旨、京西湖北路安抚制置使，四川宣抚使兼知夔州，封汉东郡开国公。晚年以宁武军节度使致仕。淳祐六年（1246年），孟珙病逝，年五十二。后特赠太师、吉国公，谥号“忠襄”。孟珙虽为武将，但注重文教事业，于战乱之际兴建公安书院、南阳书院。又精研《易经》，颇通佛学。著有《警心易赞》《无庵法语》等，今已佚失。《全宋诗》《全宋文》辑录有其诗文。</p>Pixiv ID: 1336451</p>Member: 海凪コウ【KOH】</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_fanli": ["female", "wu", 3, ["hx_xiance", "hx_houzhi"],
                        ["des:范蠡（公元前536年—公元前448年），字少伯，华夏族，楚国宛地三户（今南阳淅川县滔河乡）人。春秋末期政治家、军事家、谋略家、经济学家和道家学者，越国相国、上将军，武庙十哲之一。曾献策扶助越王勾践复国，兴越灭吴，后隐去。著《范蠡》兵法二篇，今佚。范蠡为中国早期商业理论家，楚学开拓者之一。被后人尊称为“商圣”，”南阳五圣“之一。虽出身贫贱，但是博学多才，与楚宛令文种相识、相交甚深。因不满当时楚国政治黑暗、非贵族不得入仕而一起投奔越国，之后被拜为上大夫、相国，辅佐越国勾践。他帮助勾践兴越国，灭吴国，一雪会稽之耻，成就霸业，又被封为上将军。功成名就之后急流勇退，化名姓为鸱夷子皮，遨游于七十二峰之间。期间三次经商成巨富，三散家财。后定居于宋国陶丘（今山东省菏泽市定陶区南），自号“陶朱公”，公元前448年，范蠡卒，时年88岁。至唐朝唐德宗建中三年（782年），配享武成王庙，被追封为古今六十四名将（武成王庙六十四将）之一； 宋朝时期，为武庙十哲之一。世人誉之：“忠以为国，智以保身，商以致富，成名天下。”因范蠡一生艰苦创业、三致千金， 又能广散钱财救济贫民且淡泊名利的商人形象，以及巨大的经商思想理论的影响力，在范蠡去世后，逐渐被后世尊之为财神、商圣、商祖，许多生意人皆供奉他的塑像、画像。范蠡是范姓始祖范武子的玄孙，并被视为顺阳范氏之先祖。</p>Pixiv ID: 15231158</p>Member: SuperPig</p>技能: Jordan圣帝"]
                    ],
                    "hx_guoziyi": ["female", "wei", 4, ["hx_anzhi", "hx_zhechong"],
                        ["des:郭子仪（697年－781年），字子仪，华州郑县（今陕西渭南华州区）人。唐代中兴名将、政治家、军事家，寿州刺史郭敬之的儿子。出身太原郭氏。早年以武举高第入仕从军，积功至九原太守。安史之乱爆发，任朔方节度使，率军勤王，收复河北、河东，拜兵部尚书、同中书门下平章事。至德二年（757年），收复两京有功，加司徒、代国公。又进位中书令。乾元二年（759年），承担相州兵败之责，失去兵权，处于闲官。宝应元年（762年），平定河中兵变有功，进封汾阳郡王。广德元年（763年），仆固怀恩勾结吐蕃、回纥入侵，长安失陷。再度被启用，出任关内副元帅，收复长安。永泰元年（765年），吐蕃、回纥联兵入侵，在泾阳单骑说退回纥，并击溃吐蕃。大历十四年（779年），唐德宗即位后，尊为“尚父”，进位太尉兼中书令。唐建中二年（781年），病逝，获得赠太师，谥号“忠武”，配飨唐代宗庙廷，陪葬于建陵。</p>Pixiv ID: 3386610</p>Member: かがちさく</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_fujian": ["female", "qun", 4, ["hx_qingshi", "hx_renyuan"],
                        ["zhu", "des:苻坚（338年～385年10月16日），字永固，小字文玉，略阳临渭（今甘肃省秦安县）人，氐族。中国古代著名政治家、改革家，前秦帝国第三位国君。苻坚容颜瑰伟，雅量瑰姿。极度崇尚汉文化，初任龙骧将军，后封东海王。在位时期，先是诛杀暴君苻生，后励精图治，开凿泾水渠 ，重用王猛、邓羌、苻雅、杨安、朱肜、苻融等人，实行汉化改革，得以集权中央，国势大盛，史称“关陇清晏，百姓丰乐”，促进文教发展与民族融合，推动五胡汉化进程，对汉文化的延续有所贡献。心怀“混一六合，以济苍生”之志，广施仁政，打压豪强，减刑免租，抚恤鳏寡 ，从谏如流，毕生以消除民族矛盾为己任，各族百姓对苻坚十分地爱戴。随着国力日渐强盛，以军事力量消灭北方诸国，降服化外蛮夷，使饱受战乱的华北再度恢复生机，攻占东晋的川蜀、襄阳等地，形成南北对峙局面，又遣吕光征服西域诸国，开拓五胡疆域最辽阔的时期。在南征北战的过程中，苻坚未有一次屠城暴行。建元十九年，发动淝水之战，意图消灭东晋，结束乱世。最终败给东晋谢玄率领的北府兵，导致社会矛盾激化，陷入混乱局面。建元二十一年，为后秦主姚苌所害，临死前面不改色，姚苌逼迫其交出传国玉玺，苻坚言已将玉玺送晋国，誓死不让玉玺落入羌人之手，最终被姚苌缢死于新平寺，终年四十八岁。身后被三个国家共同追封谥号，尊上谥宣昭皇帝、文昭皇帝、壮烈天王，庙号世祖。后道教追封苻坚为神祇，逢瘟疫建祠避祸，称为苻家神，于每年正月初二以太牢祭祀。</p>Pixiv ID: 2552807</p>Member: IRIA</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_chenping": ["female", "shu", 3, ["hx_jieqi", "hx_taohui"],
                        ["des:陈平（？～前178年），汉族，阳武户牖乡（今河南原阳东南）人，西汉王朝开国功臣，《史记》称之为陈丞相。少时喜读书，有大志，曾为乡里分肉，甚均，父老赞之，他感慨地说：“使平得宰天下，亦如此肉矣！”秦二世元年（前209年）陈胜、吴广起义后，六国贵族也纷纷起兵，陈平往事魏王咎。不久受谗亡归项羽，随从入关破秦。刘邦还定三秦时，又间行降汉。拜为都尉，使参乘、典护军。后历任亚将、护军中尉。先后参加楚汉战争和平定异姓王侯叛乱诸役，成为汉高祖刘邦的重要谋士。刘邦困守荥阳时，陈平建议捐金数万斤，离间项羽群臣，使项羽的重要谋士范增忧愤病死。高帝六年（前201年）又建议刘邦伪游云梦，逮捕韩信。次年，刘邦为匈奴困于平城（今山西大同北部）七天七夜，后采纳陈平计策，重贿冒顿单于的阏氏，才得以解围。陈平因功先后受封为户牖侯和曲逆侯。汉高祖死后，吕后以陈平为郎中令，傅教惠帝。惠帝六年（前189），与王陵并为左、右丞相。王陵免相后陈平擢为右丞相，但因吕后大封诸吕为王，陈平被削夺实权。吕后死，陈平与太尉周勃合谋平定诸吕之乱，迎立代王为文帝（汉文帝）。文帝初，陈平让位周勃，徙为左丞相，因明于职守，受到文帝赞赏。不久周勃罢相，陈平专为丞相。孝文二年死。受封曲逆侯（今河北顺平东），死后谥献侯。</p>Pixiv ID: 5854395</p>Member: KiSei2_</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_yangsu": ["female", "qun", 4, ["hx_shouxun", "hx_lugong"],
                        ["des:杨素（544年—606年），字处道，弘农郡华阴县（今陕西省华阴市）人。隋朝军事家、权臣、诗人。杨素出身关中士族弘农杨氏。北周时期，起家中外府记室、礼部下大夫、大都督，累迁车骑大将军、仪同三司。参加灭北齐之役，并随上大将军王轨救援彭城，俘虏南陈主将吴明彻。后随上柱国韦孝宽攻取淮南，在此期间交好随国公杨坚，随其平乱，授大将军，改封清河郡公。隋朝建立后，升任御史大夫。开皇八年（588年），以信州总管率领水军统军灭亡陈朝，拜荆州总管，进封越国公，支持晋王杨广成为太子。杨广即位后，主持讨平汉王杨谅叛乱，拜尚书令、太师、司徒，再封楚公。大业二年（606年），杨素去世，享年六十三岁。获赠光禄大夫、太尉，谥号“景武”。杨素善于属文，工于草隶，有诗作传世。</p>Pixiv ID: 8872168</p>Member: 御崎悠</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_zhangquanyi": ["female", "qun", 3, ["hx_heliu", "hx_fuyi"],
                        ["des:张全义（852年－926年），初名居言，又名宗奭（朱温赐名），字国维。濮州临濮（今山东鄄城西南）人。唐末至五代时期将领。张全义出身田农之家，曾参与黄巢起义，被授为吏部尚书、充水运使。后投降河阳节度使诸葛爽，屡立战功，被表为泽州刺史，累授忠武军节度使、守中书令，封东平王。他生性勤俭，善抚军民，政绩卓著。历仕后梁、后唐二朝，累官守太尉、中书令、河南尹并兼领河阳节度使，封齐王。后唐同光四年（926年），张全义去世，年七十五。后册赠太师，谥号“忠肃”。</p>Pixiv ID: 703565</p>Member: ヘスン / HSN</p>技能: Jordan圣帝"]
                    ],
                    "hx_murongke": ["female", "qun", 4, ["hx_zhishi", "hx_xujin"],
                        ["des:慕容恪（？～367年），字玄恭，昌黎棘城（今辽宁省义县）人，鲜卑族。十六国时期前燕宗室大臣、政治家、战略家，文明帝慕容皝第四子，景昭帝慕容儁的弟弟。谨慎大度，谦恭仁和。十五岁开始掌握军队，多次以弱胜强，打败后赵和高句丽，稳固了慕容氏的辽东霸主的地位。面对石虎去世、中原大乱的时局，统兵入关，擒杀冉闵，攻城略地，将前燕辖境延伸到黄河以南地区。景昭帝慕容儁去世后，忠心辅佐幼主慕容暐，拜太宰，封太原王，行周公事。摄政期间，治国有方，威震邻邦。建熙八年（367年），慕容恪去世，谥号为桓。一生光明磊落、大义凛然，备受历朝历代推崇，尊为十六国第一名将。唐宋时期，配享武庙。</p>Pixiv ID: 16331597</p>Member: YOHAKU</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_xiexuan": ["female", "jin", 4, ["hx_huimao", "hx_bingzhu"],
                        ["des:谢玄（343年～388年），字幼度，陈郡阳夏（今河南省太康县）人。东晋名将、军事家。豫州刺史谢奕之子、太傅谢安的侄子。谢玄出身陈郡谢氏。有经国才略，善于治军，起家大司马桓温部将。太元二年（377年），为抵御前秦袭扰，担任建武将军、兖州刺史、广陵相，都督江北诸军事。招募北来民众中的骁勇之士，组建“北府兵”。太元四年（379年），率兵击败前秦进攻，进号冠军将军、徐州刺史。淝水之战中，出任前锋都督，先遣部将刘牢之率部夜袭洛涧，首战告捷。抓住战机，计诱前秦军后撤，乘势猛攻，取得以少胜多的巨大战果。太元九年（384年），乘胜开拓中原，先后收复了河南、山东、陕西南部等地区，因病改任左将军、会稽内史。太元十三年（388年），谢玄病逝，时年四十六岁，朝廷追赠车骑将军、开府仪同三司，谥号“献武”。</p>Pixiv ID: 23945843</p>Member: Sul</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_lianpo": ["female", "qun", "4/5", ["hx_yufen"],
                        ["des:廉颇（前327－前243），嬴姓，廉氏，名颇，籍贯有山西太原、山西运城、山东德州等说。封信平君，战国末期赵国之良将，与白起、王翦、李牧并称“战国四大名将”。曾战胜齐国、魏国、燕国。赵惠文王十六年（前283年），为将伐齐，大破之，取昔阳（今河北晋州西北）拜为上卿。赵孝成王时，曾以蔺相如位居己上，不服，欲辱之。相如屡谦让退避。他感悟，负荆请罪，两人遂为刎颈之交。秦、赵长平之役，赵初以其御秦，用坚壁固守之策，秦师劳而无功。后赵王中秦反间计，以赵括代之，卒遭惨败。赵孝成王十五年（前251），与乐乘率军大破燕军，杀燕将栗腹，燕割五城请和。以功封信平君，为假相国。赵悼襄王时，与乐乘不和，奔魏居大梁（今河南开封），魏不能用。赵以数困于秦，欲复用之，派使者请其出山，廉颇为显示自己大有可为，当着使者面吃下一斗米、十斤肉，并披甲跨马到处奔跑。但是使者已被郭开收买，使者回国后对赵王谎称廉颇“一饭三遗矢”（吃一顿饭的时间内，上了三次厕所）。赵王遂以为廉颇老而无用，便不复用。后入楚，卒于寿春（今安徽寿县）。南宋大词人辛弃疾说“廉颇老矣，尚能饭否？”以抒有志而不被赏识的感慨。唐德宗时将廉颇等历史上六十四位武功卓著的名将，供奉于武成王庙内，被称为武成王庙六十四将。宋徽宗时追尊廉颇为临城伯，位列宋武庙七十二将之一。</p>Pixiv ID: 74543317</p>Member: いろはら</p>技能: Jordan圣帝"]
                    ],
                    "hx_gaojiong": ["female", "qun", "3", ["hx_minglve", "hx_jianxin"],
                        ["des:高颎（541年—607年），隋朝著名宰相、军事谋臣。一名敏，字昭玄，鲜卑名独孤颎，渤海蓚（今河北景县东）人，隋朝杰出的政治家、战略家、军事家。高颎出身渤海高氏，其父高宾是上柱国独孤信的僚佐，官至刺史。杨坚为周静帝大丞相时，知道高颎精明强干，知兵事，多计谋，任命他为相府司录。相州总官尉迟迥起兵反叛，高颎请将兵平叛，自愿前往监军，命人在沁水上架桥，大破尉迟迥军。以功封柱国，升相府司马。隋文帝建立隋朝后，任尚书左仆射兼纳言，旋拜左卫大将军。隋文帝有统一南北之志，高颎推荐贺若弼、韩擒虎二将分别任吴州和庐州总管，作灭陈准备。隋开皇元年（581）九月，节度上柱国长孙览、元景山两路隋军攻陈。二年春，陈宣帝卒，陈遣使请和，遂班师。三年，率军与诸将分道击突厥。五年，任左领军大将军。七年，隋灭后梁，奉命赴江陵（今属湖北荆沙）安集其遗民，甚得人和。不久，向文帝献取陈方略。开皇八年（588年）隋朝以晋王杨广为元帅伐南陈，任元帅长史，指挥全军一举平南陈。后因反对废太子杨勇并得罪独孤皇后，遭隋文帝猜忌，被免官为民，不久后又免去齐国公爵位。隋炀帝时，被起用为太常卿。高颎善于识别和推荐人才，注意保护有功之臣。为人谦逊，不居功自傲。史称其有文武才略，明达世务。为相执政近二十年，竭诚尽职，功绩卓著。 大业三年（607年），见炀帝奢靡，甚为忧虑，有所议论，为人告发，与贺若弼同时被杀害，享年六十六岁。诸子遭到流放。</p>Pixiv ID: 13975259</p>Member: Danah</p>技能: Jordan圣帝"]
                    ],
                    "hx_zhugeliang": ["female", "shu", "3", ["hx_nangce", "hx_ruliao"],
                        ["des:诸葛亮（181年—234年10月8日），字孔明，号卧龙，琅琊阳都（今山东省沂南县）人，三国时期蜀汉丞相，中国古代杰出的政治家、军事家、文学家、发明家。诸葛亮早年随叔父诸葛玄到荆州，诸葛玄死后，诸葛亮就在隆中隐居。后刘备三顾茅庐请出诸葛亮，联合东吴孙权于赤壁之战大败曹军，形成三国鼎足之势，又夺占荆州。建安十九年（214年），攻取益州。继又击败曹军，夺得汉中。章武元年（221年），刘备在成都建立蜀汉政权，诸葛亮被任命为丞相，主持朝政。后主刘禅继位，诸葛亮被封为武乡侯，领益州牧。勤勉谨慎，大小政事必亲自处理，赏罚严明；与东吴联盟，改善和西南各族的关系；实行屯田政策，加强战备。前后五次北伐中原，多以粮尽无功。终因积劳成疾，于建兴十二年（234年）病逝于五丈原（今陕西省宝鸡市岐山境内），享年五十四岁。后主刘禅追谥为忠武侯，后世常以武侯尊称。东晋桓温追封为武兴王。诸葛亮散文代表作有《出师表》《诫子书》等。曾发明木牛流马、孔明灯等，并改造连弩，叫做诸葛连弩，可一弩十矢俱发。诸葛亮一生“鞠躬尽瘁、死而后已”，是中国传统文化中忠臣与智者的代表人物。</p>Pixiv ID: 8872168</p>Member: 御崎悠</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_yuchirong": ["female", "wei", 6, ["hx_jinxun", "hx_duozhen"],
                        ["des:尉迟敬德（585年－658年），本名尉迟融（《新唐书》作尉迟恭），字敬德，朔州鄯阳县人，祖籍太安狄那（今山西省寿阳县），鲜卑族。唐朝开国名将，“凌烟阁二十四功臣”之一。大业末年，参与平定高阳民乱，授朝散大夫。大业十三年（617年），跟随刘武周起兵，担任偏将。武德三年（620年），兵败归顺唐朝，赐名尉迟恭。跟随秦王李世民，参与唐初统一战争，平定王世充、窦建德、刘黑闼、徐圆朗，颇有功勋。武德九年（626年），参加玄武门之变，受封右武候大将军、吴国公。贞观十一年（637年），监修洛阳老君山，拜上柱国、鄂国公。贞观十七年（643年），授开府仪同三司，致仕还家，不问政务，名列“凌烟阁二十四功臣”第七名。贞观十九年（645年），跟随唐太宗李世民征讨高丽。唐高宗显庆三年（658年12月25日），去世，享年七十四岁，追赠司徒、并州都督，谥号忠武，陪葬于昭陵。后世与名将秦琼一起，成为受人尊崇的“门神”。</p>Pixiv ID: 2315745</p>Member: 天川さっこ</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_sunwu": ["female", "wu", 4, ["hx_qizheng", "hx_gaoyin"],
                        ["des:孙武（约前545年－约前470年），字长卿，春秋末期齐国乐安（今山东省北部）人。中国春秋时期著名的军事家、政治家，尊称兵圣或孙子（孙武子），又称“兵家至圣”，被誉为“百世兵家之师”、“东方兵学的鼻祖”。孙武大约活动于公元前六世纪末至前五世纪初，由齐至吴，经吴国重臣伍员（伍子胥）举荐，向吴王阖闾进呈所著兵法十三篇，受到重用为将。他在柏举之战率领吴国军队大败楚国军队，占领楚国都城郢城，几近覆亡楚国。其著有巨作《孙子兵法》十三篇，为后世兵法家所推崇，被誉为“兵学圣典”，置于《武经七书》之首。他撰著的《孙子兵法》在中国乃至世界军事史、军事学术史和哲学思想史上都占有极为重要的地位，并在政治、经济、军事、文化、哲学等领域被广泛运用。被译为日文、法文、德文、英文，该书成为国际间最著名的兵学典范之书。</p>Pixiv ID: 6208670</p>Member: えみゃコーラ</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_yuxin": ["female", "qun", 3, ["hx_jishuo", "hx_safu"],
                        ["des:庾信（513年－581年），字子山，小字兰成。南阳郡新野县（今河南省南阳市新野县）人。南北朝时期文学家。其家“七世举秀才”、“五代有文集”，父亲庾肩吾为南梁中书令，亦以文才闻名。庾信“幼而俊迈，聪敏绝伦”，自幼随父出入于萧纲的宫廷，后来又与徐陵一起任萧纲的东宫学士，成为宫体文学的代表作家，其文学风格被称为“徐庾体”。累官右卫将军，封武康县侯。侯景之乱时，庾信逃往江陵。后奉命出使西魏，因梁为西魏所灭，遂留居北方，官至车骑大将军、开府仪同三司。北周代魏后，更迁骠骑大将军、开府仪同三司，封临清县子，世称其为“庾开府”。时陈朝与北周通好，流寓人士，并许归还故国，唯有庾信与王褒不得回南方。庾信在北方，一方面身居显贵，被尊为文坛宗师，受皇帝礼遇，与诸王结布衣之交，一方面又深切思念故国乡土，为自己身仕敌国而羞愧，因不得自由而怨愤。最终在隋文帝开皇元年（581年）老死北方，年六十九。有《庾子山集》传世，明人张溥辑有《庾开府集》。庾信是由南入北的最著名的诗人，他饱尝分裂时代特有的人生辛酸，却结出“穷南北之胜”的文学硕果。他的文学成就，也昭示着南北文风融合的前景。</p>Pixiv ID: 23945843</p>Member: Sul</p>技能: Jordan圣帝"]
                    ],
                    "hx_sudingfang": ["female", "wei", 4, ["hx_jingyu"],
                        ["des:苏定方（592年/600年－667年），名烈，字定方，以字行于世。冀州武邑县（今河北武邑县）人，唐朝初年名将。苏定方少年时便以骁勇善战及气魄惊人闻名，曾随父征讨叛贼，安定乡里。隋朝大业末年，他投奔窦建德、刘黑闼领导的河北义军，屡建战功。直至唐太宗在位时，苏定方才开始为唐朝效力，并随李靖北伐东突厥，在具有决定性意义的夜袭阴山一役中，苏定方率两百名骑兵先登陷阵，攻破了颉利可汗的牙帐，为击灭东突厥立下大功。显庆二年（657年），累功升任行军大总管，开始独当一面，并以其非凡战绩和正直为人深受唐高宗的赏识与信任，多次被委以重任。苏定方征西突厥、平葱岭、夷百济、伐高丽，“前后灭三国，皆生擒其主”，史无前例地将唐朝的版图向西开拓至中亚咸海，国境直抵波斯，向东延伸至朝鲜半岛南部。此后，苏定方历任左骁卫大将军、左武卫大将军，封邢国公。晚年受命担任安集大使，全面负责对吐蕃的军事防御。乾封二年（667年），苏定方去世，年七十六（一作六十七）。册赠左骁卫大将军、幽州都督，谥号“庄”。</p>Pixiv ID: 24218478</p>Member: ￦ANKE</p>技能: Jordan圣帝"]
                    ],
                    "hx_yaoguangxiao": ["female", "wu", 3, ["hx_qudi", "hx_xueci"],
                        ["des:姚广孝（1335年－1418年），幼名天僖，法名道衍，字斯道，又字独闇，号独庵老人、逃虚子。长洲（今江苏苏州）人。明朝政治家、佛学家，文学家，靖难之役的主要策划者，中国历史上最著名的黑衣宰相。姚广孝年轻时在苏州妙智庵出家为僧，精通三教，与明初儒释道各家学术领袖都有不错的关系。洪武十五年，被明太祖挑选，以“臣奉白帽著王”结识燕王朱棣，主持庆寿寺，成为朱棣的主要谋士。朱棣靖难第三年，姚广孝留守北平，建议朱棣轻骑挺进，径取南京，使得朱棣顺利夺取南京，登基称帝。以区区燕地一方土地敌全国兵马，且最终获胜，历史上绝无仅有。成祖继位后，姚广孝担任僧录司左善世，又加太子少师，被称为“黑衣宰相”。负责迁都事宜，一手规划今日北京城布局。而后在解缙编书失败后又担任了《永乐大典》和《明太祖实录》的最高编撰官，尤其是《永乐大典》，这是他在中国文化历史上的最大贡献。少师晚年，在明初期佛教渐成颓势之际，又担起护教（佛教）之责，整理了反排佛的《道余录》，为佛教史上一件大事。永乐十六年（1418年），病逝庆寿寺，追赠荣国公，谥号恭靖。皇帝亲自撰写神道碑铭，并以文臣身份入明祖庙，是明代第一人，也是唯一一人。</p>Pixiv ID: 6998474</p>Member: ASO</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_quyuan": ["female", "shu", 3, ["hx_tianwen", "hx_yundao"],
                        ["des:屈原（约前343年－约前278年6月6日），芈姓，屈氏，名平，字原，楚国人（今湖北省秭归县，一说湖北荆州纪南），自称是古帝高阳氏的后裔，其先祖屈瑕受楚武王封于屈地，因以屈为氏。官拜左徒，为楚王近臣。屈原早年受楚怀王信任，且有楚国第一诗人的美称，任三闾大夫，常与楚怀王商议国事，主张楚国齐国联合，共同抗衡秦国，多次反对楚怀王与秦国交好的举动。在秦昭王扣留楚怀王之后，屈原继续辅佐楚顷襄王。楚顷襄王六年（前293年）楚顷襄王谋划再与秦国讲和。屈原斥责楚顷襄王和子兰，楚顷襄王大怒，上官大夫短屈原于顷襄王，屈原因此被驱除出楚国都郢都，被流放于更偏远的江南地区。历时十八年。然而，正是因为被流放，使得屈原广泛地接触了底层的人民群众，也接触了丰富生动的楚国民间文化，留下了千古绝唱《离骚》。楚顷襄王二十一年（前278年）秦武安君白起率军攻破郢都，楚顷襄王被迫迁都。屈原虽日夜思念郢都，却因被放逐而不能回朝效力祖国而十分痛苦和悲伤，从行至长江边，作《怀沙》一赋。怀抱一石，投入汨罗江而死。后世端午节吃粽子即是为纪念屈原。屈原是中国历史上一位伟大的爱国诗人，中国浪漫主义文学的奠基人，“楚辞”的创立者和代表作家，开辟了“香草美人”的传统，被誉为“楚辞之祖”，楚国有名的辞赋家宋玉、唐勒、景差都受到屈原的影响。屈原作品的出现，标志着中国诗歌进入了一个由大雅歌唱到浪漫独创的新时代，其主要作品有《离骚》《九歌》《九章》《天问》等。</p>Pixiv ID: 6028892</p>Member: maca</p>技能: Jordan圣帝"]
                    ],
                    "hx_zhouyu": ["female", "wu", 4, ["hx_shilie"],
                        ["des:周瑜（175年－210年），字公瑾，人称“周郎”，庐江舒县（今安徽省舒城县）人，东汉末年孙权阵营重要的统帅，也是杰出优秀的军事家、战术家、战略家、政治家。建安十三年（208年），曹操率军南征，孙曹两军在赤壁交战，曹操军因有疾病，又不习水性，初战便败退，曹操引军至江北。周瑜便与刘备军在南岸设营，相方对峙。周瑜部将黄盖建议用火计将曹军打败，周瑜认为可行，命黄盖诈降。曹操果然中计，船舰全被烧毁，曹操北还南郡。此战是中国史上著名以少胜多的战役，直接决定三国时代魏蜀吴三国鼎足而立。战后两年，他在准备征伐益州途中身染重病，不久于巴丘病逝，年仅三十六岁。与鲁肃、吕蒙和陆逊合称四大都督。周瑜为人相貌俊美、魁梧壮硕、天资聪颖、胸襟宽阔、精熟音律，酒过三巡仍能听出宴席间的音误，故而传言“曲有误，周郎顾”，并深得主上孙策、孙权礼遇器重、提拔重用，妻子小乔在江东亦称国色，是不少人羡慕追思的英雄形象，也有不少古代诗词表达了对周瑜的赞美和钦佩，其中最著名篇章如北宋大文豪苏轼的《念奴娇·赤壁怀古》。</p>Pixiv ID: 2345928</p>Member: EB十</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_wuqi": ["female", "wei", 3, ["hx_zhifeng", "hx_huazhen"],
                        ["des:吴起（前440年－前381年），中国春秋末期战国初期军事家、政治家、改革家，兵家代表人物。卫国左氏（今山东省定陶县，一说山东省曹县东北）人。吴起历侍鲁、魏、楚三国，通晓兵家、法家、儒家三家思想，在内政、军事上都有极高的成就。仕鲁时曾击退齐国的入侵；仕魏时屡次破秦，尽取秦国的河西地区（今山西、陕西两省间黄河南段以西地区），成就魏文侯的霸业；仕楚时主持改革，史称吴起变法。但吴起的变法损害了楚国贵族的利益，他本人也遭到了旧势力的报复。前381年，楚悼王去世后，楚国贵族发动兵变杀害吴起。吴起著有《吴子兵法》一书，由于他在军事理论上的贡献，后人将孙武、吴起并称为“孙吴”。唐肃宗时将吴起等历史上十位武功卓著的名将供奉于武成王庙内，被称为武庙十哲。宋徽宗时追尊吴起为广宗伯，位列宋武庙七十二将之一。司马迁著《史记》时，将孙武和吴起合立于《孙子吴起列传》。现代学者马非百著《秦集史》时，将李悝和吴起合立于列传中。</p>Pixiv ID: 2993192</p>Member: Rosuuri</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_simaqian": ["female", "shu", 3, ["hx_genggu", "hx_hanqing"],
                        ["des:司马迁（前145年或前135年～不可考），字子长，生于龙门（西汉夏阳、即今陕西省韩城市，另说今山西省河津市），西汉史学家、散文家。司马谈之子，任太史令，被后世尊称为史迁、太史公、历史之父。司马迁早年受学于孔安国、董仲舒，漫游各地，了解风俗，采集传闻。初任郎中，奉使西南。二十八岁任太史令，继承父业，著述历史。后因替李陵败降之事辩解而受宫刑，调任中书令，发奋继续完成所著史籍。他以“究天人之际，通古今之变，成一家之言”的史识创作了中国第一部纪传体通史《史记》（原名《太史公书》），被公认为是中国史书的典范。该书记载了从上古传说中的黄帝时期，到汉武帝太初四年，长达3000多年的历史，是“二十四史”之首，被鲁迅誉为“史家之绝唱，无韵之离骚”。</p>Pixiv ID: 275151</p>Member: おちゃう</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_sunbin": ["female", "qun", 3, ["hx_binzu", "hx_jianzao", "hx_weijiu"],
                        ["des:孙膑（前382年－前316年），或说号伯灵，因受过膑刑，故世人习称“孙膑”。是活跃于战国中期的军事家，兵家代表人物。孙膑出生于阿、鄄之间（今山东省阳谷县阿城镇、菏泽市鄄城县北一带），是孙武的后代。孙膑曾与庞涓为同窗，因受庞涓迫害遭受膑刑，身体残疾，后在齐国使者的帮助下投奔齐国，被齐威王任命为军师，辅佐齐国大将田忌两次击败庞涓，取得桂陵之战和马陵之战的胜利，奠定齐国的霸业。明末清初有以孙膑、庞涓生平为原型的历史小说《孙庞斗志演义》，使孙庞斗智的故事广为流传。唐德宗时将孙膑等历史上六十四位武功卓著的名将供奉于武成王庙内，被称为武成王庙六十四将。宋徽宗时追尊孙膑为武清伯，位列宋武庙七十二将之一。</p>Pixiv ID: 5130774</p>Member: SWAV</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_yangzaixing": ["female", "wu", 5, ["hx_youzhan"],
                        ["des:杨再兴（？－1140年），相州汤阴（今河南省安阳市汤阴县）人，南宋将领，官至武经郎、湖北京西宣抚司第四副将。早年隶武功大夫、荣州团练使、知郢州曹成麾下。宋高宗绍兴元年（1131年）十一月，朝廷命令叛服不定的曹成率部前往行在临安，而曹成拒不从命。二年（1132年）正月，朝廷以亲卫大夫、建州观察使、神武副军都统制岳飞权知潭州、权荆湖东路安抚使、马步军都总管，镇压号称湖东名贼的曹成。杨再兴率众劫营，砍伤神武副军第五将正将韩顺夫，致其伤重而死；又与随后赶到的神武副军前军统制张宪、后军统制王经激战，杀死岳飞之弟岳翻。曹成战败之后，杨再兴被张宪生擒，俯首请降。岳飞不计杀弟之仇，释杨再兴之缚，留用为将。绍兴十年（1139年）五月，金国太保、都元帅、领行台尚书省事完颜宗弼撕毁和议，分兵南侵。六月，少保、武胜、定国军节度使、湖北、京西路宣抚使、兼河南、北诸路招讨使、兼营田大使、武昌郡开国公、食邑四千七百户，食实封二千户岳飞违诏出师。七月，完颜兀术得知岳飞本阵驻扎郾城，亲率一万五千骑前来决战，杨再兴在战斗中意图生擒完颜兀术，单骑冲阵，被金军重重包围，力战斩杀数百人，突围而出。郾城之战后，完颜兀术屯驻临颍，意图继续与岳飞决战。杨再兴率三百轻骑到郾城北小商桥和金兵遭遇，被几十倍的金军主力包围，杀敌二千余人，被乱箭射中，英勇战死，而杨再兴所中之箭，仅箭簇就重达二升。朝廷追赠七官。</p>Pixiv ID: 81061650</p>Member: A_maru</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_jiaxu": ["female", "wei", 3, ["hx_zhenji", "hx_zeshi"],
                        ["des:贾诩（147年－223年8月11日），字文和，武威郡姑臧县（今甘肃武威市）人。汉末三国时期曹魏开国功臣、军事战略家，轻骑将军贾龚之子。举孝廉出身，起家郎官。进入武威郡守张奂账下，成为军司马董卓部将。董卓死后，先后依附于李傕、郭汜、段煨、张绣，两次献计打败曹操，跟随张绣归降曹操。官渡之战时，力主决战。赤壁之战前，主张安抚百姓，反对劳师动众讨江东，没有得到采纳。曹操与关中联军相持渭南时，献上离间计瓦解马超、韩遂，一举平定关中。在曹操继承人的确定上，以袁绍、刘表为例，暗示曹操不可废长立幼，支持曹丕成为世子。黄初元年（220年），曹丕称帝后，拜太尉，册封寿乡侯。反对曹丕征吴，没有得到采纳，无功而返。黄初四年（223年），贾诩去世，享年七十七岁，谥号为肃，配享魏文帝庙庭。《唐会要》尊其为魏晋八君子之首。精通兵法，著有《钞孙子兵法》一卷，并为《吴起兵法》校注。</p>Pixiv ID: 33778959</p>Member: Hinaki</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_xueandu": ["female", "shu", 4, ["hx_tingfen", "hx_paomou"],
                        ["des:薛安都（410年～469年），字休达，河东郡汾阴县（今山西省万荣县）人，南北朝时期刘宋、北魏名将。薛安都出身河东薛氏，骁勇善战。初仕北魏，屡建军功，授雍秦二州都统。与同族薛永宗起兵反魏，失败投奔刘宋，授扬武将军、北弘农太守。元嘉北伐时，随柳元景攻击陕城，北魏洛州刺史张是连提率兵救援，薛安都在城南与魏军交战。魏军派突骑出击，宋军抵挡不住。薛安都大怒，摘下头盔，解开盔甲，只穿一件两当衫，怒目横矛，单马冲阵，如此冲杀四次，杀敌无数。次日，薛安都又在城西南列阵，与曾方平、柳元怙共击魏军，从早上一直战到太阳偏西，鲜血把肘部都凝固住了，所用长矛也折断了，终于击溃魏军，斩杀张是连提。不久，宋军攻克陕城，但受累于东线、中线的兵败，全军退回。参与平定刘劭、刘义宣、臧质、鲁爽等人的叛乱。前废帝刘子业在位时期，出任平北将军、徐州刺史。宋明帝刘彧在位时期，起兵参与刘子勋之乱。后来，因怀疑宋明帝追究前罪，投靠北魏，并与孔伯恭追破刘宋军队。授镇南大将军、徐州刺史、河东郡公。北魏皇兴三年（公元469年），薛安都去世，享年六十岁，追赠河东郡王，谥号为康。</p>Pixiv ID: 65193641</p>Member: ふーろ</p>技能: 陈恭杜弼的区别"]
                    ],
                    "hx_qixiaobai": ["female", "qun", 4, ["hx_hemeng", "hx_zhuoneng"],
                        ["zhu", "des:齐桓公（？－前643年10月7日），春秋时代齐国第十五位国君，姜姓，齐氏（其祖先原为吕氏），名小白，齐僖公的儿子、齐襄公的弟弟。春秋五霸之首。齐襄公和公孙无知相继死于内乱后，小白与公子纠争位成功，即国君位为齐桓公。桓公任管仲为相，推行改革，实行军政合一、兵民合一的制度，齐国逐渐强盛。桓公于前679年在甄（今山东鄄城）召集宋、陈等四国诸侯会盟，齐桓公是历史上第一个充当盟主的诸侯。当时中原华夏各诸侯苦于戎狄等部落的攻击，于是管仲提出“尊王攘夷”的旗号，北击山戎，南伐楚国，桓公成为中原霸主，受到周天子赏赐。桓公晚年昏庸，信用易牙、竖刁等小人，病死后齐国陷入内乱。</p>Pixiv ID: 52253072</p>Member: アバンドン蘭花</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_zhouyafu": ["female", "shu", 4, ["hx_taluan", "hx_jingzhai"],
                        ["des:周亚夫（？～前143年），沛郡丰县（今江苏省徐州市丰县）人。西汉时期名将、丞相，太尉周勃的次子。汉文帝时，任河内守，封条侯。文帝后元六年（前158）任将军，驻军细柳营（今陕西咸阳西南），防备匈奴。治军严谨，迁中尉。文帝临死时嘱咐太子，如即有缓急，周亚夫可任将兵。及汉景帝即位，为车骑将军。景帝前元三年（前154），以太尉身份率军平定吴楚七国之乱。五年后，迁丞相。后因谏废栗太子刘荣等诸事触犯景帝，梁孝王又数言其短，致遭猜忌。后元元年（前143），其子被人告发盗买官器。因受牵连，召诣廷尉，绝食五日，呕血而死。</p>Pixiv ID: 135302</p>Member: ゆきさめ</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_zongze": ["female", "wu", 3, ["hx_yilv", "hx_zhengshi"],
                        ["des:宗泽（1060年1月20日—1128年7月29日），字汝霖，汉族，浙东乌伤（今浙江省义乌市）人，宋朝名将。是北宋、南宋之交在抗金斗争中涌现出来的杰出政治家、军事家，我国历史上著名的民族英雄。元祐六年（1091年）进士。元祐八年（1093年），任大名府馆陶县县尉。任满，先后在衢州龙游、莱州胶水、晋州赵城、莱州掖县担任县令。政和五年（1115年），升登州通判。宣和元年（1119年），因事被贬提举鸿庆宫，遂上表引退。靖康元年（1126年），临危受命，出任磁州知州。宗泽为人刚直豪爽，沉毅知兵。到任后，积极修复城墙，整治兵器，招募义兵，广集粮饷。不久，受封河北义兵都总管，率军击退来犯的金兵。同年11月，金兵再次包围开封，钦宗任康王赵构为兵马大元帅，宗泽为副帅。宗泽率军趋李固渡，途中遇敌，大破之。次年正月，率军至开德，与敌十三战皆胜。建炎元年（1127年）六月，任东京留守，知开封府，招集王善、杨进等义军协助防守，又联络两河“八字军”等部协同抗金，并任用岳飞等人为将，屡败金兵。金人畏惮宗泽，都称他为“宗爷爷”。宗泽在任东京留守期间，曾二十多次上书高宗赵构，力主还都东京，并制定了收复中原的方略，均未被采纳。他因壮志难酬，忧愤成疾，临终三呼“过河”而卒。死后追赠观文殿学士、通议大夫，谥号忠简。著有《宗忠简公集》传世。</p>Pixiv ID: 9212166</p>Member: ふわり</p>技能: Jordan圣帝"]
                    ],
                    "hx_fengdao": ["female", "qun", 3, ["hx_zhengshi1", "hx_anjian"],
                        ["des:冯道（882年－954年4月），字可道，号长乐老，瀛州景城（今河北泊头市交河镇）人。生于唐僖宗中和二年（882年），卒于后周显德元年（954年）。五代时期政治家、大规模官刻儒家经籍的创始人。历事五朝、八姓（八个家族）、十一帝，“累朝不离将相、三公、三师之位”，前后为官四十多年，堪称中国官场史上的不倒翁。冯道早年曾效力于燕王刘守光，历仕后唐、后晋、后汉、后周四朝，先后效力于后唐庄宗、后唐明宗、后唐闵帝、后唐末帝、后晋高祖、后晋出帝、后汉高祖、后汉隐帝、后周太祖、后周世宗十位皇帝，期间还向辽太宗称臣，始终担任将相、三公、三师之位。后周显德元年（954年）四月，冯道病逝，追封瀛王，谥号文懿。后世史学家出于忠君观念，对他非常不齿，欧阳修骂他“不知廉耻”，司马光更斥其为“奸臣之尤”。但他在事亲济民、提携贤良，在五代时期却有“当世之士无贤愚，皆仰道为元老，而喜为之称誉”的声望。</p>Pixiv ID: 3302692</p>Member: 遠坂あさぎ</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_lishiji": ["female", "wei", 4, ["hx_yingshi", "hx_yijin"],
                        ["des:李世𪟝（594年－669年12月31日），原名徐世𪟝，或作世绩，字懋功，亦作茂功。唐高祖李渊赐其姓李，后避唐太宗李世民讳改名为李𪟝。曹州离狐（今山东菏泽东明县东南）人，唐初名将，曾破东突厥、高句丽，与李靖并称。历事唐高祖、唐太宗、唐高宗三朝，深得朝廷信任和重任，朝廷倚之为长城。徐世𪟝出身富户，大业七年（611年）17岁时正值隋末农民起事，跟随翟让参加瓦岗军。李密王世充决战后，随李密归降唐朝，守黎阳，被唐高祖诏授黎阳总管，李密在黎阳起事，徐世𪟝献黎阳投降，请求收葬李密的尸首，得到李渊的允许。后跟随秦王李世民先后讨伐刘武周、王世充、窦建德、刘黑闼和徐圆朗等割据势力。入唐后，唐高祖李渊说徐世𪟝是“纯臣”，赐他姓李。先封曹国公，后封英国公。贞观年间，曾参与平定东突厥、薛延陀、高句丽的战役。总章元年（668年），李𪟝率兵至鸭绿江，与薛仁贵会于平壤，攻克平壤，大胜而归。总章二年（669年）十二月初三戊申日，李𪟝卒，享年七十六岁，唐高宗辍朝七日，赠李𪟝太尉、扬州大都督，谥号贞武，陪葬昭陵。因后来其孙徐敬业反对武则天，发动起事，被族诛，李𪟝也被剖棺戮尸。到后来唐中宗以神龙之变复辟之后才平反昭雪，以礼改葬。</p>Pixiv ID: 61304477</p>Member: Guchico</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_zhudi": ["female", "wu", 4, ["hx_qulie", "hx_jingnan", "hx_shengwei"],
                        ["zhu", "des:明成祖朱棣（1360年5月2日－1424年8月12日），或称永乐帝，明朝第三代皇帝，公元1402年至1424年在位，在位二十二年，年号永乐。这段时间称为永乐盛世。明太祖朱元璋皇四子，安徽凤阳人，生于应天府（今江苏南京），时事征伐，并受封为燕王。洪武三十二年或建文元年（1399年）建文帝削藩，燕王遂发动靖难之役，起兵夺位，经过三年的战争，最终胜利，驱逐其侄建文帝夺权篡位称帝。明成祖在位期间，改善明朝政治制度，发展经济，开拓疆域，迁都北京，使北京自此成为中国的政治中心至今。此外他编修《永乐大典》，派遣郑和下西洋，北征蒙古，南平安南。明成祖的统治时期被称为永乐盛世，明成祖也被后世称为“永乐大帝”。另外，他加强太祖以来的专制统治，强化锦衣卫并成立东厂，残酷镇压忠于建文帝的大臣，此外，他在位期间不顾祖制重用宦官，也促成明朝中叶后宦官专政的祸根。明成祖于1424年病重驾崩在榆木川，后谥号“体天弘道高明广运圣武神功纯仁至孝文皇帝”，原始庙号为“太宗”，葬于天寿山长陵。嘉靖十七年（1538）九月，嘉靖帝发动“大礼议事件”改谥为“启天弘道高明肇运圣武神功纯仁至孝文皇帝”，改上庙号为“成祖”。</p>Pixiv ID: 7775076</p>Member: A_maru</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_hanqinhu": ["female", "qun", 4, ["hx_xiaodou"],
                        ["des:韩擒虎（538年－592年12月26日），字子通，河南郡东垣县（今河南新安县）人。隋初开国功臣之一。唐朝皇室祖先有李虎，故唐人为了避讳，时称其为韩擒或韩擒豹。韩擒虎身材魁梧，容貌雄杰，性情豪迈，勇而有谋。自幼博览群书，经史百家皆略知大旨。韩擒虎在北齐历任河长防主、大都督、车骑大将军、开府仪同三司、白超防主，转任洪超防主。北周太祖赏识之，初仕北周，任新安太守，袭爵新义郡公，以军功升至上仪同。隋文帝时，经高颎推荐，为庐州总管。开皇八年（陈后主祯明二年、588年）十一月隋大举伐陈，擒虎以精兵五百，横江夜渡彩石，正月初七攻下姑孰（今安徽当涂），生擒樊巡，散骑常侍皋文奏大败逃回建康，接着擒虎向金陵进军。同日贺若弼攻克锺山（建康城东），杨广派总管杜彦跟韩擒虎会师，驻扎新林（今江苏省江宁县西），任忠前往石子冈（今江宁县南）迎降，直入朱雀门，沿途陈军大溃，擒虎纵兵在金陵四处劫掠，至殿中不见陈后主，后于华林园内景阳楼畔的井下生俘之，贺若弼把陈叔宝囚禁在德教殿。贺若弼后来与韩擒虎争功，闹得不可开交。擒虎后来进位上柱国，出为凉州总管。开皇十二年（592年），有人来朝拜他，说韩擒虎死后将成为阎罗王。韩擒虎评论此事：“生为上柱国，死做阎罗王，斯亦足矣。”随即病死。但民间认为韩擒虎是目连尊者部下的判官韩王。</p>Pixiv ID: 40689671</p>Member: Tuda6</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_xinqiji": ["female", "wu", 3, ["hx_mogu", "hx_kongchou"],
                        ["des:辛弃疾（1140年5月28日—1207年10月3日），原字坦夫，后改字幼安，中年后别号稼轩，山东东路济南府历城县（今山东省济南市历城区）人。南宋官员、将领、文学家，豪放派词人，有“词中之龙”之称。与苏轼合称“苏辛”，与李清照并称“济南二安”。出生时山东已为金人所占，早年与党怀英齐名北方，号称“辛党”。青年时参与耿京起义，擒杀叛徒张安国，回归南宋，献《美芹十论》《九议》等，条陈战守之策。先后在江西、湖南、福建等地为守臣，平定荆南茶商赖文政起事，又力排众议，创制飞虎军，以稳定湖湘地区。由于他与当政的主和派政见不合，故而屡遭劾奏，数次起落，最终退隐山居。开禧北伐前后，宰臣韩侂胄接连起用辛弃疾知绍兴、镇江二府，并征他入朝任枢密都承旨等官，均遭辞免。开禧三年（1207年），辛弃疾抱憾病逝，享年六十八岁。宋恭帝时获赠少师，谥号“忠敏”。辛弃疾一生以恢复为志，以功业自许，却命运多舛，壮志难酬。但他始终没有动摇恢复中原的信念，而是把满腔激情和对国家兴亡、民族命运的关切、忧虑，全部寄寓于词作之中。其词艺术风格多样，以豪放为主，风格沉雄豪迈又不乏细腻柔媚之处，题材广阔又善化用典故入词，抒写力图恢复国家统一的爱国热情，倾诉壮志难酬的悲愤，对当时执政者的屈辱求和颇多谴责，也有不少吟咏祖国河山的作品。现存词六百多首，有《稼轩长短句》等传世。</p>Pixiv ID: 12729776</p>Member: 禾月</p>技能: Jordan圣帝"]
                    ],
                    "hx_liguangbi": ["female", "wei", 4, ["hx_junzheng", "hx_mouzhan"],
                        ["des:李光弼（708年－764年8月15日），营州柳城（今辽宁省朝阳市）人，契丹族。唐朝中期名将，左羽林大将军李楷洛第四子。李光弼出身“柳城李氏”，初任左卫亲府左郎将，袭封蓟郡公。天宝十五载（756年），经郭子仪推荐而被任为河东节度副使，东出井陉，参与平定安史叛军。他在常山、嘉山大破叛军，又成功守卫太原，遏止其攻势。乾元元年（758年），奉命与八节度合兵讨伐安庆绪，初战获捷，次年兵败安阳，全军而归。同年接任天下兵马副元帅、朔方节度使，指挥河阳之战，挫败史思明南下的企图。上元二年（761年），再攻洛阳无功，改以河南副元帅、太尉兼侍中出镇临淮，震慑诸将。宝应元年（762年），又命军镇压浙东袁晁起义，以功进封临淮郡王。安史之乱平定后，李光弼“战功推为中兴第一”，获赐铁券，名藏太庙，绘像凌烟阁。晚年为宦官程元振、鱼朝恩等所谗，拥兵不朝，声名受损，因此愧恨成疾，最终于广德二年（764年）在徐州病逝，享年五十七岁。获赠司空、太保，谥号“武穆”，世称“李临淮”“李武穆”。李光弼足智多谋，治军威严而有方，善于出奇制胜，以少胜多，与郭子仪齐名，世称“李郭”，被誉为“自艰难已来，唯光弼行军治戎，沉毅有筹略，将帅中第一”。著有《将律》《统军灵辖秘策》及《李临淮武记》，今已佚。《全唐文》录有其文。</p>Pixiv ID: 26218840</p>Member: 山羊座的友人</p>技能: Jordan圣帝"]
                    ],
                    "hx_yangjian": ["female", "qun", 4, ["hx_zhengge", "hx_huntong"],
                        ["zhu", "des:隋文帝杨坚（541年7月21日 —604年8月13日），弘农郡华阴（今陕西省华阴市）人。汉太尉杨震十四世孙，隋朝开国皇帝，开皇元年（581年）至仁寿四年（604年）在位。小字那罗延，鲜卑姓普六茹，杨坚掌权后恢复杨氏。其父杨忠是西魏和北周的军事贵族，北周武帝时封为随国公，杨坚承袭父爵。北周宣帝继位，以杨坚为上柱国、大司马，位望日隆。北周大定元年（581年），杨坚受北周静帝禅让为帝，改元开皇。隋文帝即位后，在政治、经济等制度方面进行了一系列的改革。修定刑律和制度，使适合于南北统一后的中国。在中央实行三省六部制，将地方的州、郡、县三级制改为州、县两级制，由此巩固了中央集权。多次减税，减轻人民负担，促进国家农业生产，稳定经济发展。开皇九年（589年），派晋王杨广南下平陈，统一南北。隋文帝对周边各族，采取了军事上的防御和政治上的招抚政策，有效地处理了民族矛盾，被北方少数民族尊称为“圣人可汗”。开皇年间，隋朝疆域辽阔，人口达到700余万户。隋文帝在位的二十四年间，锐意改革、政绩卓著。但是在位晚期逐渐多疑，杀害功臣，并且听信文献皇后之言，废黜太子杨勇立晋王杨广为太子，埋下了亡国的祸根。仁寿四年（604年），在仁寿宫离奇去世。享年六十四岁，庙号高祖，谥号文皇帝，葬于泰陵。</p>Pixiv ID: 8872168</p>Member: 御崎悠</p>技能: Jordan圣帝"]
                    ],
                    "hx_zhuwen": ["female", "qun", 5, ["hx_yinbao", "hx_sizhan"],
                        ["des:梁太祖朱温（852年12月5日～912年7月18日），开平元年（907年）到乾化二年（912年）在位。宋州砀山（今安徽省砀山县）人，后梁开国皇帝，唐僖宗赐名“朱全忠”，即位后改名朱晃。乾符二年（875年），参加王仙芝、黄巢领导的农民起义军，先后攻陷洛阳、长安等地，大大动摇了唐王朝的统治地位。中和二年（882年），归附唐军王重荣、杨复光部，与李克用等联合镇压黄巢军。因镇压黄巢军有功，被唐僖宗赐名“全忠”，任河南中行营招讨副使。次年拜汴州刺史出宣武军节度使，继而又进封梁王。他以河南为中心，极力扩大势力，逐渐成了唐末最大的割据势力。唐昭宗天复元年（901年），朱温率军进入关中，控制了唐王朝的中央政权。天祐元年（904年），用武力把唐昭宗逼迁洛阳，不久将昭宗杀死。立昭宗儿子李柷为帝，即唐哀帝（又称昭宣帝）。天祐四年（907年），朱温通过禅让的形式夺取了唐哀帝的帝位，代唐称帝，建国号梁，改年号为开平，史称“后梁”。乾化二年（912年），朱温因继立问题，被亲子朱友珪弑杀。朱温在位六年，享年六十一岁，上谥号神武元圣孝皇帝，庙号太祖。同年十一月下葬宣陵。</p>Pixiv ID: 38847253</p>Member: Xeonomi</p>技能: Jordan圣帝"]
                    ],
                    "hx_zhaopu": ["female", "wu", 3, ["hx_dubang", "hx_fudeng", "hx_jiewei"],
                        ["des:赵普（922年－992年8月18日），字则平。幽州蓟县人，后徙居河南洛阳。五代至北宋初年著名政治家，北宋开国功臣。赵普早年曾被后周永兴节度使刘词辟为从事，后成为后周大将赵匡胤（宋太祖）的幕僚。显德七年（960年），策划发动陈桥兵变，帮助赵匡胤推翻后周，建立宋朝。乾德二年（964年），升为门下侍郎、平章事、集贤殿大学士，独相十年。在此期间，赵普协助赵匡胤进行削夺藩镇、罢禁军宿将兵权，实行更戍法、改革官制、制定守边防辽等重大措施。开宝六年（973年）罢相，出镇河阳三城。宋太宗即位后又分别于太平兴国六年（979年）、端拱元年（988年）两度拜相，其间主导策划秦王赵廷美谋反案，打压赵廷美与兵部尚书卢多逊。晚年因病多次请求致仕，累授西京留守、河南尹兼太师、中书令，封魏国公。淳化三年（992年），赵普于洛阳病逝，享年七十一岁。太宗亲撰八分字神道碑赐之。累赠尚书令、韩王，谥号“忠献”，并配飨宋太祖庙庭。宋理宗时为昭勋阁二十四功臣之一。赵普虽读书少，但喜观《论语》。其“半部《论语》治天下”之说对后世很有影响，成为以儒学治国的名言。他为人刚毅果断，为宋初的统治巩固作出了重大贡献。</p>Pixiv ID: 35907</p>Member: 卵の黄身</p>技能: Jordan圣帝"]
                    ],
                    "hx_sanghongyang": ["female", "shu", 3, ["hx_zhuanying", "hx_tonghuo", "hx_fuli"],
                        ["des:桑弘羊（前155年？—前80年），河南洛阳人，西汉时期政治家、理财专家、汉武帝的顾命大臣之一，官至御史大夫。桑弘羊出身商人家庭，十三岁时以精于心算入侍宫中。历任侍中、大农丞、治粟都尉、大司农等职。自元狩三年（前120年）起，在汉武帝大力支持下，先后推行算缗、告缗、盐铁官营、均输、平准、币制改革、酒榷等经济政策，同时组织六十万人屯田戍边，防御匈奴。这些措施都在不同程度上取得了成功，大幅度增加了政府的财政收入，为武帝继续推行文治武功事业奠定了雄厚的物质基础，但也带来一定的负面影响并引发批评。后元二年（前87年），汉昭帝即位，桑弘羊迁任御史大夫，与霍光、金日磾等同为辅政大臣。始元六年（前81年），盐铁会议召开，因贤良文学指责盐铁官营和均输、平准等政策“与民争利”，桑弘羊与之展开辩论。会后，改酒类专卖为征税，其他政策仍沿袭不变。元凤元年（前80年）九月，桑弘羊因与霍光政见发生分歧，被卷入燕王刘旦和上官桀父子的谋反事件，牵连被杀。</p>Pixiv ID: 8872168</p>Member: 御崎悠</p>技能: Jordan圣帝"]
                    ],
                    "hx_yangguang": ["female", "qun", 4, ["hx_daye", "hx_haolu"],
                        ["zhu", "des:隋炀帝杨广（569年～618年4月11日），本名杨英，弘农华阴（今陕西省华阴市）人。隋朝第二位皇帝（604年～618年在位），隋文帝杨坚与文献皇后独孤伽罗嫡次子。美姿仪，少聪慧，初封雁门郡公。开皇元年（581年），册立为晋王，参与灭陈朝，阴谋夺宗。开皇二十年（600年），册立为皇太子。仁寿四年（604年）七月，正式即位。在位期间，在前人修的众多运河基础上疏浚修隋朝大运河，营建东都洛阳，迁都洛阳。改州为郡，又改度量衡依古式；频繁发动战争，西征吐谷浑、三征高句丽，滥用民力、穷奢极欲，引发全国范围农民起义，天下大乱，导致隋朝崩溃覆亡。大业十四年（618年4月11日），江都兵变之后，为宇文化及叛军所弑。杨侗追谥为明皇帝，庙号世祖；唐高祖李渊追谥为炀皇帝，夏王窦建德追谥为闵皇帝，《全隋诗》录存其诗四十余首。</p>Pixiv ID: 13534898</p>Member: MarineSnow</p>技能: Jordan圣帝"]
                    ],
                    "hx_banchao": ["female", "shu", 3, ["hx_yimeng", "hx_tuixin"],
                        ["des:班超（32年－102年），字仲升。扶风郡平陵县（今陕西省咸阳市）人。东汉时期著名军事家、外交家，史学家班彪的幼子，其长兄班固、妹妹班昭也是著名史学家。班超为人有大志，不修细节，但内心孝敬恭谨，审察事理。他口齿辩给，博览群书。不甘于为官府抄写文书，投笔从戎，随窦固出击北匈奴，又奉命出使西域，在三十一年的时间里，收服了西域五十多个国家，为西域的回归做出了巨大贡献。官至西域都护，封定远侯，世称“班定远”。永元十二年（100年），班超因年迈请求回朝。永元十四年（102年），抵达洛阳，被拜为射声校尉。不久后便病逝，享年七十一岁。死后葬于洛阳邙山之上。</p>Pixiv ID: 1336451</p>Member: 海凪コウ【KOH】</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_lizhi": ["female", "wei", 3, ["hx_shuobang", "hx_yiquan", "hx_zhishi_lz"],
                        ["zhu", "des:唐高宗李治（628年7月21日-683年12月27日），字为善，唐朝第三位皇帝（649年7月15日-683年12月27日在位），唐太宗李世民第九子，母为文德顺圣皇后长孙氏，前太子李承乾、魏王李泰同母弟。贞观二年（628年）六月，李治出生于东宫丽正殿。贞观五年（631年）封晋王，后太子李承乾与次子魏王李泰相继被废，于贞观十七年（643年）被册为皇太子。贞观二十三年（649年），唐太宗去世，太子李治即位，是为唐高宗。唐高宗在即位之初，继续执行太宗制订的各项政治经济制度，李勣、长孙无忌、褚遂良共同辅政。由于他勤于政事，故而“百姓阜安，有贞观之遗风，史称“永徽之治”。高宗还在废立皇后问题上坚持自己的主张，排除了元老派的干扰。显庆五年（660年）以后，高宗经常头晕目眩，影响处理政务。武皇后乘机开始参与国家大事。高宗的健康状况不佳，政权由高宗向武则天手中转移的趋势逐步形成。唐高宗在位期间先后灭西突厥（657年）、灭百济（660年）、灭高句丽（668年）。高宗时期唐朝版图为最大，东起朝鲜半岛，西扩咸海，北包贝加尔湖，南至越南中部，维持了三十二年。弘道元年（683年），唐高宗去世于贞观殿，享年五十六岁，葬于乾陵。庙号高宗，谥号天皇大帝。天宝八年（749年）增谥为天皇大圣皇帝，天宝十三年（754年），再增谥为天皇大圣大弘孝皇帝。</p>Pixiv ID: 5161399</p>Member: GiO</p>技能: Jordan圣帝"]
                    ],
                    "hx_changyuchun": ["female", "wu", 4, ["hx_tuxian", "hx_zhongye"],
                        ["des:常遇春（1330年—1369年），字伯仁，号燕衡，南直隶凤阳府怀远县（今安徽省蚌埠市怀远县）人。元末红巾军杰出将领，明朝开国名将。元顺帝至正十五年（1355年），归附朱元璋，自请为前锋，力战克敌，尝自言能将十万众，横行天下，军中称常十万，官至中书平章军国重事，兼太子少保，封鄂国公。洪武二年，北伐中原，暴卒军中，年仅四十，用宋太宗丧韩王赵普故事，追赠翊运推诚宣德靖远功臣、开府仪同三司、上柱国、太保、中书右丞相，追封开平王，谥号忠武，配享太庙。</p>Pixiv ID: 230943</p>Member: 唯@W ３日目西A27a</p>技能: 金主&Jordan圣帝"]
                    ],
                    "hx_gecongzhou": ["female", "qun", 4, ["hx_fenshen"],
                        ["des:葛从周（9世纪－916年），字通美，濮州鄄城（今山东鄄城北）人。唐朝末年追随朱温的武将。葛从周最初参加黄巢农民军，升至军校。中和四年（884年）三月，朱温在王满渡（今河南中牟北）大败黄巢，葛从周和霍存、张归霸、李谠等人一同投降了朱温，此后就一直为朱温四处征讨。景福二年二月，与诸将大破朱瑾徐、兖之兵于石佛山。八月，与庞师古一起攻打兖州。乾宁元年三月，军至新泰县，朱瑾命令都将张约、李胡椒率三千人来战，庞师古派遣从周、张存敬等掩袭，后生擒张约、李胡椒等都将数十人，又生擒都将张汉筠，以功累迁检校左仆射。河北谚曰：“山东一条葛，无事莫撩拨。”任兖州节度使。朱温即位，为左金吾卫上将军，葛从周以疾致仕，又拜右卫上将军，居于偃师县，授太子太师。后梁末帝即位，拜昭义军节度使，封陈留郡王，累食邑至七千户。贞明初年，卒于家中，赠太尉。</p>Pixiv ID: 13770035</p>Member: 柚杞ゆぎな@お仕事募集中</p>技能: Jordan圣帝&陈恭杜弼的区别"]
                    ],
                    "hx_shiwansui": ["female", "qun", 4, ["hx_duijue"],
                        ["des:史万岁（549-600年），京兆杜陵人（今陕西西安），擅长骑射，好读兵书，随父从军。北周武帝时，授开府仪同三司，袭爵太平县公。参与平定尉迟迥之乱，拜上大将军。隋朝建立后，受累于大将军尔朱绩谋反，贬为敦煌郡戍卒。开皇三年，跟随秦州总管窦荣定大败突厥。九年（589年），参与隋灭陈之战，平定江南叛乱。身先士卒，善抚部下，将士效力。南征北战，屡建战功。开皇二十年（600年11月20日），遭到宰相杨素陷害，为隋文帝所杀。</p>Pixiv ID: 3066815</p>Member: もねてぃ</p>技能: Jordan圣帝"]
                    ],
                },
                translate: {
                    "hx_xiean": "谢安",
                    "hx_wangmeng": "王猛",
                    "hx_zhaokuangyi": "赵匡胤",
                    "hx_zhangliang": "张良",
                    "hx_licunxu": "李存勖",
                    "hx_zuti": "祖逖",
                    "hx_huanwen": "桓温",
                    "hx_sushi": "苏轼",
                    "hx_dufu": "杜甫",
                    "hx_wangshouren": "王守仁",
                    "hx_huoqubing": "霍去病",
                    "hx_licunxiao": "李存孝",
                    "hx_diqing": "狄青",
                    "hx_xueli": "薛礼",
                    "hx_xiaohe": "萧何",
                    "hx_lijing": "李靖",
                    "hx_hanxin": "韩信",
                    "hx_tuobahong": "拓跋宏",
                    "hx_zhangqian": "张骞",
                    "hx_lidingguo": "李定国",
                    "hx_weiqing": "卫青",
                    "hx_yuefei": "岳飞",
                    "hx_guanyiwu": "管夷吾",
                    "hx_liubang": "刘邦",
                    "hx_fangxuanling": "房玄龄",
                    "hx_duruhui": "杜如晦",
                    "hx_caocao": "曹操",
                    "hx_liuyu": "刘裕",
                    "hx_baiqi": "白起",
                    "hx_chenqingzhi": "陈庆之",
                    "hx_xiangyu": "项羽",
                    "hx_liukun": "刘琨",
                    "hx_liuji": "刘基",
                    "hx_lishimin": "李世民",
                    "hx_liuche": "刘彻",
                    "hx_limi": "李泌",
                    "hx_xuda": "徐达",
                    "hx_zhuyuanzhang": "朱元璋",
                    "hx_liubei": "刘备",
                    "hx_menggong": "孟珙",
                    "hx_fanli": "范蠡",
                    "hx_guoziyi": "郭子仪",
                    "hx_fujian": "苻坚",
                    "hx_chenping": "陈平",
                    "hx_yangsu": "杨素",
                    "hx_zhangquanyi": "张全义",
                    "hx_murongke": "慕容恪",
                    "hx_xiexuan": "谢玄",
                    "hx_lianpo": "廉颇",
                    "hx_gaojiong": "高颎",
                    "hx_zhugeliang": "诸葛亮",
                    "hx_yuchirong": "尉迟融",
                    "hx_sunwu": "孙武",
                    "hx_yuxin": "庾信",
                    "hx_sudingfang": "苏定方",
                    "hx_yaoguangxiao": "姚广孝",
                    "hx_quyuan": "屈原",
                    "hx_zhouyu": "周瑜",
                    "hx_wuqi": "吴起",
                    "hx_simaqian": "司马迁",
                    "hx_sunbin": "孙膑",
                    "hx_yangzaixing": "杨再兴",
                    "hx_jiaxu": "贾诩",
                    "hx_xueandu": "薛安都",
                    "hx_qixiaobai": "齐小白",
                    "hx_zhouyafu": "周亚夫",
                    "hx_zongze": "宗泽",
                    "hx_fengdao": "冯道",
                    "hx_lishiji": "李世绩",
                    "hx_zhudi": "朱棣",
                    "hx_hanqinhu": "韩擒虎",
                    "hx_xinqiji": "辛弃疾",
                    "hx_liguangbi": "李光弼",
                    "hx_yangjian": "杨坚",
                    "hx_zhuwen": "朱温",
                    "hx_zhaopu": "赵普",
                    "hx_sanghongyang": "桑弘羊",
                    "hx_yangguang": "杨广",
                    "hx_banchao": "班超",
                    "hx_lizhi": "李治",
                    "hx_changyuchun": "常遇春",
                    "hx_gecongzhou": "葛从周",
                    "hx_shiwansui": "史万岁",
                },
                characterTitle: {
                    "hx_xiean": "苍生雅望",
                    "hx_wangmeng": "关中良相",
                    "hx_zhaokuangyi": "神武独断",
                    "hx_zhangliang": "谋圣立天",
                    "hx_licunxu": "转瞬兴衰",
                    "hx_zuti": "击楫中流",
                    "hx_huanwen": "流年运蹇",
                    "hx_sushi": "千墨一襟",
                    "hx_dufu": "吟世圣笔",
                    "hx_wangshouren": "良识心问",
                    "hx_huoqubing": "天幸冠军",
                    "hx_licunxiao": "万人辟易",
                    "hx_diqing": "凛威一代",
                    "hx_xueli": "白衣冲阵",
                    "hx_xiaohe": "功人筑宇",
                    "hx_lijing": "贤略高古",
                    "hx_hanxin": "兵仙曜群",
                    "hx_tuobahong": "经邦纬族",
                    "hx_zhangqian": "凿空求索",
                    "hx_lidingguo": "雄节安屹",
                    "hx_weiqing": "安天勋鼎",
                    "hx_yuefei": "忠魂武魄",
                    "hx_guanyiwu": "佐道经天",
                    "hx_liubang": "天授人主",
                    "hx_fangxuanling": "帷幄经邦",
                    "hx_duruhui": "廊庙纬国",
                    "hx_caocao": "长歌挥鞭",
                    "hx_liuyu": "定乱代兴",
                    "hx_baiqi": "威灵振古",
                    "hx_chenqingzhi": "白袍觖望",
                    "hx_xiangyu": "气盖神州",
                    "hx_liukun": "枕戈北塞",
                    "hx_liuji": "佐定天下",
                    "hx_lishimin": "天策治世",
                    "hx_liuche": "万方功罪",
                    "hx_limi": "相身仙骨",
                    "hx_xuda": "功昭日月",
                    "hx_zhuyuanzhang": "应天豪主",
                    "hx_liubei": "高祖遗烈",
                    "hx_menggong": "天玉佑国",
                    "hx_fanli": "策世泛舟",
                    "hx_guoziyi": "勋高一代",
                    "hx_fujian": "孤垂千古",
                    "hx_chenping": "智魁扶龙",
                    "hx_yangsu": "恢基弘轨",
                    "hx_zhangquanyi": "乱世净土",
                    "hx_murongke": "古之遗爱",
                    "hx_xiexuan": "翦凶拓北",
                    "hx_lianpo": "壮血涌冠",
                    "hx_gaojiong": "经宇佐代",
                    "hx_zhugeliang": "云霄羽毛",
                    "hx_yuchirong": "入阵夺槊",
                    "hx_sunwu": "千秋兵圣",
                    "hx_yuxin": "赋动江关",
                    "hx_sudingfang": "雄谋戡定",
                    "hx_yaoguangxiao": "玄袈宰朝",
                    "hx_quyuan": "逸响伟辞",
                    "hx_zhouyu": "谈笑顾曲",
                    "hx_wuqi": "天下莫当",
                    "hx_simaqian": "孤愤汗青",
                    "hx_sunbin": "坐筹思骋",
                    "hx_yangzaixing": "奕世忠义",
                    "hx_jiaxu": "算无遗策",
                    "hx_xueandu": "断矛横疆",
                    "hx_qixiaobai": "一匡天下",
                    "hx_zhouyafu": "罡风不挠",
                    "hx_zongze": "拨乱忧邦",
                    "hx_fengdao": "不倒孤松",
                    "hx_lishiji": "雄忠英义",
                    "hx_zhudi": "治典拓疆",
                    "hx_hanqinhu": "贾勇争先",
                    "hx_xinqiji": "泪洒神州",
                    "hx_liguangbi": "中兴首将",
                    "hx_yangjian": "伟存万古",
                    "hx_zhuwen": "乱世猾雄",
                    "hx_zhaopu": "国卿家相",
                    "hx_sanghongyang": "流转天下",
                    "hx_yangguang": "业半国崩",
                    "hx_banchao": "绝域葱雪",
                    "hx_lizhi": "继业拓疆",
                    "hx_changyuchun": "万军纵横",
                    "hx_gecongzhou": "疾风转阵",
                    "hx_shiwansui": "骁骑驱虏",
                },
            },
            card: {
                card: {},
                translate: {},
                list: [],
            },
            skill: {
                skill: {
                    "hx_fengshen": {
                        trigger: {
                            player: ["linkBegin", "turnOverBegin", "phaseDiscardBegin"]
                        },
                        filter: function(event, player) {
                            return player.isAlive();
                        },
                        content: function() {
                            player.draw(1)
                        },
                        ai: {
                            threaten: 0.5,
                            expose: 0.2,
                            result: {
                                player: function(player, target) {
                                    return 1;
                                }
                            }
                        },
                    },

                    "hx_yinshi": {
                        group: ["hx_yinshi_1", "hx_yinshi_2"],
                        subSkill: {
                            "1": {
                                trigger: {
                                    global: "damageEnd",
                                },
                                filter: function(event, player) {
                                    return event.player == player && (!player.isLinked());
                                },
                                content: function() {
                                    player.link();
                                },
                                sub: true,
                            },
                            "2": {
                                trigger: {
                                    global: "damageEnd",
                                },
                                filter: function(event, player) {
                                    return event.source == player && (player.isLinked());
                                },
                                content: function() {
                                    player.link(false);
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            threaten: 0.8,
                            expose: 0.3,
                            result: {
                                player: function(player, target) {
                                    return 1.5;
                                }
                            }
                        }
                    },

                    "hx_jingzhi": {
                        enable: "phaseUse",
                        filter: function(event, player) {
                            if (player.countCards('he') == 0) {
                                return false;
                            }
                            return !player.hasSkill('hx_jingzhi_empty');
                        },
                        content: function() {
                            "step 0"
                            var num1 = player.countCards('he');
                            player.chooseCardTarget({
                                filterCard: function(card) {
                                    return true;
                                },
                                position: 'he',
                                selectCard: [1, num1],
                                selectTarget: 1,
                                filterTarget: function(card, player, target) {
                                    return true;
                                },
                                ai1: function(card) {
                                    if (get.type(card) == "basic") {
                                        return 4 - get.value(card);
                                    }
                                    return 5 - get.value(card);
                                },
                                ai2: function(target) {
                                    var s = 0;
                                    if (player == target) {
                                        if (target.hp == 1) return 5;
                                        return 2;
                                    } else if (get.attitude(player, target) > 0) {
                                        if (target.hp == 1 || target.countCards('h') <= 1) {
                                            if (target.hasJudge('lebu')) return -1;
                                            return 4;
                                        } else if (target.countCards('h') < target.hp) return 3;
                                        return 1;
                                    }
                                    return -1;
                                },
                                prompt: '精治：弃置任意张牌,然后令一名角色摸等量的牌'
                            });
                            "step 1"
                            if (result.bool) {
                                player.discard(result.cards);
                                result.targets[0].draw(result.cards.length);
                                for (i = 0; i < result.cards.length; i++) {
                                    if (get.type(result.cards[i]) == 'basic') {
                                        player.addTempSkill("hx_jingzhi_empty", "phaseUseAfter");
                                        break;
                                    }
                                }
                            }
                        },
                        ai: {
                            order: 1,
                            expose: 0.3,
                            result: {
                                player: function(player, target) {
                                    var cards = player.getCards('he');
                                    var flag = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        var card = cards[i];
                                        if (get.type(card) == "basic") {
                                            if (4 - get.value(card) > 0) flag = 1;
                                        } else if (5 - get.value(card) > 0) flag = 1;

                                    }
                                    if (flag == 0) return -1;
                                    return 1;
                                }
                            },
                            threaten: 1.2,
                        },
                    },
                    "hx_jingzhi_empty": {},
                    "hx_yiliao": {
                        trigger: {
                            player: "dyingBegin",
                        },
                        content: function() {
                            "step 0"
                            event.cards = get.cards(5);
                            player.chooseCardButton(event.cards, 2, '选择两张牌置于牌堆顶（先选择者在上）').set('ai', function(card) {
                                return 20 - get.value(card);
                            });
                            "step 1"
                            if (result.bool) {
                                var choice = [];
                                for (var i = 0; i < result.links.length; i++) {
                                    choice.push(result.links[i]);
                                    cards.remove(result.links[i]);
                                }
                                while (choice.length) {
                                    ui.cardPile.insertBefore(choice.pop(), ui.cardPile.firstChild);
                                }
                                player.chooseTarget('将余下三张牌交给一名角色', function(card, player, target) {
                                    return true;
                                }).ai = function(target) {
                                    if (get.attitude(player, target) < 0) return -1;
                                    var cards = event.cards;
                                    var flag = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (cards[i].name == 'tao' || cards[i].name == 'jiu') flag = 1;
                                    }
                                    if (flag == 0) {
                                        if (player == target) return 1;
                                        return get.attitude(player, target) + 1;
                                    }
                                    if (target.hasJudge('lebu')) return 1;
                                    return get.attitude(player, target) + 1;
                                }

                            }

                            "step 2"
                            if (result.bool) {
                                var target = result.targets[0];
                                target.gain(cards, "gain2");
                            }
                        },
                        ai: {
                            expose: 0.3,
                            result: {
                                player: function(player, target) {
                                    return 1;
                                }
                            },
                            threaten: 1.2,
                        },

                    },

                    "hx_zhangbing": {
                        enable: "phaseUse",
                        usable: 1,
                        filter: function(event, player) {
                            return true;
                        },
                        filterTarget: function(card, player, target) {
                            return target != player && target.countCards('h') > 0 && (target.countCards('e') <= player.getAttackRange());
                        },
                        content: function() {
                            'step 0'
                            player.chooseButton(['选择一张牌使用之', target.getCards('h')], false)
                                .set('ai', function(button) {
                                    return get.value(button.link);
                                })
                                .set('filterButton', function(button) {
                                    var card = button.link;
                                    if (card.name == 'sha' && player.getCardUsable('sha') == 0) {
                                        return false;
                                    };
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (player.canUse(button.link, players[i])) return true;
                                    }
                                    return false;
                                });

                            "step 1"
                            if (result.bool) {
                                target.lose(result.links[0], ui.special);
                                player.chooseUseTarget(result.links[0], false, true);
                            } else {
                                event.finish();

                            }
                        },
                        ai: {
                            order: 8,
                            expose: 0.5,
                            result: {
                                player: function(player, target) {
                                    var att = get.attitude(player, target);
                                    if (get.attitude(player, target) > 0) {
                                        if (target.hp == 1 || target.countCards('h') <= 1) {
                                            return -1;
                                        }
                                        return target.countCards('h');
                                    } else {
                                        return -att * target.countCards('h');
                                    }
                                },
                            },
                            threaten: 2.0,
                        },
                    },

                    "hx_shiquan": {
                        enable: "phaseUse",
                        usable: 1,
                        filterCard: true,
                        selectCard: [2, 2],
                        position: 'he',
                        discard: false,
                        lose: false,
                        filter: function(event, player) {
                            if (player.countCards('he') < 2) {
                                return false;
                            }
                            return true;
                        },
                        check: function(card) {
                            return 7 - get.value(card);
                        },
                        filterTarget: function(card, player, target) {
                            return player != target;
                        },
                        content: function() {
                            'step 0'
                            player.logSkill('hx_shiquan', target);
                            target.gain(cards, player, 'giveAuto');

                            'step 1'
                            target.chooseCard('e', '交给' + get.translation(player) + '一张装备区内的牌或翻面', {
                                    type: "equip"
                                })
                                .ai = function(card) {
                                    var player = _status.event.player;
                                    if (player.isTurnedOver()) {
                                        return -1;
                                    }
                                    return 10 - get.equipValue(card);

                                };

                            'step 2'
                            if (result.bool) {
                                target.give(result.cards[0], player, 'visible');
                            } else {
                                target.turnOver();
                            }

                        },
                        ai: {
                            order: 3,
                            expose: 0.7,
                            threaten: 2.5,
                            result: {
                                player: function(player, target) {
                                    return -1;
                                },
                                target: function(player, target) {
                                    if (target.hasSkillTag('noturn')) return 0;
                                    if (target.isTurnedOver()) {
                                        return 3;
                                    }
                                    if (target.countCards('e') == 0) {
                                        return -3;
                                    }
                                    var cards = target.getCards('e');
                                    var value = 20;
                                    for (var i = 0; i < cards.length; i++) {
                                        value = Math.min(get.equipValue(cards[i]), value);
                                    }
                                    return 5 - value;
                                }
                            },
                        },
                    },

                    "hx_jiashen": {
                        enable: "phaseUse",
                        unique: true,
                        global: "hx_jiashen_2",
                        zhuSkill: true,
                        usable: 1,
                        selectCard: [1, 1],
                        position: 'h',
                        discard: false,
                        lose: false,
                        filter: function(event, player) {
                            if (!player.hasZhuSkill('hx_jiashen')) {
                                return false;
                            }
                            if (player.countCards('he') == 0) {
                                return false;
                            }
                            if (player.countCards('h', 'tao') == 0 && player.countCards('h', {
                                    type: 'equip'
                                }) == 0) {
                                return false;
                            }
                            if (game.countPlayer(function(current) {
                                    return current.group == 'wu' && current != player
                                }) == 0) {
                                return false;
                            }
                            if (player.countCards('h', {
                                    type: 'equip'
                                }) == 0 && game.countPlayer(function(current) {
                                    return current.group == 'wu' && current != player && current.isDamaged()
                                }) == 0) return false;
                            return true;
                        },
                        prompt2: function(event, player) {
                            return '选择一名其他吴势力角色，对其使用装备牌或桃';
                        },
                        filterCard: function(card) {
                            return card.name == "tao" || get.type(card) == "equip";
                        },
                        filterTarget: function(card, player, target) {
                            if (player == target || target.group != 'wu') {
                                return false;
                            }
                            if (card.name == "tao" && !target.isDamaged()) {
                                return false;
                            }
                            return true;
                        },
                        content: function() {
                            "step 0"
                            var card = cards[0];
                            var target = targets[0];
                            if (card.name == "tao") {
                                player.useCard(cards, target);
                            } else {
                                target.equip(card);
                            }
                        },
                        ai: {
                            order: 8,
                            expose: 0.6,
                            threaten: 1.2,
                            result: {
                                player: function(card, player, target) {
                                    if (card.name == 'tao') {
                                        if (player.hp == 1) return -5;
                                        else return player.hp - player.maxHp;
                                    } else if (get.type(card) == "equip") {
                                        if ((get.subtype(card) == 'equip1' && player.get('e', '1') == undefined) ||
                                            (get.subtype(card) == 'equip2' && player.get('e', '1') == undefined) ||
                                            (get.subtype(card) == 'equip3' && player.get('e', '1') == undefined) ||
                                            (get.subtype(card) == 'equip4' && player.get('e', '1') == undefined) ||
                                            (get.subtype(card) == 'equip5' && player.get('e', '1') == undefined)) return -3;
                                        else return -1.5;
                                    }
                                    return -1;
                                },
                                target: function(card, player, target) {
                                    if (card.name == 'tao') {
                                        if (target.hp == 1) return 5;
                                        else return target.maxHp - target.hp;
                                    } else if (get.type(card) == "equip") {
                                        if ((get.subtype(card) == 'equip1' && target.get('e', '1') == undefined) ||
                                            (get.subtype(card) == 'equip2' && target.get('e', '1') == undefined) ||
                                            (get.subtype(card) == 'equip3' && target.get('e', '1') == undefined) ||
                                            (get.subtype(card) == 'equip4' && target.get('e', '1') == undefined) ||
                                            (get.subtype(card) == 'equip5' && target.get('e', '1') == undefined)) return 1;
                                        else return 3;
                                    }
                                    return 0.5;
                                },
                            },
                        },

                    },

                    "hx_jiashen_2": {
                        enable: "phaseUse",
                        unique: true,
                        ignoreMod: true,
                        usable: 1,
                        selectCard: [1, 1],
                        position: 'h',
                        discard: false,
                        lose: false,
                        filter: function(event, player) {
                            if (player.group != "wu") {
                                return false;
                            }
                            if (player.hasZhuSkill('hx_jiashen')) {
                                return false;
                            }
                            if (player.countCards('he') == 0) {
                                return false;
                            }
                            if (player.countCards('h', 'tao') == 0 && player.countCards('h', {
                                    type: 'equip'
                                }) == 0) {
                                return false;
                            }
                            if (game.countPlayer(function(current) {
                                    return current.group == 'wu' && current != player
                                }) == 0) {
                                return false;
                            }
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].hasZhuSkill('hx_jiashen')) {
                                    if (player.countCards('h', {
                                            type: 'equip'
                                        }) > 0 || (player.countCards('h', 'tao') > 0 && players[i].isDamaged())) return true;
                                }
                            }
                            return false;
                        },
                        prompt2: function(event, player) {
                            return '选择一名拥有主公技【加身】的吴势力角色，对其使用装备牌或桃';
                        },
                        filterCard: function(card) {
                            return card.name == "tao" || get.type(card) == "equip";
                        },
                        filterTarget: function(card, player, target) {
                            if (target.group != 'wu') {
                                return false;
                            }
                            if (!target.hasSkill('hx_jiashen')) {
                                return false;
                            }
                            if (card.name == 'tao' && target.isDamaged()) {
                                return true;
                            }
                            if (get.type(card) == "equip") {
                                return true;
                            }
                            return false;
                        },
                        content: function() {
                            "step 0"
                            var card = cards[0];
                            var target = targets[0];
                            if (card.name == "tao") {
                                player.useCard(cards, target);
                            } else {
                                target.equip(card);
                            }
                        },
                        ai: {
                            order: 8,
                            expose: 0.6,
                            threaten: 1.2,
                            player: function(card, player, target) {
                                if (card.name == 'tao') {
                                    if (player.hp == 1) return -5;
                                    else return player.hp - player.maxHp;
                                } else if (get.type(card) == "equip") {
                                    if ((get.subtype(card) == 'equip1' && player.get('e', '1') == undefined) ||
                                        (get.subtype(card) == 'equip2' && player.get('e', '1') == undefined) ||
                                        (get.subtype(card) == 'equip3' && player.get('e', '1') == undefined) ||
                                        (get.subtype(card) == 'equip4' && player.get('e', '1') == undefined) ||
                                        (get.subtype(card) == 'equip5' && player.get('e', '1') == undefined)) return -3;
                                    else return -1.5;
                                }
                                return -1;
                            },
                            target: function(card, player, target) {
                                if (card.name == 'tao') {
                                    if (target.hp == 1) return 5;
                                    else return target.maxHp - target.hp;
                                } else if (get.type(card) == "equip") {
                                    if ((get.subtype(card) == 'equip1' && target.get('e', '1') == undefined) ||
                                        (get.subtype(card) == 'equip2' && target.get('e', '1') == undefined) ||
                                        (get.subtype(card) == 'equip3' && target.get('e', '1') == undefined) ||
                                        (get.subtype(card) == 'equip4' && target.get('e', '1') == undefined) ||
                                        (get.subtype(card) == 'equip5' && target.get('e', '1') == undefined)) return 1;
                                    else return 3;
                                }
                                return 0.5;
                            },
                        },

                    },

                    "hx_choushi": {
                        forced: true,
                        trigger: {
                            global: ["roundStart"],
                        },
                        global: ["hx_choushi_setup"],
                        filter: function(event, player) {
                            return game.players.length >= 2 && get.mode() == 'identity';
                        },
                        content: function() {
                            'step 0'
                            player.storage.hx_choushi_cnt = game.countPlayer() - 1;
                            player.storage.hx_choushi_curr = 0;
                            var zhu;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].identity == 'zhu') {
                                    zhu = players[i];
                                    break;
                                }
                            }
                            player.storage.hx_choushi_sitters = [];
                            player.storage.hx_choushi_sitters.add(zhu);
                            player.storage.hx_choushi_orders = ["二", "三", "四", "五", "六", "七", "八", "九", "十"];
                            player.storage.hx_choushi_prev = zhu;

                            'step 1'
                            player.chooseTarget("筹世：请安排本轮第" + player.storage.hx_choushi_orders[player.storage.hx_choushi_curr] + "位执行回合的角色", function(card, player, target) {
                                var sitters = player.storage.hx_choushi_sitters;
                                for (var i = 0; i < sitters.length; i++) {
                                    if (sitters[i] == target) return false;
                                }
                                return true;
                            }, true).ai = function(target) {

                                var att = ai.get.attitude(player, target);
                                if (att > 0) {
                                    if (target.hp <= 2) {
                                        if (player.countCards('h') > player.hp) {
                                            if (player.hasJudge('lebu')) {
                                                return 1;
                                            }
                                            return 8;
                                        } else if (player.hasJudge('lebu') || player.hasJudge('caomu') || player.hasJudge('bingliang')) {
                                            return 3;
                                        }
                                        return 8 - target.hp;
                                    } else if (player.countCards('h') > player.hp) {
                                        if (player.hasJudge('lebu')) {
                                            return 2;
                                        } else if (player.hasJudge('caomu') || player.hasJudge('bingliang')) {
                                            return 4;
                                        } else if (player.countCards('h') - player.hp >= 3) return 3;
                                        return 7;
                                    } else if (player.hp == 3) {
                                        if (player.hasJudge('lebu')) {
                                            return 3;
                                        } else if (player.hasJudge('caomu') || player.hasJudge('bingliang')) {
                                            return 4;
                                        }
                                        return player.countCards('h') + 3;
                                    }
                                    return 6;
                                } else {
                                    if (target.hp <= 2) {
                                        if (player.countCards('h') > player.hp) {
                                            if (player.hasJudge('lebu')) {
                                                return 8;
                                            }
                                            return 2;
                                        } else if (player.hasJudge('lebu') || player.hasJudge('caomu') || player.hasJudge('bingliang')) {
                                            return 6;
                                        }
                                        return 3 + target.hp;
                                    } else if (player.countCards('h') > player.hp) {
                                        if (player.hasJudge('lebu')) {
                                            return 9;
                                        } else if (player.hasJudge('caomu') || player.hasJudge('bingliang')) {
                                            return 6;
                                        } else if (player.countCards('h') - player.hp >= 3) return 1;
                                        return 4;
                                    } else if (player.hp == 3) {
                                        if (player.hasJudge('lebu')) {
                                            return 8;
                                        } else if (player.hasJudge('caomu') || player.hasJudge('bingliang')) {
                                            return 3;
                                        }
                                        return player.countCards('h') + 2;
                                    }
                                    return 5;
                                }

                            }

                            'step 2'
                            if (result.bool) {
                                player.storage.hx_choushi_curr += 1;
                                var zhu;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i].identity == 'zhu') {
                                        zhu = players[i];
                                        break;
                                    }
                                }
                                var candidate = zhu;
                                for (var i = 0; i < player.storage.hx_choushi_curr; i++) {
                                    candidate = candidate.next;
                                }

                                //if(candidate!=result.targets[0]){
                                //    game.swapSeat(candidate,result.targets[0]);
                                //}
                                player.storage.hx_choushi_sitters.add(result.targets[0]);
                                player.storage.hx_choushi_prev = result.targets[0];
                            } else event.finish();

                            'step 3'
                            if (player.storage.hx_choushi_curr < player.storage.hx_choushi_cnt) event.goto(1);
                            else {
                                for (var i = 0; i < player.storage.hx_choushi_sitters.length - 1; i++) {
                                    game.log(player.storage.hx_choushi_sitters[i + 1], "被指定为本轮第" + player.storage.hx_choushi_orders[i] + "位执行回合");
                                }
                                for (var i = 0; i < player.storage.hx_choushi_sitters.length; i++) {
                                    player.storage.hx_choushi_sitters[i].storage.hx_choushi_sitters = player.storage.hx_choushi_sitters;
                                    if (i < player.storage.hx_choushi_sitters.length - 1) {
                                        player.storage.hx_choushi_sitters[i].next = player.storage.hx_choushi_sitters[i + 1];
                                        player.storage.hx_choushi_sitters[i + 1].previous = player.storage.hx_choushi_sitters[i];
                                    } else {
                                        player.storage.hx_choushi_sitters[i].next = player.storage.hx_choushi_sitters[0];
                                        player.storage.hx_choushi_sitters[0].previous = player.storage.hx_choushi_sitters[i];
                                    }
                                }

                            }
                        },
                        ai: {
                            expose: 0.3,
                            threaten: 1.2,
                        },
                        group: ["hx_choushi_init"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "gameStart",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    var init_players = [];
                                    var zhu;
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].isZhu) console.log(players[i]);
                                    }
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].identity == 'zhu') {
                                            zhu = players[i];
                                            break;
                                        }
                                    }
                                    init_players.add(zhu);
                                    var candidate = zhu.next;
                                    while (candidate != zhu) {
                                        init_players.add(candidate);
                                        candidate = candidate.next;
                                    }
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player) players[i].addSkill("hx_choushi_zhu");
                                        players[i].storage.hx_choushi_init_players = init_players;
                                        players[i].storage.hx_choushi_flag = 0;
                                    }
                                },
                                sub: true,
                            },
                        },
                    },

                    "hx_choushi_zhu": {
                        trigger: {
                            //player:"phaseEnd",
                            global: "roundStart",
                        },
                        forced: true,
                        popup: false,
                        init: function(player) {
                            player.storage.hx_choushi_flag = 0;
                        },
                        filter: function(event, player) {
                            if (get.mode() != 'identity') return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].isAlive() && players[i].hasSkill("hx_choushi")) {
                                    return false;
                                }
                            }
                            return true;
                        },
                        content: function() {
                            player.storage.hx_choushi_flag = 1;
                            var init_players = player.storage.hx_choushi_init_players;
                            player.storage.hx_choushi_init_players = [];
                            for (var i = 0; i < init_players.length; i++) {
                                if (init_players[i].isAlive()) player.storage.hx_choushi_init_players.add(init_players[i]);
                            }
                            console.log(player.storage.hx_choushi_init_players);
                            for (var i = 0; i < player.storage.hx_choushi_init_players.length; i++) {
                                if (i < player.storage.hx_choushi_init_players.length - 1) {
                                    player.storage.hx_choushi_init_players[i].next = player.storage.hx_choushi_init_players[i + 1];
                                    player.storage.hx_choushi_init_players[i + 1].previous = player.storage.hx_choushi_init_players[i];
                                } else {
                                    player.storage.hx_choushi_init_players[i].next = player.storage.hx_choushi_init_players[0];
                                    player.storage.hx_choushi_init_players[0].previous = player.storage.hx_choushi_init_players[i];
                                }
                            }
                        },
                    },

                    "hx_choushi_setup": {
                        trigger: {
                            global: "phaseEnd",
                        },
                        forced: true,
                        popup: false,
                        filter: function(event, player) {
                            return player.storage.hx_choushi_flag == 0;
                        },
                        content: function() {
                            var temp_players = player.storage.hx_choushi_sitters;
                            player.storage.hx_choushi_sitters = [];
                            for (var i = 0; i < temp_players.length; i++) {
                                if (temp_players[i].isAlive()) player.storage.hx_choushi_sitters.add(temp_players[i]);
                            }
                            for (var i = 0; i < player.storage.hx_choushi_sitters.length; i++) {
                                if (i < player.storage.hx_choushi_sitters.length - 1) {
                                    player.storage.hx_choushi_sitters[i].next = player.storage.hx_choushi_sitters[i + 1];
                                    player.storage.hx_choushi_sitters[i + 1].previous = player.storage.hx_choushi_sitters[i];
                                } else {
                                    player.storage.hx_choushi_sitters[i].next = player.storage.hx_choushi_sitters[0];
                                    player.storage.hx_choushi_sitters[0].previous = player.storage.hx_choushi_sitters[i];
                                }
                            }
                        },
                    },

                    "hx_zhiyin": {
                        forced: true,
                        mod: {
                            globalTo: function(from, to, current) {
                                if (from.hp > to.hp) return +Infinity;
                            },
                        },
                        ai: {
                            expose: 0.2,
                            threaten: 0.5,
                        },
                    },

                    "hx_zhuantu": {
                        forced: true,
                        trigger: {
                            player: "phaseDiscardBefore",
                            //player:"phaseUseEnd",
                        },
                        filter: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (player.canUse('sha', players[i])) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        direct: true,
                        content: function() {
                            if (player.storage.hx_zhuantu == 1) {
                                trigger.cancel();
                            }
                            "step 0"
                            player.chooseControl('体力', '体力上限', function(event, player) {
                                if (player.hp == player.maxHp) return '体力';
                                if (player.hp < player.maxHp - 2 || player.hp <= 1) return '体力上限';
                                return '体力';
                            }).set('prompt', '转突：失去1点体力或减1点体力上限');
                            "step 1"
                            if (result.control) {
                                if (result.control == '体力') {
                                    player.loseHp();
                                } else {
                                    player.loseMaxHp(true);
                                }
                                player.chooseTarget("转突：选择一名角色成为【杀】的目标", function(card, player, target) {
                                    return player.canUse('sha', target);
                                }, true).ai = function(target) {
                                    return get.effect(target, {
                                        name: 'sha'
                                    }, player);
                                }
                            } else event.finish();
                            "step 2"
                            if (result.bool) {
                                player.logSkill('hx_zhuantu');
                                player.useCard({
                                    name: 'sha'
                                }, result.targets, true);
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                        group: ["hx_zhuantu_damage", "hx_zhuantu_init", "hx_zhuantu_start"],
                        subSkill: {
                            damage: {
                                trigger: {
                                    source: "damageAfter",
                                },
                                forced: true,
                                popup: false,
                                filter: function(event) {
                                    return event.parent.parent.parent.name == 'hx_zhuantu';
                                },
                                content: function() {
                                    player.storage.hx_zhuantu = 1;
                                    player.stat.push({
                                        card: {},
                                        skill: {}
                                    });
                                    player.phaseUse();

                                },
                                sub: true,
                            },
                            init: {
                                trigger: {
                                    global: "gameStart",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                content: function() {
                                    player.storage.hx_zhuantu = 0;
                                },
                                sub: true,
                            },
                            start: {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                filter: function(event, player) {
                                    return player.storage.hx_zhuantu == 1;
                                },
                                content: function() {
                                    player.storage.hx_zhuantu = 0;
                                },
                                sub: true,
                            },
                        },
                    },


                    "hx_baizhan": {
                        forced: true,
                        popup: false,
                        trigger: {
                            player: "phaseJieshuEnd",
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        content: function() {
                            var can_zhan = 0;
                            if (player.storage.hx_baizhan_damage >= 3) {
                                can_zhan = 1;
                            }
                            player.storage.hx_baizhan_damage = 0;
                            player.syncStorage('hx_baizhan_damage');
                            if (can_zhan == 1) {
                                player.logSkill('hx_baizhan');
                                player.insertPhase();
                            }
                        },

                        group: ["hx_baizhan_init", "hx_baizhan_start", "hx_baizhan_damage"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "gameStart",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                content: function() {
                                    player.storage.hx_baizhan_damage = 0;
                                    player.syncStorage('hx_baizhan_damage');
                                },
                                sub: true,
                            },
                            start: {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                content: function() {
                                    player.storage.hx_baizhan_damage = 0;
                                    player.syncStorage('hx_baizhan_damage');
                                },
                                sub: true,
                            },
                            damage: {
                                trigger: {
                                    source: "damageEnd",
                                },
                                forced: true,
                                mark: true,
                                marktext: "战",
                                filter: function(event) {
                                    return event.num > 0;
                                },
                                init: function(player) {
                                    player.storage.hx_baizhan_damage = 0;
                                },
                                content: function() {
                                    player.storage.hhx_baizhan_damage += trigger.num;
                                    player.addMark('hx_baizhan_damage', trigger.num);
                                },
                                intro: {
                                    content: "当前回合造成过#点伤害",
                                },
                                sub: true,
                            },

                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.3,
                        },
                    },


                    "hx_shangyue": {
                        zhuSkill: true,
                        forced: true,
                        filter: function(event, player) {
                            if (!player.hasZhuSkill('hx_shangyue')) {
                                return false;
                            }
                            var players = game.filterPlayer();
                            var result = 0;
                            for (var i = 0; i < players.length; i++) {
                                var target = players[i];
                                if (target.group == 'qun' && target != player) {
                                    result = 1;
                                    if (target.hp >= player.hp) {
                                        return false;
                                    }
                                }
                            }
                            if (result == 0) {
                                return false;
                            }
                            return true;
                        },
                        trigger: {
                            source: "damageBegin",
                            player: "damageBegin",
                        },
                        content: function() {
                            trigger.num++;
                        },
                    },

                    "hx_huaizhi": {
                        trigger: {
                            player: "phaseEnd",
                        },
                        check: function(event, player) {
                            var count = player.countCards('h');
                            if (count >= player.getHandcardLimit() - 1) return true;
                            else if (player.hp >= 3) return true;
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.draw(2);
                            'step 1'
                            if (player.countCards("h") <= player.getHandcardLimit()) {
                                player.loseHp();
                                event.finish();
                                return;
                            } else {
                                player.chooseToDiscard("怀志：弃置手牌至" + get.cnNumber(player.getHandcardLimit()) + "张",
                                        player.countCards("h") - player.getHandcardLimit(), 'h', true)
                                    .set("ai", function(card) {
                                        var cards = ui.selected.cards;
                                        var flag = 0;
                                        for (var i = 0; i < cards.length; i++) {
                                            if (get.color(cards[i]) == 'red') flag = 1;
                                        }
                                        if (flag == 1) {
                                            return 8 - player.getUseValue(card);
                                        }
                                        var hand_cards = player.getCards("h");
                                        flag = 0;
                                        for (var i = 0; i < hand_cards.length; i++) {
                                            if (cards.contains(hand_cards[i]) || card == hand_cards[i]) continue;
                                            if (player.getUseValue(hand_cards[i]) > 0) flag = 1;
                                        }
                                        if (flag == 1 && get.color(card) == 'red') return 8 - get.value(card);
                                        return 6 - get.value(card);
                                    }).set('complexCard', true);
                            }
                            'step 2'
                            if (result.bool) {
                                var flag = 0;
                                var cards = result.cards;
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.color(cards[i]) == 'red') flag = 1;
                                }
                                if (flag == 1) player.phaseUse();
                                else event.finish();
                            } else event.finish();
                        },
                    },


                    "hx_zaifa": {
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha' && player.storage.hx_zaifa == 1) return num + 1;
                            },
                        },
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (lib.filter.targetEnabled2({
                                        name: 'sha'
                                    }, player, players[i])) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var flag = 0;
                            var eff = 0;
                            var target = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                if (lib.filter.targetEnabled2({
                                        name: 'sha'
                                    }, player, players[i]) && get.effect(players[i], {
                                        name: 'sha'
                                    }, player, player) > 0) {
                                    if (get.effect(players[i], {
                                            name: 'sha'
                                        }, player, player) > eff) {
                                        eff = get.effect(players[i], {
                                            name: 'sha'
                                        }, player, player);
                                        target = players[i];
                                    }
                                    flag = 1;
                                }
                            }
                            if (flag == 0) return false;
                            if (target.countCards("h") == 0 && !target.getEquip("bagua")) return true;
                            var cards = player.getCards("h");
                            for (var i = 0; i < cards.length; i++) {
                                if (get.value(cards[i]) < 6) return true;
                            }
                            return false;
                        },
                        content: function() {
                            "step 0"
                            player.chooseTarget("再伐：选择一名角色成为【杀】的目标", function(card, player, target) {
                                return lib.filter.targetEnabled2({
                                    name: 'sha'
                                }, player, target);
                            }, false).ai = function(target) {
                                return get.effect(target, {
                                    name: 'sha'
                                }, player)
                            };
                            "step 1"
                            if (result.bool) {
                                player.logSkill('hx_zaifa');
                                player.storage.hx_zaifa = 1;
                                player.useCard({
                                    name: 'sha'
                                }, result.targets, true);
                            } else {
                                player.storage.hx_zaifa = 0;
                            }
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.5,
                        },
                        group: ["hx_zaifa_init", "hx_zaifa_damage"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "gameStart",
                                    player: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                content: function() {
                                    player.storage.hx_zaifa = 0;
                                },
                                sub: true,
                            },
                            damage: {
                                trigger: {
                                    source: ["damageAfter", "dieAfter"]
                                },
                                forced: true,
                                popup: false,
                                filter: function(event, player) {
                                    return event.parent.parent.parent.name == 'hx_zaifa' && player.countCards("h") > 0;
                                },
                                content: function() {
                                    'step 0'
                                    player.storage.hx_zaifa = 2;
                                    player.chooseToDiscard('h', true);
                                },
                                sub: true,
                            },
                        },
                    },

                    "hx_kuiding": {
                        unique: true,
                        mark: true,
                        skillAnimation: true,
                        animationColor: "soil",
                        juexingji: true,
                        forced: true,
                        limited: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        derivation: "wangzun",
                        filter: function(event, player) {
                            if (player.storage.hx_kuiding) return false;
                            return player.isMaxHp();
                        },
                        content: function() {
                            player.awakenSkill('hx_kuiding');
                            var count = 2;
                            if (player.countCards("he") == 1) count = 1;
                            if (player.countCards("he") == 0) count = 0;
                            if (count > 0) {
                                player.chooseToDiscard(count, 'he', true).ai = function(card) {
                                    return 20 - get.value(card);
                                };
                            }
                            player.loseHp();
                            player.gainMaxHp();
                            player.addSkill('wangzun');
                        },
                        intro: {
                            content: "limited",
                        },
                        init: function(player, skill) {
                            player.storage[skill] = false;
                        },
                    },

                    "hx_leiyue": {
                        trigger: {
                            global: ["gameStart", "changeHp"],
                        },
                        forced: true,
                        unique: true,
                        derivation: ["shelie", "jiushi"],
                        content: function() {
                            player.removeAdditionalSkill('hx_leiyue');
                            var list = [];
                            if (!player.isMaxHp() && !player.isMinHp()) {
                                list.push('shelie');
                            }
                            if (player.isMaxHp() || player.isMinHp()) {
                                list.push('jiushi');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('hx_leiyue', list);
                            }
                        },
                    },

                    "hx_diedang": {
                        trigger: {
                            player: "phaseJieshuEnd",
                        },
                        filter: function(event, player) {
                            return player.storage.hx_diedang != player.countCards('h');
                        },
                        prompt2: function(event, player) {
                            var count = Math.abs(player.storage.hx_diedang - player.countCards('h'));
                            var s = "是否发动【跌宕】，抽" + count + "张牌"
                            if (count <= 3) {
                                s = s + "?";
                            } else {
                                s = s + "，并翻面？"
                            }
                            return s;
                        },
                        check: function(event, player) {
                            var count = Math.abs(player.storage.hx_diedang - player.countCards('h'));
                            if (count <= 3) {
                                return true;
                            }
                            if (player.isTurnedOver()) return true;
                            if (count > 5) {
                                return true;
                            }
                            var count_players = game.countPlayer();
                            if (count > count_players) {
                                return true;
                            }
                            var teammates = 0;
                            var enemy = 0;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                if (get.attitude(player, players[i]) > 0) teammates += 1;
                                if (get.attitude(player, players[i]) < 0) enemy += 1;
                            }
                            if (teammates >= enemy + 1) return false;
                            return true;
                        },
                        content: function() {
                            var count = Math.abs(player.storage.hx_diedang - player.countCards('h'));
                            player.draw(count);
                            if (count > 3) {
                                player.turnOver();
                            }
                        },

                        group: ["hx_diedang_init", "hx_diedang_start"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "gameStart",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_diedang = 0;
                                },
                                sub: true,
                            },
                            start: {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_diedang = player.countCards('h');
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.1,
                            threaten: 0.8,
                        },
                    },

                    "hx_xinyong": {
                        group: ["hx_xinyong_spade", "hx_xinyong_heart", "hx_xinyong_club", "hx_xinyong_diamond", "hx_xinyong_addMark"],
                        subSkill: {
                            spade: {
                                marktext: "♠︎️",
                                intro: {
                                    name: "新咏-桃",
                                    content: "mark",
                                },
                                sub: true,
                            },
                            heart: {
                                marktext: "♥︎️",
                                intro: {
                                    name: "新咏-心",
                                    content: "mark",
                                },
                                sub: true,
                            },
                            club: {
                                marktext: "♣︎️",
                                intro: {
                                    name: "新咏-梅",
                                    content: "mark",
                                },
                                sub: true,
                            },
                            diamond: {
                                marktext: "♦︎",
                                intro: {
                                    name: "新咏-方",
                                    content: "mark",
                                },
                                sub: true,
                            },
                            addMark: {
                                forced: true,
                                popup: false,
                                trigger: {
                                    player: "useCard",
                                },
                                filter: function(event, player) {
                                    return event.card.name == "wuzhong";
                                },
                                content: function() {
                                    if (event.parent.parent.parent.skill == "hx_xinyong") {
                                        player.addMark('hx_xinyong_' + get.suit(trigger.cards[0]));
                                    }
                                },

                            },
                        },
                        enable: "phaseUse",
                        filterCard: true,
                        position: "h",
                        viewAsFilter: function(player) {
                            if (player.countCards('h') == 0) return false;
                            var cards = player.getCards('h');
                            for (var i = 0; i < cards.length; i++) {
                                if (!player.hasMark('hx_xinyong_' + get.suit(cards[i]))) return true;
                            }
                            return false;
                        },
                        viewAs: {
                            name: "wuzhong",
                        },
                        check: function(card) {
                            return 7 - get.value(card);
                        },

                        ai: {
                            threaten: 1.4,
                            order: 1,
                            result: {
                                player: 1.5,
                            },
                            tag: {
                                draw: 2,
                            },
                        },
                    },

                    "hx_guge": {
                        enable: ["chooseToUse"],
                        filter: function(event, player) {
                            var cards = player.getCards('h');
                            if (!cards) return false;
                            var event = _status.event;
                            if (event.parent._trigger && event.parent._trigger.target && event.parent._trigger.target.hp == 1 && player.hasSkill('hx_lvye')) {
                                return true;
                            }
                            if ((!player.hasMark('hx_xinyong_spade')) && (!player.hasMark('hx_xinyong_club')) && (!player.hasMark('hx_xinyong_heart')) && (!player.hasMark('hx_xinyong_diamond'))) return false;
                            return true;
                        },
                        filterCard: function(card) {
                            var event = _status.event;
                            var player = event.player;
                            if (event.parent._trigger && event.parent._trigger.target && event.parent._trigger.target.hp == 1 && player.hasSkill('hx_lvye')) {
                                return true;
                            }
                            return player.hasMark('hx_xinyong_' + get.suit(card));
                        },
                        viewAs: {
                            name: "wuxie",
                        },
                        viewAsFilter: function(player) {
                            var event = _status.event;
                            if (event.parent._trigger && event.parent._trigger.target && event.parent._trigger.target.hp == 1 && player.hasSkill('hx_lvye')) {
                                return true;
                            }
                            var cards = player.getCards('h');
                            if (!cards) return false;
                            if (player.storage.hx_lvye == 1) return true;
                            for (var i = 0; i < cards.length; i++) {
                                if (player.hasMark('hx_xinyong_' + get.suit(cards[i]))) return true;
                            }
                            return false;
                        },
                        prompt: "你可以将一张花色被“新咏”记录的手牌当【无懈可击】使用",
                        check: function(card) {
                            var player = _status.event.player;
                            if (get.suit(card) == 'spade' && player.storage.hx_guge_spade == 0) return 10 - get.value(card);
                            else if (get.suit(card) == 'club' && player.storage.hx_guge_club == 0) return 10 - get.value(card);
                            else if (get.suit(card) == 'diamond' && player.storage.hx_guge_diamond == 0) return 10 - get.value(card);
                            else if (get.suit(card) == 'heart' && player.storage.hx_guge_heart == 0) return 10 - get.value(card);
                            else return 7 - get.value(card);
                        },
                        mod: {
                            cardEnabled: function(card, player) {
                                if (_status.event.skill != 'hx_guge' && player.hasMark('hx_xinyong_' + get.suit(card))) return false;
                            },
                            cardUsable: function(card, player) {
                                if (_status.event.skill != 'hx_guge' && player.hasMark('hx_xinyong_' + get.suit(card))) return false;
                            },
                            cardRespondable: function(card, player) {
                                if (_status.event.skill != 'hx_guge' && player.hasMark('hx_xinyong_' + get.suit(card))) return false;
                            },
                            cardSavable: function(card, player) {
                                if (_status.event.skill != 'hx_guge' && player.hasMark('hx_xinyong_' + get.suit(card))) return false;
                            },
                        },
                        group: ["hx_guge_init", "hx_guge_start", "hx_guge_mark", "hx_guge_remove"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "gameStart",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_guge_spade = 0;
                                    player.storage.hx_guge_heart = 0;
                                    player.storage.hx_guge_club = 0;
                                    player.storage.hx_guge_diamond = 0;
                                },
                                sub: true,
                            },
                            start: {
                                trigger: {
                                    global: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_guge_spade = 0;
                                    player.storage.hx_guge_heart = 0;
                                    player.storage.hx_guge_club = 0;
                                    player.storage.hx_guge_diamond = 0;
                                },
                                sub: true,
                            },
                            mark: {
                                forced: true,
                                popup: false,
                                trigger: {
                                    player: "useCard",
                                },
                                filter: function(event, player) {
                                    return event.card.name == "wuxie";
                                },
                                content: function() {
                                    if (event.parent.parent.parent.skill == "hx_guge") {
                                        if (get.suit(trigger.cards[0]) == 'spade' && player.hasMark('hx_xinyong_spade')) player.storage.hx_guge_spade = 1;
                                        if (get.suit(trigger.cards[0]) == 'heart' && player.hasMark('hx_xinyong_heart')) player.storage.hx_guge_heart = 1;
                                        if (get.suit(trigger.cards[0]) == 'club' && player.hasMark('hx_xinyong_club')) player.storage.hx_guge_club = 1;
                                        if (get.suit(trigger.cards[0]) == 'diamond' && player.hasMark('hx_xinyong_diamond')) player.storage.hx_guge_diamond = 1;
                                    }
                                },
                            },
                            remove: {
                                trigger: {
                                    global: "phaseJieshuEnd",
                                },
                                filter: function(event, player) {
                                    return player.storage.hx_guge_spade == 1 || player.storage.hx_guge_heart == 1 || player.storage.hx_guge_club == 1 || player.storage.hx_guge_diamond == 1;
                                },
                                prompt2: function(event, player) {
                                    return '是否消除被【故歌】使用过的“新咏”记录？';
                                },
                                content: function() {
                                    'step 0'
                                    var list = [];
                                    if (player.storage.hx_guge_spade == 1) list.push('spade');
                                    if (player.storage.hx_guge_heart == 1) list.push('heart');
                                    if (player.storage.hx_guge_club == 1) list.push('club');
                                    if (player.storage.hx_guge_diamond == 1) list.push('diamond');
                                    list.push('取消');
                                    player.chooseControl(list, true).set('prompt', '故歌：选择移去的标记花色').ai = function() {
                                        if (player.storage.hx_guge_heart == 1) {
                                            if (player.countCards('h', {
                                                    suit: 'heart'
                                                }) == 0) return "heart";
                                            var current = _status.currentPhase;
                                            var enemy = 0;
                                            current = current.next;
                                            while (current != player) {
                                                if (get.attitude(player, current) < 0) enemy += 1;
                                                current = current.next;
                                            }
                                            if (enemy < 2 && (!player.countCards('j'))) return "heart";
                                            if (player.countCards('h', {
                                                    suit: 'heart',
                                                    name: 'shan'
                                                }) >= enemy - 1) return "heart";
                                        }
                                        if (player.storage.hx_guge_diamond == 1) {
                                            if (player.countCards('h', {
                                                    suit: 'diamond'
                                                }) == 0) return "diamond";
                                            var current = _status.currentPhase;
                                            var enemy = 0;
                                            current = current.next;
                                            while (current != player) {
                                                if (get.attitude(player, current) < 0) enemy += 1;
                                                current = current.next;
                                            }
                                            if (enemy < 2 && (!player.countCards('j'))) return "diamond";
                                            if (player.countCards('h', {
                                                    suit: 'diamond',
                                                    name: 'shan'
                                                }) >= enemy - 1) return "diamond";
                                        }
                                        if (player.storage.hx_guge_spade == 1) {
                                            if (player.countCards('h', {
                                                    suit: 'spade'
                                                }) == 0) return "spade";
                                            var current = _status.currentPhase;
                                            var enemy = 0;
                                            current = current.next;
                                            while (current != player) {
                                                if (get.attitude(player, current) < 0) enemy += 1;
                                                current = current.next;
                                            }
                                            if (enemy < 2 && (!player.countCards('j'))) return "spade";
                                        }
                                        if (player.storage.hx_guge_club == 1) {
                                            if (player.countCards('h', {
                                                    suit: 'club'
                                                }) == 0) return "club";
                                            var current = _status.currentPhase;
                                            var enemy = 0;
                                            current = current.next;
                                            while (current != player) {
                                                if (get.attitude(player, current) < 0) enemy += 1;
                                                current = current.next;
                                            }
                                            if (enemy < 2 && (!player.countCards('j'))) return "club";
                                        }
                                        return "取消";
                                    };
                                    'step 1'
                                    if (result.control) {
                                        if (result.control == '取消') {
                                            event.finish();
                                        } else if (result.control == 'spade') {
                                            player.storage.hx_guge_spade = 0;
                                            player.removeMark('hx_xinyong_spade');
                                        } else if (result.control == 'heart') {
                                            player.storage.hx_guge_heart = 0;
                                            player.removeMark('hx_xinyong_heart');
                                        } else if (result.control == 'club') {
                                            player.storage.hx_guge_club = 0;
                                            player.removeMark('hx_xinyong_club');
                                        } else if (result.control == 'diamond') {
                                            player.storage.hx_guge_diamond = 0;
                                            player.removeMark('hx_xinyong_diamond');
                                        }
                                    }
                                    'step 2'
                                    if (player.storage.hx_guge_spade == 1 || player.storage.hx_guge_heart == 1 || player.storage.hx_guge_club == 1 || player.storage.hx_guge_diamond == 1) event.goto(0);
                                },
                            },
                        },
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                            },
                            result: {
                                player: 1,
                            },
                            expose: 0.2,
                        },
                    },


                    "hx_lvye": {
                        forced: true,
                        trigger: {
                            global: "phaseJieshuBegin",
                        },
                        filter: function(event, player) {
                            if (event.player.hp < event.player.maxHp) return false;
                            return player.hasMark('hx_xinyong_spade') || player.hasMark('hx_xinyong_heart') || player.hasMark('hx_xinyong_club') || player.hasMark('hx_xinyong_diamond');
                        },
                        content: function() {
                            'step 0'
                            var list = [];
                            if (player.hasMark('hx_xinyong_spade')) list.push('spade');
                            if (player.hasMark('hx_xinyong_heart')) list.push('heart');
                            if (player.hasMark('hx_xinyong_club')) list.push('club');
                            if (player.hasMark('hx_xinyong_diamond')) list.push('diamond');
                            player.chooseControl(list, true)
                                .set('prompt', '履野：消除“新咏”的一项记录')
                                .ai = function() {
                                    if (player.hasMark('hx_xinyong_heart')) {
                                        if (player.countCards('h', {
                                                suit: 'heart'
                                            }) == 0) return "heart";
                                        var current = _status.currentPhase;
                                        var enemy = 0;
                                        while (current != player) {
                                            current = current.next;
                                            if (get.attitude(player, current) < 0) enemy += 1;
                                        }
                                        if (enemy < 2 && (!player.countCards('j'))) return "heart";
                                        if (player.countCards('h', {
                                                suit: 'heart',
                                                name: 'shan'
                                            }) >= enemy - 1) return "heart";
                                    }
                                    if (player.hasMark('hx_xinyong_diamond')) {
                                        if (player.countCards('h', {
                                                suit: 'diamond'
                                            }) == 0) return "diamond";
                                        var current = _status.currentPhase;
                                        var enemy = 0;
                                        while (current != player) {
                                            current = current.next;
                                            if (get.attitude(player, current) < 0) enemy += 1;
                                        }
                                        if (enemy < 2 && (!player.countCards('j'))) return "diamond";
                                        if (player.countCards('h', {
                                                suit: 'diamond',
                                                name: 'shan'
                                            }) >= enemy - 1) return "diamond";
                                    }
                                    if (player.hasMark('hx_xinyong_spade')) {
                                        if (player.countCards('h', {
                                                suit: 'spade'
                                            }) == 0) return "spade";
                                        var current = _status.currentPhase;
                                        var enemy = 0;
                                        while (current != player) {
                                            current = current.next;
                                            if (get.attitude(player, current) < 0) enemy += 1;
                                        }
                                        if (enemy < 2 && (!player.countCards('j'))) return "spade";
                                    }
                                    if (player.hasMark('hx_xinyong_club')) {
                                        if (player.countCards('h', {
                                                suit: 'club'
                                            }) == 0) return "club";
                                        var current = _status.currentPhase;
                                        var enemy = 0;
                                        while (current != player) {
                                            current = current.next;
                                            if (get.attitude(player, current) < 0) enemy += 1;
                                        }
                                        if (enemy < 2 && (!player.countCards('j'))) return "club";
                                    }
                                    if (player.hasMark('hx_xinyong_heart')) return "heart";
                                    else if (player.hasMark('hx_xinyong_diamond')) return "diamond";
                                    else if (player.hasMark('hx_xinyong_spade')) return "spade";
                                    else if (player.hasMark('hx_xinyong_club')) return "club";
                                };
                            'step 1'
                            if (result.control) {
                                if (result.control == 'spade') {
                                    player.storage.hx_guge_spade = 0;
                                    player.removeMark('hx_xinyong_spade');
                                } else if (result.control == 'heart') {
                                    player.storage.hx_guge_heart = 0;
                                    player.removeMark('hx_xinyong_heart');
                                } else if (result.control == 'club') {
                                    player.storage.hx_guge_club = 0;
                                    player.removeMark('hx_xinyong_club');
                                } else if (result.control == 'diamond') {
                                    player.storage.hx_guge_diamond = 0;
                                    player.removeMark('hx_xinyong_diamond');
                                }
                            }

                        },
                    },


                    "hx_zhixing": {
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        filter: function(event, player) {
                            var num1 = player.getHistory('useCard').length;
                            return num1 == player.hp;
                        },
                        content: function() {
                            'step 0'
                            var list = [];
                            list.push(['基本', '', 'sha']);
                            list.push(['基本', '', 'sha', 'fire']);
                            list.push(['基本', '', 'sha', 'thunder']);
                            if (lib.filter.cardUsable({
                                    name: 'tao'
                                }, player) && game.hasPlayer(function(current) {
                                    return player.canUse('tao', current);
                                })) {
                                list.push(['基本', '', 'tao']);
                            }
                            if (lib.filter.cardUsable({
                                    name: 'jiu'
                                }, player) && game.hasPlayer(function(current) {
                                    return player.canUse('jiu', current);
                                })) {
                                list.push(['基本', '', 'jiu']);
                            }
                            if (list.length) {
                                player.chooseButton(['视为使用一张基本牌', [list, 'vcard']]).set('ai', function(button) {
                                    var card = {
                                        name: button.link[2],
                                        nature: button.link[3]
                                    };
                                    if (card.name == 'tao') {
                                        if (player.hp == 1 || (player.hp == 2 && !player.hasShan()) || player.needsToDiscard()) {
                                            return 5;
                                        }
                                        return 1;
                                    }
                                    if (card.name == 'sha') {
                                        if (game.hasPlayer(function(current) {
                                                return player.canUse(card, current) && get.effect(current, card, player, player) > 0
                                            })) {
                                            if (card.nature == 'fire') return 2.95;
                                            if (card.nature == 'thunder') return 2.92;
                                            return 2.9;
                                        }
                                        return 0;
                                    }
                                    if (card.name == 'jiu') {
                                        if (player.hasSkill("hx_xinqu")) return 0;
                                        if (player.hasMark("hx_mingwu_jiu")) return 0.1;
                                        else if (player.hasMark("hx_mingwu_sha") && player.hasMark("hx_mingwu_shan") && player.hasMark("hx_mingwu_tao")) {
                                            return 3;
                                        }
                                        return 0.5;
                                    }
                                    return 0;
                                });
                            }

                            'step 1'
                            if (result && result.bool && result.links[0]) {
                                var card = {
                                    name: result.links[0][2],
                                    nature: result.links[0][3],
                                    isCard: true
                                };
                                player.chooseUseTarget(card, true);
                            }
                        },
                        ai: {
                            fireAttack: true,
                            order: 5,
                            expose: 0.5,
                            threaten: 1.0,
                            result: {
                                player: function(player) {
                                    return 1.5;
                                },
                            },
                            effect: {
                                player: function(card, player, target, current) {
                                    if (player.hasSkill("hx_xinqu")) return;
                                    if (player.getHistory('useCard').length != player.hp) return;
                                    return [1, -2, 1, 0];
                                },
                            },

                        }
                    },

                    "hx_mingwu": {
                        skillAnimation: true,
                        animationColor: "thunder",
                        unique: true,
                        juexingji: true,
                        forced: true,
                        trigger: {
                            player: "useCardAfter",
                        },
                        filter: function(event, player) {
                            return player.hasMark("hx_mingwu_sha") && player.hasMark("hx_mingwu_shan") && player.hasMark("hx_mingwu_tao") && player.hasMark("hx_mingwu_jiu");
                        },
                        derivation: "hx_xinqu",
                        content: function() {
                            player.removeMark("hx_mingwu_sha");
                            player.removeMark("hx_mingwu_shan");
                            player.removeMark("hx_mingwu_tao");
                            player.removeMark("hx_mingwu_jiu");
                            player.gainMaxHp();
                            player.recover();
                            player.draw(2);
                            player.addSkill('hx_xinqu');
                            player.awakenSkill('hx_mingwu');
                        },

                        group: ["hx_mingwu_sha", "hx_mingwu_shan", "hx_mingwu_tao", "hx_mingwu_jiu", "hx_mingwu_addMark"],
                        subSkill: {
                            sha: {
                                marktext: "杀",
                                intro: {
                                    name: "明悟-使用过【杀】",
                                    content: "mark",
                                },
                                sub: true,
                            },
                            shan: {
                                marktext: "闪",
                                intro: {
                                    name: "明悟-使用过【闪】",
                                    content: "mark",
                                },
                                sub: true,
                            },
                            tao: {
                                marktext: "桃",
                                intro: {
                                    name: "明悟-使用过【桃】",
                                    content: "mark",
                                },
                                sub: true,
                            },
                            jiu: {
                                marktext: "酒",
                                intro: {
                                    name: "明悟-使用过【酒】",
                                    content: "mark",
                                },
                                sub: true,
                            },
                            addMark: {
                                forced: true,
                                popup: false,
                                trigger: {
                                    player: ["useCardEnd", "respondEnd"],
                                },
                                filter: function(event, player) {
                                    if ((event.card.name != 'sha') && (event.card.name != 'shan') && (event.card.name != 'tao') && (event.card.name != 'jiu')) {
                                        return false;
                                    }
                                    return true;
                                },
                                content: function() {
                                    if (!player.hasMark("hx_mingwu_" + trigger.card.name)) player.addMark("hx_mingwu_" + trigger.card.name);
                                }
                            }
                        },

                        ai: {
                            expose: 0.5,
                            threaten: 1.0,
                            effect: {
                                player: function(card, player, target, current) {
                                    if (get.type(card) != 'basic') return;
                                    else if ((!player.hasMark("hx_mingwu_sha")) && card.name == 'sha') return [1, 1, 1, 0];
                                    else if ((!player.hasMark("hx_mingwu_shan")) && card.name == 'shan') return [1, 1, 1, 0];
                                    else if ((!player.hasMark("hx_mingwu_tao")) && card.name == 'tao') return [1, 1, 1, 0];
                                    else if ((!player.hasMark("hx_mingwu_jiu")) && card.name == 'jiu') return [1, 1, 1, 0];
                                    else return;
                                },
                            },
                        }

                    },

                    "hx_xinqu": {
                        trigger: {
                            player: 'phaseUseBegin',
                        },
                        filter: function(event, player) {
                            if (!player.countCards('he', {
                                    suit: 'heart'
                                })) return false;
                            if (player.countCards('he', {
                                    suit: 'heart'
                                }) == 0) return false;
                            return true;
                        },
                        check: function(event, player) {
                            var flag = 0;
                            var cards = player.getCards('he');
                            for (var i = 0; i < cards.length; i++) {
                                if (get.suit(cards[i]) == 'heart' && get.value(cards[i]) <= 7) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            var list = [];
                            for (var i = 0; i < lib.inpile.length; i++) {
                                if (get.type(lib.inpile[i]) != 'trick') continue;
                                var card = {
                                    name: lib.inpile[i]
                                };
                                if (lib.filter.cardEnabled(card)) {
                                    list.push(['锦囊', '', lib.inpile[i]]);
                                }
                            }
                            if (list.length) {
                                player.chooseButton(['心渠：选择将使用的普通锦囊牌', [list, 'vcard']]).set('ai', function(button) {
                                    return player.getUseValue({
                                        name: button.link[2]
                                    });
                                    /*
                                    var player=_status.event.player; 
                                    var recover=0,lose=1,players=game.filterPlayer(); 
                                    for(var i=0;i<players.length;i++){ 
                                        if(players[i].hp==1&&get.damageEffect(players[i],player,player)>0&&!players[i].hasSha()){ 
                                            return (button.link[2]=='juedou')?2:-1; 
                                        } 
                                        if(!players[i].isOut()){ 
                                            if(players[i].hp<players[i].maxHp){ 
                                                if(get.attitude(player,players[i])>0){ 
                                                    if(players[i].hp<2){ 
                                                        lose--; 
                                                        recover+=0.5; 
                                                    } 
                                                    lose--; 
                                                    recover++; 
                                                } 
                                                else if(get.attitude(player,players[i])<0){ 
                                                    if(players[i].hp<2){ 
                                                        lose++; 
                                                        recover-=0.5; 
                                                    } 
                                                    lose++; 
                                                    recover--; 
                                                } 
                                            } 
                                            else{ 
                                                if(get.attitude(player,players[i])>0){ 
                                                    lose--; 
                                                } 
                                                else if(get.attitude(player,players[i])<0){ 
                                                    lose++; 
                                                } 
                                            } 
                                        } 
                                    } 
                                    if(lose>recover&&lose>0) return (button.link[2]=='nanman'||button.link[2]=='wanjian')?1:-1; 
                                    if(lose<recover&&recover>0) return (button.link[2]=='taoyuan'||button.link[2]=='wugu')?1:-1; 
                                    return (button.link[2]=='wuzhong'||button.link[2]=='zengbin')?1:-1;*/
                                });
                            } else event.finish();
                            'step 1'
                            if (result && result.bool && result.links[0]) {
                                //player.chooseUseTarget({name:result.links[0][2],isCard:true},true); 
                                var next = player.chooseToUse('是否发动【心渠】将一张红桃手牌当做' + get.translation(result.links[0].name) + '使用？').set('ai', function(card) {
                                    return 7 - ai.get.value(card);
                                });
                                var card = result.links[0];
                                card = {
                                    name: card[2]
                                };
                                lib.skill.hx_xinqux.viewAs = card;
                                if (next.isOnline()) {
                                    player.send(function(card) {
                                        lib.skill.hx_xinqux.viewAs = card;
                                    }, card)
                                }

                                next.logSkill = 'hx_xinqu';
                                next.set('openskilldialog', '心渠：将一张红桃手牌当' + get.translation(result.links[0][2]) + '使用');
                                next.set('norestore', true);
                                next.set('_backupevent', 'hx_xinqux');
                                next.set('custom', {
                                    add: {},
                                    replace: {
                                        window: function() {}
                                    }
                                });
                                next.backup('hx_xinqux');
                            }
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.5,
                        },
                    },

                    "hx_xinqux": {
                        filterCard: function(card) {
                            return get.suit(card) == 'heart';
                        },
                        position: 'he',
                        selectCard: 1,
                        popname: true,
                    },


                    "hx_qiongqu": {
                        trigger: {
                            player: "phaseDiscardEnd",
                        },
                        filter: function(event, player) {
                            if (!event.cards) return false;
                            return true;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var cards = trigger.cards;
                            var basic = 0;
                            var trick = 0;
                            var equip = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) == 'basic') basic = 1;
                                if (get.type(cards[i]) == 'trick' || get.type(cards[i]) == 'delay') trick = 1;
                                if (get.type(cards[i]) == 'equip') equip = 1;
                            }
                            event.count = basic + trick + equip;
                            if (event.count == 0) {
                                event.finish();
                                return;
                            } else if (!game.hasPlayer(function(current) {
                                    return current.countCards('ej') > 0;
                                })) {
                                event.goto(2);
                            } else {
                                player.chooseTarget('请选择一名角色，弃置其场上的一张牌', function(card, player, target) {
                                    return target.countCards('ej') > 0;
                                }).set('ai', function(target) {
                                    var player = _status.event.player;
                                    var att = get.attitude(player, target);

                                    if (att > 0) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? {
                                                name: js[0].viewAs
                                            } : js[0];
                                            if (jj.name == 'guohe' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                                                return 2 * att;
                                            }
                                        }
                                        if (target.getEquip('baiyin') && target.isDamaged() &&
                                            get.recoverEffect(target, player, player) > 0) {
                                            if (target.hp == 1 && !target.hujia) return 1.6 * att;
                                            if (target.hp == 2) return 0.01 * att;
                                            return 0;
                                        }
                                    }
                                    var es = target.getCards('e');
                                    var noe = target.hasSkillTag('noe');
                                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                                    if (noe || noe2) return 0;
                                    if (att <= 0 && !es.length) return 1.5 * att;
                                    return -1.5 * att;
                                });
                            }
                            'step 1'
                            if (result.bool) {
                                event.target = result.targets[0];
                                player.logSkill('hx_qiongqu', event.target);
                                player.discardPlayerCard('ej', event.target);
                            }
                            'step 2'
                            if (event.count < 2) {
                                event.finish();
                                return;
                            } else if (!game.hasPlayer(function(current) {
                                    return player.inRange(current) && current != player;
                                })) {
                                event.goto(4);
                            } else {
                                player.chooseTarget('请选择一名攻击范围外的角色，对其造成1点伤害', function(card, player, target) {
                                    return !player.inRange(target) && player != target;
                                }).ai = function(target) {
                                    return get.damageEffect(target, player, player);
                                };
                            }
                            'step 3'
                            if (result.bool) {
                                event.target = result.targets[0];
                                player.logSkill('hx_qiongqu', event.target);
                                event.target.damage();
                            }
                            'step 4'
                            if (event.count < 3) {
                                event.finish();
                                return;
                            } else {
                                player.storage.hx_qiongqu = true;
                            }
                        },
                        group: ["hx_qiongqu_draw", "hx_qiongqu_insert"],
                        subSkill: {
                            draw: {
                                mod: {
                                    maxHandcard: function(player, num) {
                                        if (num - 2 < 1) return 1;
                                        return num - 2;
                                    },
                                },
                                forced: true,
                                trigger: {
                                    player: "phaseDrawBegin2",
                                },
                                frequent: true,
                                filter: function(event, player) {
                                    return !event.numFixed;
                                },
                                content: function() {
                                    trigger.num += 2;
                                },
                                ai: {
                                    threaten: 1.3,
                                },
                                sub: true,
                            },
                            insert: {
                                trigger: {
                                    player: "phaseAfter",
                                },
                                prompt2: function(event, player) {
                                    return '是否进行一个额外回合？';
                                },
                                frequent: true,
                                filter: function(event, player) {
                                    return player.storage.hx_qiongqu == true;
                                },
                                content: function() {
                                    player.storage.hx_qiongqu = false;
                                    player.insertPhase();
                                },
                            }
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.5,
                            effect: {
                                player: function(card, player, target, current) {
                                    if (!player.isPhaseUsing()) return;
                                    var cards = player.getCards("h");
                                    if (cards.length <= player.getHandcardLimit()) return;
                                    var count = cards.length - player.getHandcardLimit();
                                    var check1 = game.hasPlayer(function(current) {
                                        var a = (get.attitude(player, current) >= 3 && current.countCards("j") > 0);
                                        var b = (get.attitude(player, current) < 0 && current.countCards("e") > 0);
                                        return a || b;
                                    });
                                    var check2 = game.hasPlayer(function(current) {
                                        var a = current != player && !player.inRange(current);
                                        var b = get.attitude(player, current) < 0;
                                        return a && b;
                                    });
                                    if (count == 1) {
                                        if (check1) return [1, -1];
                                        else return;
                                    }
                                    if (count == 2) {
                                        var check3 = (get.type2(card) == 'basic' && player.countCards("h", {
                                                type2: "basic"
                                            }) == 1) ||
                                            (get.type2(card) == 'equip' && player.countCards("h", {
                                                type2: "equip"
                                            }) == 1) ||
                                            (get.type2(card) == 'trick' && player.countCards("h", {
                                                type2: "trick"
                                            }) == 1);
                                        var check4 = player.countCards("h", {
                                            type2: "basic"
                                        }) > 0;
                                        var check5 = player.countCards("h", {
                                            type2: "equip"
                                        }) > 0;
                                        var check6 = player.countCards("h", {
                                            type2: "trick"
                                        }) > 0;
                                        var check7 = (check4 == false && check5 == true && check6 == true) ||
                                            (check4 == true && check5 == false && check6 == true) ||
                                            (check4 == true && check5 == true && check6 == false);
                                        if (check3 && check7) return [1, -2];
                                        else return;
                                    }
                                    if (count >= 3) {
                                        var check3 = (get.type2(card) == 'basic' && player.countCards("h", {
                                                type2: "basic"
                                            }) == 1) ||
                                            (get.type2(card) == 'equip' && player.countCards("h", {
                                                type2: "equip"
                                            }) == 1) ||
                                            (get.type2(card) == 'trick' && player.countCards("h", {
                                                type2: "trick"
                                            }) == 1);
                                        var check4 = player.countCards("h", {
                                            type2: "basic"
                                        }) > 0;
                                        var check5 = player.countCards("h", {
                                            type2: "equip"
                                        }) > 0;
                                        var check6 = player.countCards("h", {
                                            type2: "trick"
                                        }) > 0;
                                        var check7 = (check4 == true && check5 == true && check6 == true);

                                        if (check3 && check7) return [1, -4];
                                        else return;
                                    }
                                    return;
                                },
                            }
                        }
                    },

                    "hx_juecheng": {
                        forced: true,
                        mod: {
                            globalFrom: function(from, to, current) {
                                return current - 1;
                            },
                            globalTo: function(from, to, current) {
                                return current + 1;
                            },
                        },
                        ai: {
                            threaten: 0.8,
                        },
                    },


                    "hx_yulie": {
                        mod: {
                            cardname: function(card, player) {
                                if (['equip'].contains(lib.card[card.name].type) && (!['equip1'].contains(lib.card[card.name].subtype))) return 'sha';
                            },
                            cardnature: function(card, player) {
                                if (['equip'].contains(lib.card[card.name].type) && (!['equip1'].contains(lib.card[card.name].subtype))) return 'thunder';
                            },
                            cardUsable: function(card, player) {
                                if (card.name == 'sha' && card.nature == 'thunder') return Infinity;
                            },
                        },
                        trigger: {
                            player: "useCard",
                        },
                        filter: function(event, player) {
                            return event.card.name == 'sha' && event.card.nature == 'thunder';
                        },
                        forced: true,
                        content: function() {
                            if (player.stat[player.stat.length - 1].card.sha > 0) {
                                player.stat[player.stat.length - 1].card.sha--;
                            }
                        },
                    },

                    "hx_rongfu": {
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter"],
                        },
                        filter: function(event, player) {
                            if (event.name == 'lose' && event.position != ui.discardPile) return false;
                            var list = [];
                            var num = event.cards.length;
                            for (var i = 0; i < event.cards.length; i++) {
                                var card = event.cards[i];
                                list.add(get.suit(card, (event.cards2 && event.cards2.contains(card)) ? event.player : false));
                            }
                            game.getGlobalHistory('cardMove', function(evt) {
                                if (evt == event || (evt.name != 'lose' && evt.name != 'cardsDiscard')) return false;
                                if (evt.name == 'lose' && evt.position != ui.discardPile) return false;
                                num += evt.cards.length;
                                for (var i = 0; i < evt.cards.length; i++) {
                                    var card = evt.cards[i];
                                    list.remove(get.suit(card, (evt.cards2 && evt.cards2.contains(card)) ? evt.player : false));
                                }
                            }, event);
                            player.storage.hx_rongfu_2 = num;
                            if (num < player.storage.hx_rongfu) return false;
                            if (event.cards.length - 1 - (num - player.storage.hx_rongfu) < 0) return false;
                            var card = event.cards[event.cards.length - 1 - (num - player.storage.hx_rongfu)];
                            return (card.name == 'sha' || card.name == 'shan');
                        },
                        content: function() {
                            var card = trigger.cards[trigger.cards.length - 1 - (player.storage.hx_rongfu_2 - player.storage.hx_rongfu)];
                            if (card.name == 'sha') player.draw();
                            if (card.name == 'shan') player.gain(card, "gain2");
                        },
                        group: ["hx_rongfu_hp"],
                        subSkill: {
                            hp: {
                                trigger: {
                                    global: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                filter: function(event, player) {
                                    return true;
                                },
                                content: function() {
                                    player.storage.hx_rongfu = player.hp;
                                    player.storage.hx_rongfu_2 = 0;
                                },
                                sub: true,
                            }
                        },

                        ai: {
                            expose: 0.2,
                            threaten: 0.8,
                            result: {
                                player: function(player) {
                                    return 1;
                                },
                            },
                        },
                    },

                    "hx_fenru": {
                        trigger: {
                            global: "gameDrawAfter",
                            player: "enterGame",
                        },
                        forced: true,
                        filter: function(event, player) {
                            return true;
                        },
                        content: function() {
                            player.equip(game.createCard2('fangtian', 'diamond', 12));
                            player.equip(game.createCard2('baiyin', 'club', 1));
                            player.equip(game.createCard2('dilu', 'club', 5));
                            player.equip(game.createCard2('dawan', 'spade', 13));
                        },
                        mod: {
                            attackFrom: function(from, to, distance) {
                                return distance - 5;
                            },
                        },
                        group: ["hx_fenru_qilin"],
                        subSkill: {
                            qilin: {
                                trigger: {
                                    source: "damageBegin2",
                                },
                                filter: function(event, player) {
                                    return event.card && event.card.name == 'sha' && event.notLink() && event.player.getCards('e', {
                                        subtype: ['equip3', 'equip4', 'equip6']
                                    }).length > 0;
                                },
                                direct: true,
                                content: function() {
                                    "step 0"
                                    var att = (get.attitude(player, trigger.player) <= 0);
                                    var next = player.chooseButton();
                                    next.set('att', att);
                                    next.set('createDialog', ['是否发动【麒麟弓】，弃置' + get.translation(trigger.player) + '的一张坐骑牌？', trigger.player.getCards('e', {
                                        subtype: ['equip3', 'equip4', 'equip6']
                                    })]);
                                    next.set('ai', function(button) {
                                        if (_status.event.att) return get.buttonValue(button);
                                        return 0;
                                    });
                                    "step 1"
                                    if (result.bool) {
                                        player.logSkill('qilin_skill', trigger.player);
                                        trigger.player.discard(result.links[0]);
                                    }
                                },
                                sub: true,
                            }
                        },
                    },

                    "hx_yuding": {
                        unique: true,
                        enable: "phaseUse",
                        skillAnimation: true,
                        animationColor: "gray",
                        limited: true,
                        init: function(player) {
                            player.storage.hx_yuding = false;
                        },
                        filter: function(event, player) {
                            if (player.storage.hx_yuding) return false;
                            return true;
                        },
                        content: function() {
                            "step 0"
                            player.awakenSkill('hx_yuding');
                            player.storage.hx_yuding = true;
                            player.addTempSkill("hx_yuding_damage", "phaseUseAfter");
                            player.turnOver();
                            player.chooseTarget("选择至多三名角色，使用一张不计入次数的【杀】", function(card, player, target) {
                                if (player == target) return false;
                                return player.canUse({
                                    name: 'sha'
                                }, target, false) && player.inRange(target);
                            }, [1, 3]).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.effect(target, {
                                    name: 'sha'
                                }, player, player);
                            });
                            "step 1"
                            if (result.bool) {
                                player.logSkill('hx_yuding', result.targets);
                                for (var i = 0; i < result.targets.length; i++) {
                                    player.useCard({
                                        name: 'sha',
                                        isCard: true
                                    }, result.targets[i], false);
                                }
                            }
                        },
                        ai: {
                            order: 1,
                            expose: 0.5,
                            threaten: 0.6,
                            result: {
                                player: function(player) {
                                    var num = 0;
                                    var enemy = 0;
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        var att = get.attitude(player, players[i]);
                                        if (att >= 0) continue;
                                        enemy += 1;
                                        if (player.canUse({
                                                name: 'sha'
                                            }, players[i], false) && player.inRange(players[i])) {
                                            num += get.effect(players[i], {
                                                name: 'sha'
                                            }, player, player);
                                        }

                                    }
                                    if (player.isTurnedOver()) return 1;
                                    if (enemy == 0) return 0;
                                    return (num / enemy) + enemy - 16 + game.roundNumber;
                                },
                            },
                        },
                    },

                    "hx_yuding_damage": {
                        trigger: {
                            source: ["damageAfter"]
                        },
                        forced: true,
                        popup: false,
                        filter: function(event) {
                            return event.parent.parent.parent.name == 'hx_yuding';
                        },
                        content: function() {
                            if (!trigger.player.isTurnedOver()) trigger.player.turnOver();
                        },
                        sub: true,
                    },

                    "hx_geixiang": {
                        trigger: {
                            player: "phaseUseBegin"
                        },
                        filter: function(event, player) {
                            return player.countCards('he') > 0;
                        },
                        check: function(event, player) {
                            var flag = 0;
                            var cards = player.getCards("he");
                            var du = 0;
                            var tao = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.value(cards[i]) < 8) {
                                    flag = 1;
                                    if (cards[i].name != 'du') du = 1;
                                }
                                if (cards[i].name == 'tao' || cards[i].name == 'jiu') tao = 1;
                            }
                            if (flag == 0) return false;
                            if (du == 0 && tao == 0) return false;
                            flag = 0;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && get.attitude(player, players[i]) > 0) flag = 1;
                            }
                            if (flag == 0) return false;
                            return true;
                        },
                        content: function() {
                            'step 0'
                            player.chooseCardTarget({
                                filterCard: function(card) {
                                    return true;
                                },
                                position: 'he',
                                selectCard: 1,
                                selectTarget: 1,
                                filterTarget: function(card, player, target) {
                                    return player != target;
                                },
                                ai1: function(card) {
                                    return 8 - get.value(card);
                                },
                                ai2: function(target) {
                                    if (get.attitude(player, target) <= 0) return -1;
                                    if ((!target.num('h')) || target.hp == 1) return 20;
                                    if ((target.hp == 2) || (!target.num('h')) && (!target.num('j'))) return 15;
                                    return get.attitude(player, target);
                                },
                                prompt: '给饷：弃置一张牌，然后令一名其他角色摸X张牌'
                            });
                            'step 1'
                            if (result.bool) {
                                player.discard(result.cards);
                                var num = 1;
                                var target = result.targets[0];
                                if (!target.num('e')) num += 1;
                                if (!target.num('h')) num += 1;
                                if (!target.num('j')) num += 1;
                                target.draw(num);
                            }
                        },

                        ai: {
                            expose: 0.6,
                            threaten: 2.0,
                        },
                    },

                    "hx_zhonglv": {
                        trigger: {
                            global: "damageEnd",
                        },
                        filter: function(event, player) {
                            return event.source && event.source.isAlive() && get.distance(player, event.player, 'attack') <= 1 && player.storage.hx_zhonglv > 0;
                        },
                        check: function(event, player) {
                            return get.attitude(player, event.source) <= 0;
                        },
                        content: function() {
                            player.draw(1);
                            player.storage.hx_zhonglv -= 1;
                            trigger.source.chooseToDiscard(trigger.num, 'he', true);
                        },
                        group: ["hx_zhonglv_init"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: ["gameStart", "roundStart"],
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_zhonglv = 3;
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.6,
                            threaten: 0.5,
                        },
                    },

                    "hx_binglun": {
                        enable: "phaseUse",
                        filter: function(event, player) {
                            if (player.storage.hx_binglun != 0) return false;
                            if ((!player.countCards("he")) || player.countCards("he") <= 0) return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                for (var j = 0; j < players.length; j++) {
                                    if (players[i] == players[j]) continue;
                                    if (get.distance(players[i], players[j], 'attack') <= 1) return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.storage.hx_binglun = 1;
                            player.chooseTarget(function(card, player, target) {
                                if (target == player) return false;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i] != target && get.distance(target, players[i], 'attack') <= 1) return true;
                                }
                                return false;
                            }, '选择一名其他角色').ai = function(target) {
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                var players = game.filterPlayer();
                                var score = 0.1;
                                var cards = player.getCards("he");
                                var flag = 0;
                                var flag_sha = 0;
                                var sha = 0;
                                for (var i = 0; i < cards.length; i++) {
                                    var card = cards[i];
                                    if (get.value(card) < 6) {
                                        flag = 1;
                                        if (card.name != 'sha') flag_sha = 1;
                                    }
                                    if (card.name == 'sha') sha = 1;
                                }
                                for (var i = 0; i < players.length; i++) {
                                    var att1 = get.attitude(player, players[i]);
                                    if (get.distance(target, players[i], 'attack') > 1) continue;
                                    if (players[i] == target) continue;
                                    if (get.effect(players[i], {
                                            name: 'sha'
                                        }, target, player) > 0 && flag == 1) score = Math.max(score, get.damageEffect(target, player, player));
                                    else if (flag_sha == 1) score = Math.max(score, get.damageEffect(target, player, player));
                                    else if (sha == 1) score = Math.max(score, get.effect(players[i], {
                                        name: 'sha'
                                    }, target, player));
                                }
                                return score;
                            };

                            'step 1'
                            if (result.bool) {
                                var target_1 = result.targets[0];
                                event.target = target_1;
                                player.chooseTarget('选择一名其攻击范围内的其他角色，令你选择的角色对其使用【杀】，或受到你的一点伤害并令你摸一张牌', function(card, player, target) {
                                        return get.distance(event.target, target, 'attack') <= 1 && (event.target != target);
                                    })
                                    .set('ai', function(target) {
                                        if (get.effect(target, {
                                                name: 'sha'
                                            }, event.target, player) <= 0) return 0.1;
                                        return get.effect(target, {
                                            name: 'sha'
                                        }, event.target, player);
                                    });
                            } else event.finish();

                            'step 2'
                            if (result.bool) {
                                event.target_1 = result.targets[0];
                                player.line(target_1, 'red');
                                player.chooseCard('选择一张牌交给对方', 'he', 1).set('ai', function(card) {
                                    if (get.damageEffect(event.target, player, player) > 0) {
                                        if (get.effect(event.target_1, {
                                                name: 'sha'
                                            }, event.target, player) > 0) {
                                            if (player.hasSkill("hx_tuqiu") && event.target.getHistory('useCard').length + event.target.getHistory('respond').length == event.target.hp - 1) {
                                                return 20 - get.value(card);
                                            }
                                            if (card.name == 'tao') return -1;
                                            if (event.target.hp == 1 && card.name == 'jiu') return -1;
                                            return 20 - get.value(card);
                                        } else if (card.name == 'sha') return -1;
                                        if (player.hasSkill("hx_tuqiu") && event.target.getHistory('useCard').length + event.target.getHistory('respond').length == event.target.hp - 1) {
                                            return 20 - get.value(card);
                                        }
                                        if (card.name == 'tao') return -1;
                                        if (event.target.hp == 1 && card.name == 'jiu') return -1;
                                        return 20 - get.value(card);
                                    }
                                    if (card.name == 'sha') return 20;
                                    return get.value(card) + 10;
                                });
                            } else event.finish();

                            'step 3'
                            if (result.bool) {
                                event.target.gain(result.cards, player, 'giveAuto');
                                event.target.line(event.target_1, 'green');
                                game.log(event.target, "被指定为给牌的对象");
                                game.log(event.target_1, "被指定为" + get.translation(event.target) + "出杀的对象");
                                event.target.chooseToUse(event.target1, function(card, player, event) {
                                        if (get.name(card) != 'sha') return false;
                                        return lib.filter.filterCard.apply(this, arguments);
                                    }, '兵论：对' + get.translation(event.target_1) + '使用一张杀，或令' + get.translation(player) + '对你造成一点伤害')
                                    .set('ai2', function(target, card, player) {
                                        if (event.target.hp >= 3) return get.effect_use(target, card, player);
                                        if (event.target.hp <= 1 && event.target_1.hp > 1) return 2;
                                        if (event.target.hp == 2 && event.target_1.hp >= event.target.hp) return 2;
                                        return get.effect_use(target, card, player);
                                    })
                                    .set('targetRequired', true).set('complexSelect', true).set('filterTarget', function(card, player, target) {
                                        if (target != _status.event.sourcex && !ui.selected.targets.contains(_status.event.sourcex)) return false;
                                        return lib.filter.filterTarget.apply(this, arguments);
                                    }).set('sourcex', event.target_1);
                            } else event.finish();
                            'step 4'
                            if (result.bool) {
                                player.storage.hx_binglun = 0;
                            } else {
                                player.storage.hx_binglun = 1;
                                player.draw();
                                event.target.damage();
                            }
                        },

                        group: ["hx_binglun_init"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "gameStart",
                                    player: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_binglun = 0;
                                },
                                sub: true,
                            },
                        },

                        ai: {
                            order: 6,
                            expose: 0.6,
                            threaten: 2.0,
                            result: {
                                player: function(player) {
                                    var cards = player.getCards("he");
                                    var players = game.filterPlayer();
                                    var flag = 0;
                                    var flag_sha = 0;
                                    var sha = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        var card = cards[i];
                                        if (get.value(card) < 6) {
                                            flag = 1;
                                            if (card.name != 'sha') flag_sha = 1;
                                        }
                                        if (card.name == 'sha') sha = 1;
                                    }
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] == player) continue;
                                        for (var j = 0; j < players.length; j++) {
                                            if (players[i] == players[j]) continue;
                                            if (get.distance(players[i], players[j], 'attack') > 1) continue;
                                            var att1 = get.attitude(player, players[i]);
                                            var att2 = get.attitude(player, players[j]);
                                            if (get.damageEffect(players[i], player, player) > 0 && get.effect(players[j], {
                                                    name: 'sha'
                                                }, players[i], player) > 0 && flag == 1) return 1;
                                            else if (get.damageEffect(players[i], player, player) > 0 && flag_sha == 1) return 1;
                                            else if (get.effect(players[j], {
                                                    name: 'sha'
                                                }, players[i], player) > 0 && sha == 1) return 1;
                                        }
                                    }
                                    return -1;
                                },
                            },
                        },
                    },

                    "hx_tuqiu": {
                        trigger: {
                            global: ["useCard", "respondEnd"],
                        },
                        filter: function(event, player) {
                            if (_status.currentPhase != player) return false;
                            if (event.player == player) return false;
                            if (event.player.getHistory('useCard').length + event.player.getHistory('respond').length != event.player.hp) {
                                return false;
                            }
                            return true;
                        },
                        check: function(event, player) {
                            if (event.name == 'useCard') {
                                var effect = 0;
                                var targets = event.targets;
                                for (var i = 0; i < targets.length; i++) {
                                    effect += get.effect(targets[i], event.card, event.player, player);
                                }
                                if (effect >= 0) return false;
                                return true;
                            }
                            if (event.name == 'respond') {
                                if (get.attitude(player, event.player) < 0) return true;
                                return false;
                            }
                            return false;
                        },
                        content: function() {
                            var evt = trigger;
                            if (evt.name == 'respond') {
                                if (trigger.parent.result) {
                                    trigger.parent.result.bool = false;
                                }
                            }
                            trigger.cancel();
                        },

                        ai: {
                            expose: 0.6,
                            threaten: 0.5
                        },
                    },

                    "hx_qianfa": {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        forced: true,
                        popup: false,
                        content: function() {
                            player.storage.hx_qianfa = player.num('h');
                            player.addTempSkill('hx_qianfa_add', 'phaseAfter');
                            player.syncStorage("hx_qianfa");
                            player.markSkill("hx_qianfa");
                        },
                        mark: true,
                        intro: {
                            content: "出牌次数与距离限制数为#",
                        },
                        group: ["hx_qianfa_end"],
                        subSkill: {
                            add: {
                                mod: {
                                    attackFrom: function(from, to, distance) {
                                        return distance - from.storage.hx_qianfa;
                                    },
                                    targetInRange: function(card, player, target, now) {
                                        if (get.distance(player, target) <= player.storage.hx_qianfa) return true;
                                    },
                                    cardUsable: function(card, player, num) {
                                        return player.storage.hx_qianfa;
                                    },
                                },
                                sub: true,
                            },
                            end: {
                                trigger: {
                                    global: "phaseUseAfter",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                filter: function(event, player) {
                                    return event.player == player;
                                },
                                content: function() {
                                    player.storage.hx_qianfa = 0;
                                    player.unmarkSkill("hx_qianfa");
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.2,
                        },
                    },

                    "hx_nizhen": {
                        forced: true,
                        trigger: {
                            player: "loseAfter",
                            global: ["equipAfter", "addJudgeAfter", "gainAfter"],
                        },
                        filter: function(event, player) {
                            if (player.countCards('h')) return false;
                            var evt = event.getl(player);
                            return evt && evt.player == player && evt.hs && evt.hs.length > 0;
                        },
                        content: function() {
                            "step 0"
                            player.chooseControl('体力', '体力上限', function(event, player) {
                                if (player.hp == player.maxHp) return '体力';
                                if (player.hp < player.maxHp - 2 || player.hp <= 1) return '体力上限';
                                return '体力';
                            }).set('prompt', '逆阵：失去1点体力或减1点体力上限');
                            "step 1"
                            if (result.control == '体力') {
                                player.loseHp();
                                player.draw(3);
                            } else {
                                player.loseMaxHp(true);
                                player.draw(3);
                            }

                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.2,
                            noh: true,
                            skillTagFilter: function(player, tag) {
                                if (tag == 'noh' && player.hp == 1 && player.maxHp <= 2) {
                                    return false;
                                }
                            },
                        },

                    },

                    "hx_juezhen": {
                        enable: "phaseUse",
                        viewAs: {
                            name: "wanjian",
                        },
                        filter: function(event, player) {
                            return (player.hp == 1) && player.countCards('h', 'sha') > 0;
                        },
                        filterCard: function(card, player) {
                            return card.name == 'sha';
                        },
                        selectCard: 1,
                        check: function(card) {
                            var player = _status.event.player;
                            var targets = game.filterPlayer(function(current) {
                                return player.canUse('wanjian', current);
                            });
                            var num = 0;
                            for (var i = 0; i < targets.length; i++) {
                                var eff = get.sgn(get.effect(targets[i], {
                                    name: 'wanjian'
                                }, player, player));
                                if (targets[i].hp == 1) {
                                    eff *= 1.5;
                                }
                                num += eff;
                            }
                            if (!player.needsToDiscard(-1)) {
                                if (targets.length >= 7) {
                                    if (num < 2) return 0;
                                } else if (targets.length >= 5) {
                                    if (num < 1.5) return 0;
                                }
                            }
                            //return 6-get.value(card); 
                            return 1;
                        },
                        ai: {
                            basic: {
                                order: 8.5,
                                useful: 1,
                                value: 5,
                            },
                            wuxie: function(target, card, player, viewer) {
                                if (get.attitude(viewer, target) > 0 && target.countCards('h', 'shan')) {
                                    if (!target.countCards('h') || target.hp == 1 || Math.random() < 0.7) return 0;
                                }
                            },
                            result: {
                                "target_use": function(player, target) {
                                    if (player.hasUnknown(2) && get.mode() != 'guozhan') return 0;
                                    var nh = target.countCards('h');
                                    if (get.mode() == 'identity') {
                                        if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                    }
                                    if (nh == 0) return -2;
                                    if (nh == 1) return -1.7
                                    return -1.5;
                                },
                                target: function(player, target) {
                                    var nh = target.countCards('h');
                                    if (get.mode() == 'identity') {
                                        if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                    }
                                    if (nh == 0) return -2;
                                    if (nh == 1) return -1.7
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: 1,
                                multitarget: 1,
                                multineg: 1,
                            },
                        },
                    },

                    "hx_xingxiao": {
                        limited: true,
                        trigger: {
                            global: ["phaseAfter"],
                        },
                        filter: function(event, player) {
                            return _status.currentPhase != player;
                        },
                        check: function(event, player) {
                            //1. has used enough times
                            if (player.storage.count_use >= 5) {
                                return true;
                            }
                            //2. can kill others or save self
                            if (_status.currentPhase.next != player) {
                                var count = 0;
                                var temp = _status.currentPhase.next;
                                while (temp != player) {
                                    if (get.attitude(temp, player) < 0) {
                                        count += 1;
                                    }
                                    temp = temp.next;
                                }
                                if (player.hp == 1 && player.countCards('h') <= count) {
                                    return true;
                                }
                                temp = _status.currentPhase.next;
                                if (get.attitude(player, temp) < 0 && temp.hp <= 1 && temp.countCards('h') <= 1 && get.distance(player, temp, 'attack') <= 1 && (player.countCards('h', {
                                        name: 'sha'
                                    }) > 0 || player.countCards('h') > 3)) {
                                    return true;
                                }
                            }

                            if (_status.currentPhase.next == player) {
                                if (game.countPlayer() <= 3) {
                                    if (player.hp == 1 && player.countCards('h') <= 1) {
                                        return true;
                                    }
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].hp <= 2 && get.distance(player, players[i], 'attack') <= 1 && get.attitude(player, players[i]) < 0 && players[i].countCards('h') <= 2) {
                                            return true;
                                        }
                                    }
                                }
                            }

                            //3. may use 3 same (with shan or wuxie) (player.getUseValue)

                            //4. can use 3 same

                            var prev = player.storage.hx_xingxiao_prev;
                            var dict = new Map();
                            for (var i = 0; i < prev.length; i++) {
                                if (!dict.has(prev[i].name)) {
                                    dict.set(prev[i].name, 1);
                                } else {
                                    dict.set(prev[i].name, dict.get(prev[i].name) + 1);
                                }
                            }
                            var cards = player.getCards("h");
                            var sha = 0;
                            var jiu = 0;
                            var count = 0;
                            var jn = 0;
                            var can_sha = 0;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (get.distance(player, players[i], 'attack') <= 1 && get.attitude(player, players[i]) < 0) {
                                    can_sha = 1;
                                }
                            }
                            for (var i = 0; i < cards.length; i++) {
                                var card = cards[i];
                                if (dict.has(card.name) && dict.get(card.name) != -1) {
                                    if (card.name == 'sha' && can_sha == 1) {
                                        sha = 1;
                                        dict.set(card.name, -1);
                                        count += 1;
                                    }
                                    if (get.type(card) == 'trick') {
                                        if (player.getUseValue(card) > 0) {
                                            dict.set(card.name, -1);
                                            count += 1;
                                            jn = 1;
                                        }
                                    }
                                    if (card.name == 'jiu') {
                                        jiu = 1;
                                    }
                                    if (card.name == 'tao' && player.isDamaged()) {
                                        dict.set(card.name, -1);
                                        count += 1;
                                    }
                                }
                            }
                            if (jiu == 1 && sha == 1 && can_sha == 1) {
                                count += 1;
                            }
                            if (count >= 3) {
                                return true;
                            }
                            if (count == 2 && sha == 1 && dict.has('shan')) {
                                if (game.countPlayer() <= 5) {
                                    return true;
                                }
                            }
                            if (count == 1 && sha == 1 && dict.has('shan')) {
                                if (game.countPlayer() <= 3) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            player.storage.is_xingxiao_round = 1;
                            player.storage.count_use += 1;
                            player.addSkill("hx_xingxiao_record");
                            player.awakenSkill('hx_xingxiao');
                            player.insertPhase();
                        },
                        group: ["hx_xingxiao_init", "hx_xingxiao_count"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "phaseBegin",
                                },
                                silent: true,
                                filter: function(event, player) {
                                    return true;
                                },
                                content: function() {
                                    if (!player.storage.count_use) {
                                        player.storage.count_use = 0;
                                    }
                                    player.storage.is_xingxiao_round = 0;
                                    player.storage.hx_xingxiao_prev = [];
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                            count: {
                                trigger: {
                                    global: "useCard",
                                },
                                silent: true,
                                filter: function(event, player) {
                                    return true;
                                },
                                content: function() {
                                    if (player.storage.hx_xingxiao_prev) player.storage.hx_xingxiao_prev.add(trigger.card);
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.2,
                        },
                    },

                    "hx_xingxiao_record": {
                        group: ["hx_xingxiao_record_init", "hx_xingxiao_record_count", "hx_xingxiao_record_end"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "phaseBegin",
                                },
                                silent: true,
                                filter: function(event, player) {
                                    return player.storage.is_xingxiao_round == 1;
                                },
                                content: function() {
                                    player.storage.is_xingxiao_flag = 1;
                                    player.storage.hx_xingxiao_extra = [];
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                            count: {
                                trigger: {
                                    global: "useCard",
                                },
                                silent: true,
                                filter: function(event, player) {
                                    return player.storage.is_xingxiao_round == 1 && player.storage.is_xingxiao_flag == 1;
                                },
                                content: function() {
                                    player.storage.hx_xingxiao_extra.add(trigger.card);
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },

                            end: {
                                trigger: {
                                    global: "phaseAfter",
                                },
                                silent: true,
                                filter: function(event, player) {
                                    return player.storage.is_xingxiao_round == 1 && player.storage.is_xingxiao_flag == 1;
                                },
                                content: function() {
                                    player.storage.is_xingxiao_round = 0;
                                    player.storage.is_xingxiao_flag = 0;
                                    var cards = player.storage.hx_xingxiao_extra;
                                    var prev = player.storage.hx_xingxiao_prev;
                                    var dict = new Map();
                                    for (var i = 0; i < prev.length; i++) {
                                        if (!dict.has(prev[i].name)) {
                                            dict.set(prev[i].name, 1);
                                        } else {
                                            dict.set(prev[i].name, dict.get(prev[i].name) + 1);
                                        }
                                    }
                                    var count = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (dict.has(cards[i].name) && dict.get(cards[i].name) != -1) {
                                            dict.set(cards[i].name, -1);
                                            count += 1;
                                        }
                                    }
                                    //console.log(player.storage.hx_xingxiao);
                                    //console.log(player.storage.hx_xingxiao_extra);
                                    //console.log(count);
                                    if (count >= 3) {
                                        player.addSkill("hx_xingxiao_store");
                                    }
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                        },
                    },

                    "hx_xingxiao_store": {
                        trigger: {
                            global: "roundStart",
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        silent: true,
                        content: function() {
                            player.restoreSkill("hx_xingxiao");
                            player.removeSkill("hx_xingxiao_store");
                        },
                        forced: true,
                        popup: false,
                    },

                    "hx_gezhi": {
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function(event, player) {
                            return player.countCards('h');;
                        },
                        check: function(event, player) {
                            var cards = player.getCards('h');
                            var has = 0;
                            var du = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.value(cards[i]) < 6) {
                                    has = 1;
                                    if (cards[i].name != du) {
                                        du = 1;
                                    }
                                }
                            }
                            if (has == 1) {
                                if (du == 0 && player.hp == 1) {
                                    return false;
                                }
                                return true;
                            }
                            return false;
                        },
                        content: function() {
                            "step 0"
                            player.chooseToDiscard(get.prompt2('hx_gezhi'), [1, 1]).set('ai', function(card) {
                                if (card.name == 'du' && player.hp == 1) {
                                    return -1;
                                }
                                return 6 - get.value(card);
                            });
                            "step 1"
                            if (result.bool) {
                                player.draw();
                                event.card = result.cards[0];
                                player.judge(function(card) {
                                    var check;
                                    if (!player.canMoveCard(true)) {
                                        check = false;
                                    } else {
                                        check = game.hasPlayer(function(current) {
                                            return get.attitude(player, current) > 0 && current.countCards('j');
                                        });
                                        if (!check) {
                                            check = game.hasPlayer(function(current) {
                                                return get.attitude(player, current) < 0 && current.countCards('e');
                                            });
                                        }
                                    }
                                    if (get.suit(card) == get.suit(result.cards[0])) {
                                        if (check) {
                                            return 3;
                                        }
                                        return 1;
                                    }
                                    if (get.color(card) != get.color(result.cards[0])) {
                                        return 2;
                                    }
                                    return 0;
                                });
                            }
                            "step 2"
                            if (result.color && result.suit) {

                                if (result.color != get.color(event.card)) {
                                    player.draw();
                                } else if (result.suit == get.suit(event.card)) {
                                    player.moveCard(true);
                                } else {
                                    event.finish();
                                }
                            }
                        },
                        ai: {
                            expose: 0.2,
                            threaten: 1.3,
                        },
                    },

                    "hx_fuwen": {
                        unique: true,
                        global: "hx_fuwen_2",
                        zhuSkill: true,
                    },

                    "hx_fuwen_2": {
                        trigger: {
                            player: "useCardEnd",
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var cards = player.getCards("h");
                            var p = 0;
                            var c = 0;
                            var index = 0;
                            var value = 100;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].hasZhuSkill("hx_fuwen") && get.attitude(player, players[i]) > 0) {
                                    p = 1;
                                }
                            }
                            if (p == 0) {
                                return false;
                            }
                            for (var i = 0; i < cards.length; i++) {
                                var v = get.value(cards[i]);
                                if (v < 5) {
                                    c += 1;
                                }
                                if (v < value) {
                                    value = v;
                                    index = i;
                                }
                            }
                            if (c < 2) {
                                return false;
                            }
                            var v2 = 100;
                            for (var i = 0; i < cards.length; i++) {
                                if (i != index) {
                                    v2 = Math.min(v2, get.value(cards[i]));
                                }
                            }
                            return get.value(event.cards) > value + v2;
                        },
                        filter: function(event, player) {
                            if (player.group != "wei") {
                                return false;
                            }
                            if (player.hasZhuSkill('hx_fuwen')) {
                                return false;
                            }
                            var check = game.hasPlayer(function(current) {
                                return current.hasZhuSkill("hx_fuwen");
                            });
                            return check && get.type(event.card) == 'trick' && player.countCards('h') > 2 && event.cards.filterInD().length > 0;
                        },
                        content: function() {
                            "step 0"
                            player.chooseToDiscard("复文：弃置两张牌", 2, 'h').ai = function(card) {
                                return 5 - get.value(card);
                            };
                            "step 1"
                            if (result.bool) {
                                player.chooseTarget('使一名有主公技【复文】的角色获得你使用的锦囊牌', function(card, player, target) {
                                    return target.hasZhuSkill("hx_fuwen");
                                }).ai = function(target) {
                                    return get.attitude(player, target);
                                }
                            }
                            "step 2"
                            if (result.bool) {
                                result.targets[0].gain(trigger.cards.filterInD(), 'gain2', 'log');
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                    },

                    "hx_kulv": {
                        forced: true,
                        trigger: {
                            player: "phaseJieshuEnd",
                        },
                        filter: function(event, player) {
                            if ((!player.countCards("he")) || player.countCards("he") == 0) {
                                return false;
                            }
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                if (get.distance(player, players[i], 'attack') > 1) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.chooseToDiscard("苦旅：弃置一张牌", 1, 'he', true).ai = function(card) {
                                if (card.name == 'du' && player.hp == 1) return 1;
                                return 20 - get.value(card);
                            };
                            'step 1'
                            if (result.bool) {
                                player.storage.hx_kulv += 1;
                                player.markSkill('hx_kulv_mark');
                                player.syncStorage('hx_kulv');
                                player.syncStorage('hx_kulv_2');
                            }
                        },
                        group: ["hx_kulv_init", "hx_kulv_add", "hx_kulv_change"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "gameStart",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_kulv = 0;
                                    player.storage.hx_kulv_2 = 0;
                                    player.markSkill('hx_kulv_mark');
                                    player.syncStorage('hx_kulv');
                                    player.syncStorage('hx_kulv_2');
                                },
                                sub: true,
                            },
                            add: {
                                mod: {
                                    attackFrom: function(from, to, distance) {
                                        return distance - from.storage.hx_kulv;
                                    },
                                },
                                forced: true,
                                sub: true,
                            },
                            change: {
                                forced: true,
                                skillAnimation: true,
                                animationColor: "soil",
                                trigger: {
                                    player: "phaseJieshuEnd",
                                },
                                filter: function(event, player) {
                                    if ((!player.countCards("he")) || player.countCards("he") == 0) {
                                        return true;
                                    }
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] == player) continue;
                                        if (get.distance(player, players[i], 'attack') > 1) {
                                            return false;
                                        }
                                    }
                                    return true;
                                },
                                content: function() {
                                    player.awakenSkill('hx_kulv');
                                    player.loseMaxHp();
                                    player.addSkill('hx_kulv_2');
                                    player.removeSkill('hx_kulv');
                                },
                                sub: true,
                            },
                        },

                        ai: {
                            expose: 0.6,
                            threaten: 0.5
                        },
                    },

                    "hx_kulv_mark": {
                        marktext: "苦",
                        intro: {
                            content: function(storage, player, skill) {
                                var num1 = player.storage.hx_kulv;
                                var num2 = player.storage.hx_kulv_2;
                                return '攻击距离增加：' + num1 + '\r\n' + '手牌上限增加：' + num2;
                            },
                        },
                        sub: true,
                    },

                    "hx_kulv_2": {
                        forced: true,
                        trigger: {
                            player: "phaseJieshuEnd",
                        },
                        init: function(player) {
                            player.storage.hx_kulv_2 = 0;
                            player.markSkill('hx_kulv_mark');
                            player.syncStorage('hx_kulv');
                            player.syncStorage('hx_kulv_2');
                        },
                        filter: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                if (get.distance(player, players[i], 'attack') > 1) {
                                    return false;
                                }
                            }
                            return true;
                        },
                        content: function() {
                            player.draw(2);
                            if (!player.storage.hx_kulv_2) {
                                player.storage.hx_kulv_2 = 0;
                            }
                            player.storage.hx_kulv_2 += 1;
                            player.markSkill('hx_kulv_mark');
                            player.syncStorage('hx_kulv');
                            player.syncStorage('hx_kulv_2');
                        },
                        group: ["hx_kulv_2_add", "hx_kulv_2_add_1"],
                        subSkill: {
                            add: {
                                mod: {
                                    maxHandcard: function(player, num) {
                                        var num1 = player.storage.hx_kulv_2;
                                        return num + num1;
                                    },
                                },
                                forced: true,
                                sub: true,
                            },
                            add_1: {
                                mod: {
                                    attackFrom: function(from, to, distance) {
                                        return distance - from.storage.hx_kulv;
                                    },
                                },
                                forced: true,
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.6,
                            threaten: 0.5
                        },
                    },

                    "hx_qinghui": {
                        trigger: {
                            player: "phaseJieshuEnd",
                        },
                        filter: function(event, player) {
                            if (!player.countCards('h')) return false;
                            if (player.countCards('h') == 0) return false;
                            if (player.countCards("h", {
                                    name: "sha"
                                }) == 0) return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (get.distance(player, players[i], 'attack') <= 1) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (get.distance(player, players[i], 'attack') <= 1 && get.effect(players[i], {
                                        name: 'sha'
                                    }, player) >= 0) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.chooseToUse({
                                name: 'sha'
                            }, 1, '使用一张杀', true);
                            'step 1'
                            player.showHandcards();
                            if (player.countCards("h", {
                                    name: "sha"
                                }) > 0) {
                                event.finish();
                            } else {
                                player.draw();
                                player.chooseControl(["继续", "不继续"], true).set('prompt', '擎恢：是否继续展示手牌？').ai = function() {
                                    if (player.countCards("h", {
                                            name: "sha"
                                        }) > 0) {
                                        return "不继续";
                                    }
                                    return "继续";
                                };
                            }
                            'step 2'
                            if (result.control && result.control == '继续') {
                                event.goto(1);
                            } else {
                                event.finish();
                            }
                        },
                        mod: {
                            aiUseful: function(player, card) {
                                if (card.name == 'sha' && player.countCards("h", {
                                        name: "sha"
                                    }) == 1) return 20;
                            },
                        },
                        ai: {
                            expose: 0.2,
                            threaten: 1.3,
                            effect: {
                                player: function(card, player, target, current) {
                                    if (!player.isPhaseUsing()) return;
                                    if (card.name != 'sha' || player.countCards("h", {
                                            name: "sha"
                                        }) != 1) return;
                                    var cards = player.getCards("h");
                                    var useful = ai.get.useful(card);
                                    var count = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (ai.get.useful(cards[i]) >= useful) count += 1;
                                    }
                                    if (count > player.getHandcardLimit()) return;
                                    else {
                                        return 'zeroplayertarget';
                                    }
                                },
                            },
                        },
                    },

                    "hx_jiexing": {
                        forced: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        content: function() {
                            'step 0'
                            player.draw(1);
                            player.chooseToDiscard('he', get.prompt('hx_jiexing'), '节行：弃置任意张花色不同的牌', [1, 4], function(card, player) {
                                if (ui.selected.cards.length) {
                                    var suit = get.suit(card, player);
                                    for (var i of ui.selected.cards) {
                                        if (get.suit(i, player) == suit) return false;
                                    }
                                }
                                return true;
                            }, true).set('ai', lib.skill.zhiheng.check).set('complexCard', true).logSkill = 'hx_jiexing';

                            'step 1'
                            if (result.bool) {
                                player.storage.hx_jiexing_cnt = result.cards.length;
                                if (result.cards.length > 1) {
                                    player.draw(result.cards.length - 1);
                                }
                                if (result.cards.length == 4) {
                                    player.storage.hx_jiexing_pan = 1;
                                    player.storage.hx_jiexing_mo = 1;
                                    player.storage.hx_jiexing_chu = 1;
                                    player.storage.hx_jiexing_qi = 1;
                                    player.storage.hx_jiexing_damage_flag = 1;
                                    player.storage.hx_jiexing_cnt = 0;
                                    event.goto(4);
                                }
                            } else event.finish();

                            'step 2'
                            var list = [];
                            if (player.storage.hx_jiexing_pan == 0) list.push('判定');
                            if (player.storage.hx_jiexing_mo == 0) list.push('摸牌');
                            if (player.storage.hx_jiexing_chu == 0) list.push('出牌');
                            if (player.storage.hx_jiexing_qi == 0) list.push('弃牌');
                            player.chooseControl(list, true).set('prompt', '节行：选择执行的阶段').ai = function() {
                                if (player.storage.hx_jiexing_mo == 0) {
                                    if (player.countCards('h') > player.maxHp + 5 && player.storage.hx_jiexing_chu == 0 && player.storage.hx_jiexing_cnt == 1) {
                                        return "出牌";
                                    } else return "摸牌";
                                } else if (player.storage.hx_jiexing_chu == 0) {
                                    return "出牌";
                                } else if (player.storage.hx_jiexing_pan == 0) {
                                    if (player.countCards('j') > 0 && player.storage.hx_jiexing_qi == 0 && player.storage.hx_jiexing_cnt == 1) {
                                        return "弃牌";
                                    } else return "判定";
                                }
                                return "弃牌";
                            };

                            'step 3'

                            if (result.control) {
                                if (result.control == '判定') {
                                    game.log(player, "选择了判定阶段");
                                    player.storage.hx_jiexing_pan = 1;
                                } else if (result.control == '摸牌') {
                                    game.log(player, "选择了摸牌阶段");
                                    player.storage.hx_jiexing_mo = 1;
                                } else if (result.control == '出牌') {
                                    game.log(player, "选择了出牌阶段");
                                    player.storage.hx_jiexing_chu = 1;
                                } else if (result.control == '弃牌') {
                                    game.log(player, "选择了弃牌阶段");
                                    player.storage.hx_jiexing_qi = 1;
                                }
                                player.storage.hx_jiexing_cnt -= 1;
                            } else event.finish();

                            'step 4'
                            if (player.storage.hx_jiexing_cnt > 0) event.goto(2);
                            else {
                                if (player.storage.hx_jiexing_damage_flag == 1) {
                                    player.chooseTarget('选择一名角色，对其造成一点伤害').set('ai', function(target) {
                                        var player = _status.event.player;
                                        var att = get.attitude(player, target);
                                        if (att > 0) {
                                            return -1;
                                        }
                                        return target.maxHp - target.hp + 1;
                                    });
                                } else event.finish();
                            }

                            'step 5'
                            if (result.bool) {
                                result.targets[0].damage();
                            } else event.finish();

                        },
                        ai: {
                            expose: 0.3,
                            threaten: 1.0,
                        },

                        group: ["hx_jiexing_init", "hx_jiexing_j", "hx_jiexing_c", "hx_jiexing_u", "hx_jiexing_d"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "gameStart",
                                    player: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_jiexing_damage_flag = 0;
                                    player.storage.hx_jiexing_cnt = 0;
                                    player.storage.hx_jiexing_pan = 0;
                                    player.storage.hx_jiexing_mo = 0;
                                    player.storage.hx_jiexing_chu = 0;
                                    player.storage.hx_jiexing_qi = 0;
                                },
                                sub: true,
                            },
                            j: {
                                trigger: {
                                    player: "phaseJudgeBefore",
                                },
                                forced: true,
                                popup: false,
                                filter: function(event, player) {
                                    return player.storage.hx_jiexing_pan == 0;
                                },
                                content: function() {
                                    trigger.cancel();
                                },
                                sub: true,
                            },
                            c: {
                                trigger: {
                                    player: "phaseDrawBefore",
                                },
                                forced: true,
                                popup: false,
                                filter: function(event, player) {
                                    return player.storage.hx_jiexing_mo == 0;
                                },
                                content: function() {
                                    trigger.cancel();
                                },
                                sub: true,
                            },
                            u: {
                                trigger: {
                                    player: "phaseUseBefore",
                                },
                                forced: true,
                                popup: false,
                                filter: function(event, player) {
                                    return player.storage.hx_jiexing_chu == 0;
                                },
                                content: function() {
                                    trigger.cancel();
                                },
                                sub: true,
                            },
                            d: {
                                trigger: {
                                    player: "phaseDiscardBefore",
                                },
                                forced: true,
                                popup: false,
                                filter: function(event, player) {
                                    return player.storage.hx_jiexing_qi == 0;
                                },
                                content: function() {
                                    trigger.cancel();
                                },
                                sub: true,
                            },
                        },
                    },

                    "hx_zhikun": {
                        forced: true,
                        mod: {
                            globalFrom: function(from, to, current) {
                                var players = game.filterPlayer();
                                var count1 = 0;

                                for (var i = 0; i < players.length; i++) {
                                    count1 += players[i].countCards("e", {
                                        subtype: "equip1"
                                    });
                                }
                                return current - count1;
                            },
                            globalTo: function(from, to, current) {
                                var players = game.filterPlayer();
                                var count2 = 0;

                                for (var i = 0; i < players.length; i++) {
                                    count2 += players[i].countCards("e", {
                                        subtype: "equip2"
                                    });
                                }
                                return current + count2;
                            },
                            maxHandcard: function(player, num) {
                                var players = game.filterPlayer();
                                var count3 = 0;

                                for (var i = 0; i < players.length; i++) {
                                    count3 += (players[i].countCards("e", {
                                        subtype: "equip3"
                                    }) + players[i].countCards("e", {
                                        subtype: "equip4"
                                    }));
                                }
                                return num + count3;
                            },
                        },
                        trigger: {
                            source: "damageBegin",
                            player: "damageBegin",
                        },
                        content: function() {
                            var players = game.filterPlayer();
                            var count5 = 0;
                            var count6 = 0;

                            for (var i = 0; i < players.length; i++) {
                                count5 += players[i].countCards("j", {
                                    color: "black"
                                });
                                count6 += players[i].countCards("j", {
                                    color: "red"
                                });
                            }
                            if (player == trigger.source) {
                                trigger.num += count5;
                            } else {
                                trigger.num -= count6;
                            }
                        },
                        group: ["hx_zhikun_draw"],
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: "phaseDrawBegin2",
                                },
                                forced: true,
                                filter: function(event, player) {
                                    return !event.numFixed;
                                },
                                content: function() {
                                    var players = game.filterPlayer();
                                    var count4 = 0;

                                    for (var i = 0; i < players.length; i++) {
                                        count4 += players[i].countCards("e", {
                                            subtype: "equip5"
                                        });
                                    }
                                    trigger.num += count4;
                                },
                            },
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target) {
                                    if (player.hasSkillTag('jueqing', false, target)) return;
                                    if (!get.tag(card, 'damage')) return;
                                    var players = game.filterPlayer();
                                    var count6 = 0;

                                    for (var i = 0; i < players.length; i++) {
                                        count6 += players[i].countCards("j", {
                                            color: "red"
                                        });
                                    }
                                    if (count6 == 0) return;
                                    var num = get.tag(card, 'damage');
                                    if (num > count6) return 0.5;
                                    return 'zeroplayertarget';
                                },
                            },
                            damageBonus: true,
                            skillTagFilter: function(player, tag) {
                                var players = game.filterPlayer();
                                var count5 = 0;

                                for (var i = 0; i < players.length; i++) {
                                    count5 += players[i].countCards("j", {
                                        color: "black"
                                    });
                                }
                                if (tag == 'damageBonus') {
                                    if (count5 == 0) return false;
                                }
                            },
                        },
                    },

                    "hx_zhenbing": {
                        group: ["hx_zhenbing_wuqi", "hx_zhenbing_baowu", "hx_zhenbing_fangju"],
                        ai: {
                            expose: 0.2,
                            threaten: 1.3,
                        },
                    },

                    "hx_zhenbing_wuqi": {
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter"],
                        },
                        filter: function(event, player) {
                            return event.cards && event.cards.filter(function(card) {
                                return get.position(card, true) == 'd' && get.subtype(card, false) == 'equip1';
                            }).length > 0;
                        },
                        check: function(event, player) {
                            return true;
                        },
                        prompt2: function(event, player) {
                            return '每当一张装备牌进入弃牌堆后，若为武器牌，你摸一张牌';
                        },
                        content: function() {
                            var cards = trigger.cards;
                            var count = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.subtype(cards[i]) == 'equip1') count += 1;
                            }
                            player.draw(count);
                        },
                        sub: true,
                    },

                    "hx_zhenbing_baowu": {
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter"],
                        },
                        filter: function(event, player) {
                            return event.cards && event.cards.filter(function(card) {
                                return get.position(card, true) == 'd' && get.subtype(card, false) == 'equip5';
                            }).length > 0;
                        },
                        check: function(event, player) {
                            return true;
                        },
                        prompt2: function(event, player) {
                            return '每当一张装备牌进入弃牌堆后，若为宝物牌，你回复一点体力';
                        },
                        content: function() {
                            var cards = trigger.cards;
                            var count = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.subtype(cards[i]) == 'equip5') count += 1;
                            }
                            player.recover(count);
                        },
                        sub: true,
                    },

                    "hx_zhenbing_fangju": {
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter"],
                        },
                        filter: function(event, player) {
                            return event.cards && event.cards.filter(function(card) {
                                return get.position(card, true) == 'd' && get.subtype(card, false) == 'equip2';
                            }).length > 0;
                        },
                        check: function(event, player) {
                            return true;
                        },
                        prompt2: function(event, player) {
                            return '每当一张装备牌进入弃牌堆后，若为防具牌，你可以用一张基本牌替换之';
                        },
                        content: function() {
                            'step 0'
                            var cards = trigger.cards;
                            var count = 0;
                            player.storage.hx_zhenbing_candidates = [];
                            player.storage.hx_zhenbing_fangju = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.subtype(cards[i]) == 'equip2') {
                                    player.storage.hx_zhenbing_candidates.add(cards[i]);
                                    player.storage.hx_zhenbing_fangju += 1;
                                }
                            }

                            'step 1'
                            var candidates = player.storage.hx_zhenbing_candidates;
                            var card = candidates[player.storage.hx_zhenbing_fangju - 1];
                            player.showCards(card);
                            player.storage.hx_zhenbing_fangju -= 1;

                            'step 2'
                            player.chooseToDiscard("振禀：是否弃置一张基本牌，获得" + get.translation(player.storage.hx_zhenbing_candidates[player.storage.hx_zhenbing_fangju]) + "?", 1, 'h', function(card, player) {
                                return get.type(card) == 'basic';
                            }).ai = function(card) {
                                var fj = player.storage.hx_zhenbing_candidates[player.storage.hx_zhenbing_fangju];
                                if (card.name == 'du' && player.hp == 1) return -1;
                                return (player.getUseValue(fj, null, true) - player.getUseValue(card, null, true)) / Math.max(0.1, get.value(card));
                            };

                            'step 3'
                            if (result.bool) {
                                player.gain(player.storage.hx_zhenbing_candidates[player.storage.hx_zhenbing_fangju], "gain2");
                            } else event.goto(4);

                            'step 4'
                            if (player.storage.hx_zhenbing_fangju > 0) event.goto(1);
                            else event.finish();

                        },
                        sub: true,
                    },

                    "hx_zhengmin": {
                        trigger: {
                            global: ["phaseBegin"],
                        },
                        filter: function(event, player) {
                            return _status.currentPhase != player && player.countCards("he", {
                                type: "basic"
                            }) != player.countCards("he");
                        },
                        check: function(event, player) {
                            var cnt_6 = 0;
                            var cnt = 0;
                            var cards = player.getCards("he");
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) != 'basic') {
                                    cnt += 1;
                                    if (get.value(cards[i]) < 6) {
                                        cnt_6 += 1;
                                    }
                                }
                            }
                            var urgent = 0;
                            var danger = 0;
                            var current = _status.currentPhase;
                            var players = game.filterPlayer();
                            if (get.attitude(player, current) > 0) return false;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == current) continue;
                                else if (get.attitude(player, players[i]) <= 0) continue;
                                else if (players[i].hp == 1 && get.distance(current, players[i], 'attack') <= 1) {
                                    urgent += 1;
                                    danger += 1;
                                } else if ((players[i].hp == 2 && get.distance(current, players[i], 'attack') <= 1) || (players[i].hp == 1)) {
                                    danger += 1;
                                }
                            }
                            if (danger > 0 && cnt > 0) {
                                return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            var cnt = 0;
                            var cards = player.getCards("he");
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) != 'basic') {
                                    cnt += 1;
                                }
                            }
                            player.chooseTarget('指定最多为非基本牌数量的角色，此回合这些角色受到普通伤害时，防止之', [1, cnt], function(card, player, target) {
                                return true;
                            }).ai = function(target) {
                                var cnt_6 = 0;
                                var cnt = 0;
                                var cards = player.getCards("he");
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.type(cards[i]) != 'basic') {
                                        cnt += 1;
                                        if (get.value(cards[i]) < 6) {
                                            cnt_6 += 1;
                                        }
                                    }
                                }
                                var urgent = 0;
                                var danger = 0;
                                var current = _status.currentPhase;
                                var players = game.filterPlayer();
                                if (get.attitude(player, current) > 0) return false;
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i] == current) continue;
                                    else if (get.attitude(player, players[i]) <= 0) continue;
                                    else if (players[i].hp == 1 && get.distance(current, players[i], 'attack') <= 1) {
                                        urgent += 1;
                                        danger += 1;
                                    } else if ((players[i].hp == 2 && get.distance(current, players[i], 'attack') <= 1) || (players[i].hp == 1)) {
                                        danger += 1;
                                    }
                                }
                                if (cnt_6 <= urgent) {
                                    if (target.hp == 1 && get.distance(current, target, 'attack') <= 1) return get.attitude(player, target);
                                    return -1;
                                }
                                if (target.hp == 1 || (target.hp == 2 && get.distance(current, target, 'attack') <= 1)) {
                                    return get.attitude(player, target);
                                }
                                return -1;
                            }
                            'step 1'
                            if (result.bool) {
                                event.targets = result.targets;
                                player.chooseToDiscard("拯民：弃置任意数量的非基本牌", result.targets.length, 'he', function(card, player) {
                                    return get.type(card) != 'basic';
                                }, true).ai = function(card) {
                                    return 20 - get.value(card);
                                };
                            } else event.finish();
                            'step 2'
                            if (result.bool) {
                                var targets = event.targets;
                                player.line(targets, 'red');
                                for (var i = 0; i < targets.length; i++) {
                                    targets[i].addTempSkill("hx_zhengmin_damage", "phaseUseAfter");
                                    game.log(targets[i], "被指定为【拯民】的对象");
                                }


                            } else event.finish();
                        },
                        subSkill: {
                            "damage": {
                                trigger: {
                                    player: "damageBefore",
                                },
                                filter: function(event) {
                                    return !event.nature;
                                },
                                forced: true,
                                mark: true,
                                content: function() {
                                    trigger.cancel();
                                },
                                ai: {
                                    nodamage: true,
                                    effect: {
                                        target: function(card, player, target, current) {
                                            if (get.tag(card, 'damage') && !get.tag(card, 'natureDamage')) return [0, 0];
                                        },
                                    },
                                },
                                intro: {
                                    content: "已获得拯民标记，防止普通伤害",
                                },
                            }
                        },
                    },

                    "hx_xiongyu_2": {

                    },

                    "hx_xiongyu": {

                        group: ["hx_xiongyu_use", "hx_xiongyu_respond", "hx_xiongyu_record", "hx_xiongyu_record1"],

                        subSkill: {
                            use: {
                                enable: "phaseUse",
                                usable: 1,
                                filter: function(event, player) {
                                    if (player.hasSkill("hx_xiongyu_2")) return false;
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && players[i].countCards('h') > 0 && players[i].countCards("h") <= player.countCards("h")) return true;
                                    }
                                    return false;
                                },
                                filterTarget: function(card, player, target) {
                                    return target != player && target.countCards("h") > 0 && target.countCards("h") <= player.countCards("h");
                                },
                                content: function() {
                                    'step 0'
                                    player.addTempSkill('hx_xiongyu_2');
                                    game.log(player, "观看了", target, "的手牌");
                                    player.storage.xiongyu_map.set(target, target.getCards("h"));
                                    player.storage.xiongyu_unknown_map.set(target, false);
                                    player.chooseButton(['选择一张牌使用之', target.getCards('h')], false)
                                        .set('filterButton', function(button) {
                                            var card = button.link;
                                            //if(get.type(card)=='basic') return false;
                                            if (card.name == 'sha' && player.getCardUsable('sha') == 0) {
                                                return false;
                                            };
                                            var players = game.filterPlayer();
                                            for (var i = 0; i < players.length; i++) {
                                                if (player.canUse(button.link, players[i])) return true;
                                            }
                                            return false;
                                        })
                                        .set('ai', function(button) {
                                            if (player.countCards("he") == 0) return get.value(button.link) - 6;
                                            var cards = player.getCards("he");
                                            var v = 100;
                                            for (var i = 0; i < cards.length; i++) {
                                                v = Math.min(get.value(cards[i]), v);
                                            }
                                            if (v >= get.value(button.link)) return -1;
                                            return get.value(button.link);
                                        });

                                    "step 1"
                                    if (result.bool) {
                                        target.lose(result.links[0], ui.special);
                                        var cards = player.storage.xiongyu_map.get(target);
                                        if (cards.length > 0 && cards.contains(result.links[0])) {
                                            cards.remove(result.links[0]);
                                            player.storage.xiongyu_map.set(target, cards);
                                        }
                                        game.log(player, "决定使用", target, "的", result.links[0]);
                                        player.chooseUseTarget(result.links[0], false, true);
                                    } else {
                                        game.log(player, "没有使用", target, "的牌");
                                        event.finish();
                                    }

                                    "step 2"
                                    if (result.bool && target.isAlive()) {
                                        player.chooseCard('he', '交给' + get.translation(target) + '一张牌', true)
                                            .ai = function(card) {
                                                if (player.hp >= 3) return 5 - get.value(card);
                                                if (card.name == 'tao' || card.name == 'jiu') return -1;
                                                return 10 - get.value(card);
                                            };
                                    } else event.finish();

                                    "step 3"
                                    if (result.bool) {
                                        target.gain(result.cards, "gain2");
                                    } else {
                                        player.loseHp();
                                        event.finish();
                                    }
                                },
                                ai: {
                                    order: 9,
                                    expose: 0.5,
                                    result: {
                                        player: function(player, target) {
                                            if (player.countCards("he") == 0) {
                                                return player.hp - 4;
                                            }
                                            var cards = player.getCards("he");
                                            var flag = 0;
                                            for (var i = 0; i < cards.length; i++) {
                                                if (get.value(cards[i]) < 5) flag = 1;
                                            }
                                            var att = get.attitude(player, target);
                                            if (get.attitude(player, target) > 0) {
                                                if (target.hp == 1 || target.countCards('h') <= 1) {
                                                    return 0;
                                                }
                                                return target.countCards('h') - 2;
                                            } else {
                                                if (flag == 0) return -1;
                                                return target.countCards('h');
                                            }
                                        },
                                        target: function(player, target) {
                                            var att = get.attitude(player, target);
                                            if (get.attitude(player, target) > 0) {
                                                if (target.hp == 1 || target.countCards('h') <= 1) {
                                                    return -3;
                                                }
                                                return -2;
                                            } else {
                                                return target.hp - target.maxHp - 1;
                                            }
                                        },
                                    },
                                    threaten: 2.0,
                                },
                            },
                            respond: {
                                enable: ["chooseToUse", "chooseToRespond"],
                                hiddenCard: function(player, name) {
                                    if (player != _status.currentPhase && get.type(name) == 'basic') return true;
                                },
                                init: function(player) {
                                    player.storage.xiongyu_map = new Map();
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        var cards = [];
                                        player.storage.xiongyu_map.set(players[i], cards);
                                    }
                                    player.storage.xiongyu_unknown_map = new Map();
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        player.storage.xiongyu_map.set(players[i], true);
                                    }
                                },
                                filter: function(event, player) {
                                    if (player.hasSkill("hx_xiongyu_2")) return false;
                                    if (event.responded || player == _status.currentPhase) return false;
                                    var flag = 0;
                                    for (var i of lib.inpile) {
                                        if (get.type(i) == 'basic' && event.filterCard({
                                                name: i
                                            }, player, event)) flag = 1;
                                    }
                                    if (flag == 0) {
                                        return false;
                                    }
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && players[i].countCards('h') > 0 && players[i].countCards("h") >= player.countCards("h")) return true;
                                    }
                                    return false;
                                },
                                delay: false,
                                content: function() {
                                    'step 0'
                                    var evt = event.getParent(2);
                                    player.addTempSkill('hx_xiongyu_2');
                                    player.chooseTarget('雄驭：选择一名其他角色', function(card, player, target) {
                                        return target != player && target.countCards('h') > 0 && target.countCards("h") >= player.countCards("h");
                                    }).ai = function(target) {
                                        var check = false;
                                        var cards = player.storage.xiongyu_map.get(target);
                                        for (var i = 0; i < cards.length; i++) {
                                            if (cards[i].name == 'sha' && evt.filterCard({
                                                    name: 'sha'
                                                }, player, event)) check = true;
                                            if (cards[i].name == 'shan' && evt.filterCard({
                                                    name: 'shan'
                                                }, player, event)) check = true;
                                            if (cards[i].name == 'tao' && evt.filterCard({
                                                    name: 'tao'
                                                }, player, event)) check = true;
                                            if (cards[i].name == 'jiu' && evt.filterCard({
                                                    name: 'jiu'
                                                }, player, event)) check = true;
                                        }
                                        if (check == true) {
                                            if (evt.filterCard({
                                                    name: 'tao'
                                                }, player, event) && get.attitude(player, target) > 0) return 1;
                                            return 10;
                                        }
                                        if (player.storage.xiongyu_unknown_map.get(target) == false) return 0.1;
                                        if (evt.filterCard({
                                                name: 'tao'
                                            }, player, event) || evt.filterCard({
                                                name: 'jiu'
                                            }, player, event)) {
                                            if (get.attitude(player, target) > 0) return 1;
                                        }
                                        return target.countCards("h");
                                    }

                                    'step 1'

                                    if (result.bool) {
                                        event.target = result.targets[0];
                                        game.log(player, "选择了", result.targets[0]);
                                        player.storage.xiongyu_map.set(event.target, result.targets[0].getCards("h"));
                                        player.storage.xiongyu_unknown_map.set(event.target, false);
                                        player.line(result.targets, 'red');
                                        var evt = event.getParent(2);
                                        event.target = result.targets[0];
                                        player.chooseButton(['雄驭：选择要' + (evt.name == 'chooseToUse' ? '使用' : '打出') + '的牌', result.targets[0].getCards('h')]).set('filterButton', function(button) {
                                            return evt.filterCard({
                                                name: button.link.name
                                            }, player, event);
                                        }).set('ai', function(button) {
                                            return 1;
                                        });
                                    } else event.finish();

                                    'step 2'

                                    if (result.bool && result.links && result.links.length) {
                                        var evt = event.getParent(2);
                                        var cards = player.storage.xiongyu_map.get(event.target);
                                        if (cards.length > 0 && cards.contains(result.links[0])) {
                                            cards.remove(result.links[0]);
                                            player.storage.xiongyu_map.set(event.target, cards);
                                        }
                                        if (evt.name == 'chooseToUse') {
                                            event.target.lose(result.links[0], ui.special);
                                            game.broadcastAll(function(result) {
                                                lib.skill.hx_xiongyu_backup.viewAs = {
                                                    name: result.name,
                                                    cards: [result],
                                                    isCard: true
                                                };
                                                lib.skill.hx_xiongyu_backup.prompt = '选择' + get.translation(result) + '的目标';
                                            }, result.links[0]);
                                            game.log(player, "选择使用", event.target, "的", result.links[0]);
                                            evt.set('_backupevent', 'hx_xiongyu_backup');
                                            evt.backup('hx_xiongyu_backup');
                                            event.target.draw();
                                        } else {
                                            delete evt.result.skill;
                                            delete evt.result.used;
                                            event.target.lose(result.links[0], ui.special);
                                            evt.result.card = get.autoViewAs(result.links[0]);
                                            game.log(player, "选择打出", event.target, "的", result.links[0]);
                                            evt.result.cards = [result.links[0]];
                                            evt.redo();
                                            event.target.draw();
                                            return;
                                        }
                                    } else {
                                        game.log(player, "没有打出对应的牌");
                                    }
                                    var evt = event.getParent(2);
                                    evt.goto(0);
                                },
                                ai: {
                                    effect: {
                                        target: function(card, player, target, effect) {
                                            if (get.tag(card, 'respondShan')) return 0.7;
                                            if (get.tag(card, 'respondSha')) return 0.7;
                                        },
                                    },
                                    order: 11,
                                    respondShan: true,
                                    respondSha: true,
                                    result: {
                                        player: function(player) {
                                            if (_status.event.dying) return get.attitude(player, _status.event.dying);
                                            return 1;
                                        },
                                    },
                                },
                            },
                            record: {
                                trigger: {
                                    global: "drawBegin",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.xiongyu_unknown_map.set(trigger.player, true);
                                },
                            },

                            record1: {
                                trigger: {
                                    global: "loseEnd",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    var cards = trigger.cards;
                                    for (var i = 0; i < cards.length; i++) {
                                        var card = cards[i];
                                        var temp_cards = player.storage.xiongyu_map.get(trigger.player);
                                        if (temp_cards.length > 0 && temp_cards.contains(card)) {
                                            temp_cards.remove(card);
                                            player.storage.xiongyu_map.set(trigger.player, temp_cards);
                                        }
                                    }
                                },
                            },
                        },

                    },
                    "hx_xiongyu_backup": {
                        sourceSkill: 'hx_xiongyu',
                        precontent: function() {
                            delete event.result.skill;
                            event.result.cards = event.result.card.cards;
                            event.result.card = get.autoViewAs(event.result.cards[0])
                        },
                        filterCard: function() {
                            return false
                        },
                        selectCard: -1,
                    },

                    "hx_gefeng": {
                        unique: true,
                        global: "hx_gefeng_2",
                        zhuSkill: true,
                    },

                    "hx_gefeng_2": {
                        trigger: {
                            player: "phaseJieshuEnd",
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var cards = player.getCards("h");
                            var p = 0;
                            var d = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].hasZhuSkill("hx_gefeng") && get.attitude(player, players[i]) > 0) {
                                    p = 1;
                                    if (players[i].isDamaged()) d = 1;
                                }
                            }
                            if (p == 0) {
                                return false;
                            }
                            var b = 0;
                            var r = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.color(cards[i]) == 'black') b += 1;
                                else if (get.color(cards[i]) == 'red') r += 1;
                            }
                            if (b == player.countCards('h') && d == 0) return false;
                            if (b == player.countCards('h') || r == player.countCards('h')) return true;
                            return false;
                        },
                        filter: function(event, player) {
                            if (player.hasZhuSkill('hx_gefeng')) {
                                return false;
                            }
                            var check = game.hasPlayer(function(current) {
                                return current.hasZhuSkill("hx_gefeng");
                            });
                            return check && player.countCards('h') > 0 && player.getStat('damage') > 0;
                        },
                        content: function() {
                            "step 0"
                            player.showHandcards();
                            var cards = player.getCards("h");
                            var b = 0;
                            var r = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.color(cards[i]) == 'black') b += 1;
                                else if (get.color(cards[i]) == 'red') r += 1;
                            }
                            if (b != player.countCards('h') && r != player.countCards('h')) event.finish();
                            if (b == player.countCards('h')) event.c = 0;
                            else event.c = 1;
                            var str = '使一名有主公技【歌风】的角色';
                            if (r == player.countCards('h')) str += '摸一张牌';
                            else if (b == player.countCards('h')) str += '回复一点体力';
                            player.chooseTarget(str, function(card, player, target) {
                                return target.hasZhuSkill("hx_gefeng");
                            }).ai = function(target) {
                                return get.attitude(player, target);
                            }
                            "step 1"
                            if (result.bool) {
                                if (event.c == 0) {
                                    result.targets[0].recover();
                                } else result.targets[0].draw();
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                    },

                    "hx_shanhua": {
                        enable: "phaseUse",
                        filter: function(event, player) {
                            return player.storage.hx_shanhua_jn > 0;
                        },
                        content: function() {
                            'step 0'
                            player.storage.hx_shanhua_jn -= 1;
                            player.chooseTarget('善划：选择一名角色', function(card, player, target) {
                                return target.countCards('h') > 0;
                            }).ai = function(target) {
                                if (get.attitude(player, target) <= 0) return -1;
                                else if (player.storage.hx_shanhua_players.includes(target)) {
                                    return 1;
                                }
                                return Math.min(target.countCards('h'), target.hp);
                            };
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.storage.hx_shanhua_players.add(target);
                                var count = Math.min(target.countCards('h'), target.hp);
                                var cards = result.targets[0].getCards('h').randomGets(count);
                                game.log(target, "展示了" + count + "张手牌");
                                target.showCards(cards);
                                event.cars = get.cards(count);
                                game.log(target, "展示了牌堆顶等量的牌");
                                target.showCards(event.cars);
                                event.cars1 = cards;
                                event.tar = target;
                                var choice = 1;
                                target.chooseControl(choice).set('choiceList', ['获得' + get.translation(event.cars1), '获得' + get.translation(event.cars)])
                                    .set('ai', function() {
                                        if (get.value(event.cars1) > get.value(event.cars)) return 0;
                                        return 1;
                                    });
                            } else event.finish();
                            'step 2'
                            if (result.index == 0) {
                                game.log(event.tar, "保留了原手牌并弃置了另一份");
                                game.cardsDiscard(event.cars);
                            } else {
                                game.log(event.tar, "置换了手牌");
                                event.tar.gain(event.cars, "gain2");
                                event.tar.discard(event.cars1);
                            }

                            player.chooseToDiscard("是否重铸一张牌?", 1, 'he', false).ai = function(card) {
                                return 5 - get.value(card);
                            };

                            'step 3'
                            if (result.bool) {
                                player.draw();
                            }
                        },
                        group: ["hx_shanhua_init", "hx_shanhua_start"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_shanhua_jn = 1;
                                    player.storage.hx_shanhua_players = [];
                                },
                                sub: true,
                            },
                            start: {
                                trigger: {
                                    player: "useCard",
                                },
                                forced: true,
                                popup: false,
                                filter: function(event, player) {
                                    return (get.type(event.card, 'trick')) == 'trick' && event.card.isCard && _status.currentPhase == player;
                                },
                                content: function() {
                                    player.storage.hx_shanhua_jn += 1;
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            order: 4,
                            expose: 0.3,
                            result: {
                                player: 1.5,
                            },
                            threaten: 1.2,
                        },
                    },

                    "hx_chengjian": {
                        trigger: {
                            player: "changeHp",
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && get.attitude(player, players[i]) > 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.chooseTarget('善划：选择一名其他角色', function(card, player, target) {
                                return target != player;
                            }).ai = function(target) {
                                if (get.attitude(player, target) > 0) {
                                    if (target.countCards('h') <= 5) return 6 - target.countCards('h');
                                    return 1;
                                }
                                return -1;
                            };
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.cars = get.cards(1);
                                target.showCards(event.cars);
                                target.gain(event.cars, "gain2");
                                if (get.type(event.cars[0]) == 'trick' || get.type(event.cars[0]) == 'delay') {
                                    target.draw(1);
                                }
                            }
                        },
                        ai: {
                            expose: 0.6,
                            threaten: 0.5,
                        },
                    },

                    "hx_shijue": {
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter"],
                        },
                        filter: function(event, player) {
                            if (player.hasSkill("hx_shijue_2")) return false;
                            if (event.name == 'lose' && event.position != ui.discardPile) return false;
                            if ((!event.cards) || (event.cards.filter(function(card) {
                                    return get.type(card) == 'trick' || get.type(card) == 'delay';
                                }).length == 0)) {
                                return false;
                            }
                            var cards = event.cards;
                            var shou = player.getCards("he");
                            for (var i = 0; i < cards.length; i++) {
                                for (var j = 0; j < shou.length; j++) {
                                    if ((get.type(cards[i]) == 'trick' || get.type(cards[i]) == 'delay') && get.color(shou[j]) == get.color(cards[i])) return true;
                                }
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var cards = event.cards;
                            var shou = player.getCards("he");
                            for (var i = 0; i < cards.length; i++) {
                                for (var j = 0; j < shou.length; j++) {
                                    if ((get.type(cards[i]) == 'trick' || get.type(cards[i]) == 'delay') && get.color(shou[j]) == get.color(cards[i])) {
                                        if (get.value(cards[i]) - get.value(shou[j]) > 2 && (!(shou[j].name == 'du' && player.hp == 1))) return true;
                                    }
                                }
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.addTempSkill('hx_shijue_2');
                            var cards = trigger.cards;
                            var count = 0;
                            var jns = [];
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) == 'trick' || get.type(cards[i]) == 'delay') jns.add(cards[i]);
                            }
                            player.showCards(jns);
                            player.chooseButton(false, ['识决：选择一张锦囊牌获得之', jns])
                                .set('ai', function(button) {
                                    return player.getUseValue({
                                        name: button.link.name
                                    });
                                })
                                .set('filterButton', function(button) {
                                    var card = button.link;
                                    var cards = player.getCards("he");
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.color(cards[i]) == get.color(card)) return true;
                                    }
                                    return false;
                                });
                            'step 1'
                            if (result.bool) {
                                event.car = result.links[0];
                                player.chooseToDiscard("识决：选择一张相同颜色的牌", 1, 'he', true)
                                    .set('ai', function(card) {
                                        return 20 - get.value(card);
                                    })
                                    .set('filterCard', function(card) {
                                        return get.color(card) == get.color(result.links[0]);
                                    });
                            } else event.finish();
                            'step 2'
                            if (result.bool) {
                                event.car1 = result.cards[0];
                                player.chooseTarget('选择一名角色获得锦囊牌', function(card, player, target) {
                                    return player == target || target == _status.currentPhase;
                                }, true).ai = function(target) {
                                    if (get.attitude(player, target) < 0) return -1;
                                    else if (get.attitude(player, target) > 0) return 2;
                                    return 1;
                                }
                            } else event.finish();
                            'step 3'
                            if (result.bool) {
                                result.targets[0].gain(event.car, "gain2");
                                if (get.suit(event.car1) == get.suit(event.car)) {
                                    event.goto(5);
                                }
                            } else event.finish();
                            'step 4'
                            event.finish();
                            'step 5'
                            player.chooseTarget('是否选择一名其他角色获得弃置的牌？', function(card, player, target) {
                                return player != target;
                            }, false).ai = function(target) {
                                if (event.car1.name == 'du') {
                                    if (player != target && get.attitude(player, target) < 0) return 5;
                                    return -1;
                                }
                                if (player != target && get.attitude(player, target) <= 0) return -1;
                                else if (target.countCards('h') >= 4) return 1;
                                return 4 - target.countCards('h');
                            }
                            'step 6'
                            if (result.bool) {
                                result.targets[0].gain(event.car1, "gain2")
                            } else event.finish();

                        },
                        ai: {
                            expose: 0.6,
                            threaten: 0.5,
                        },
                    },

                    "hx_shijue_2": {

                    },

                    "hx_fubian": {
                        trigger: {
                            global: "phaseAfter",
                        },
                        filter: function(event, player) {
                            return _status.currentPhase != player && player.storage.hx_fubian == 0 && (player.storage.hx_fubian_damaged == 1 || player.storage.hx_fubian_gain == 1);
                        },
                        check: function(event, player) {
                            if (_status.currentPhase.next == player) return true;
                            var flag = 0;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (get.distance(player, players[i], 'attack') <= 1 && get.attitude(player, players[i]) < 0 && player.countCards('h', {
                                        name: 'sha'
                                    }) > 0) {
                                    if (players[i].countCards('h') <= 2) return true;
                                    flag = 1;
                                }
                            }
                            var cards = player.getCards("h");
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) == 'trick') {
                                    if (cards[i].name == 'wuzhong' || cards[i].name == 'zengbin') return true;
                                    if (player.getUseValue({
                                            name: cards[i].name
                                        }) >= 5 && flag == 1) return true;
                                    if (player.getUseValue({
                                            name: cards[i].name
                                        }) >= 7) return true;
                                }
                                if (cards[i].name == 'tao' && player.isDamaged()) return true;
                            }
                            return false;
                        },
                        content: function() {
                            player.storage.hx_fubian = 1;
                            player.storage.hx_fubian_isin = 1;
                            player.stat.push({
                                card: {},
                                skill: {}
                            });
                            player.phaseUse();
                        },
                        group: ["hx_fubian_init", "hx_fubian_start", "hx_fubian_damage", "hx_fubian_gain", "hx_fubian_damage", "hx_fubian_use"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: ["gameStart", "roundStart"],
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_fubian = 0;
                                },
                                sub: true,
                            },
                            start: {
                                trigger: {
                                    global: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_fubian_isin = 0;
                                    player.storage.hx_fubian_damage = 0;
                                    player.storage.hx_fubian_damaged = 0;
                                    player.storage.hx_fubian_gain = 0;
                                },
                                sub: true,
                            },
                            damaged: {
                                trigger: {
                                    player: "damageAfter",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_fubian_damaged = 1;
                                },
                                sub: true,
                            },
                            gain: {
                                trigger: {
                                    player: "gainAfter",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_fubian_gain = 1;
                                },
                                sub: true,
                            },
                            damage: {
                                trigger: {
                                    source: "damageAfter",
                                },
                                forced: true,
                                popup: false,
                                filter: function(event, player) {
                                    return player.storage.hx_fubian_isin == 1;
                                },
                                content: function() {
                                    player.storage.hx_fubian_damage = 1;
                                },
                                sub: true,
                            },
                            use: {
                                trigger: {
                                    player: "phaseUseEnd",
                                },
                                forced: true,
                                filter: function(event, player) {
                                    return player.storage.hx_fubian_isin == 1 && player.storage.hx_fubian_damage == 1;
                                },
                                content: function() {
                                    'step 0'
                                    var list = ['回复一点体力', '摸一张牌'];
                                    player.chooseControl(list, true)
                                        .set('prompt', '扶变：选择一项执行')
                                        .ai = function() {
                                            if (player.hp < player.maxHp) return "回复一点体力";
                                            return "摸一张牌";
                                        };
                                    'step 1'
                                    if (result.control) {
                                        if (result.control == "回复一点体力") {
                                            player.recover();
                                        } else player.draw();
                                    } else event.finish();
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.6,
                            threaten: 0.5,
                        },
                    },

                    "hx_yehai": {
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        filter: function(event, player) {
                            return player.countCards("h") > 0;
                        },
                        check: function(event, player) {
                            var black_cards = player.getCards("h", {
                                color: "black"
                            });
                            var red_cards = player.getCards("h", {
                                color: "red"
                            });
                            var num = 0;
                            var num1 = 0;
                            if (red_cards.length == 0 || black_cards.length == 0) return true;
                            if (red_cards.length >= 3 && black_cards.length >= 3) return false;
                            if (red_cards.length > 0) {
                                for (var i = 0; i < red_cards.length; i++) {
                                    num += Math.max(0, get.value(red_cards[i], player, 'raw'));
                                }
                                num /= red_cards.length;
                                num *= Math.min(red_cards.length, player.hp);
                            }
                            if (black_cards.length > 0) {
                                for (var i = 0; i < black_cards.length; i++) {
                                    num1 += Math.max(0, get.value(black_cards[i], player, 'raw'));
                                    num1 /= black_cards.length;
                                    num1 *= Math.min(black_cards.length, player.hp);
                                }
                            }
                            var players = game.filterPlayer();
                            var flag = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (player != players[i] && player.canUse('sha', players[i]) && get.effect(players[i], {
                                        name: 'sha'
                                    }, player) > 0) flag = 1;
                            }
                            if (red_cards.length == 0 || (red_cards.length < black_cards.length && 12 - num > 0)) return true;
                            if ((black_cards.length == 0 || (red_cards.length > black_cards.length && 7 - num1 > 0)) && flag == 1) return true;
                            if (red_cards.length == black_cards.length && (12 - num > 0 || (7 - num1 > 0 && flag == 1))) return true;
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.showHandcards();
                            var black_cards = player.getCards("h", {
                                color: "black"
                            });
                            var red_cards = player.getCards("h", {
                                color: "red"
                            });
                            event.black_cards = black_cards;
                            event.red_cards = red_cards;

                            'step 1'
                            if (event.black_cards.length < event.red_cards.length) {
                                event.choice = 'black';
                            } else if (event.black_cards.length > event.red_cards.length) {
                                event.choice = 'red';
                            } else if (event.black_cards.length == event.red_cards.length) {
                                player.chooseControl('红色', '黑色', function(event, player) {
                                    var black_cards = player.getCards("h", {
                                        color: "black"
                                    });
                                    var red_cards = player.getCards("h", {
                                        color: "red"
                                    });
                                    var num = 0;
                                    var num1 = 0;
                                    if (red_cards.length >= 3 && black_cards.length >= 3) return false;
                                    for (var i = 0; i < red_cards.length; i++) {
                                        num += Math.max(0, get.value(red_cards[i], player, 'raw'));
                                    }
                                    for (var i = 0; i < black_cards.length; i++) {
                                        num1 += Math.max(0, get.value(black_cards[i], player, 'raw'));
                                    }
                                    num /= red_cards.length;
                                    num1 /= black_cards.length;
                                    num *= Math.min(red_cards.length, player.hp);
                                    num1 *= Math.min(black_cards.length, player.hp);
                                    if (12 - num > 0) return '红色';
                                    return '黑色';
                                }).set('prompt', '谒海：选择一种颜色的牌弃置');
                            }
                            'step 2'
                            if (result.control) {
                                if (result.control == '红色') {
                                    event.choice = 'red';
                                } else event.choice = 'black';
                            }
                            'step 3'
                            if (event.choice == 'red') {
                                if (event.red_cards.length > 0) player.discard(event.red_cards);
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    var name = lib.inpile[i];
                                    var type = get.type(name);
                                    if (type == 'trick') {
                                        if (lib.filter.cardEnabled({
                                                name: name
                                            }, player)) {
                                            list.push([get.translation(type), '', name]);
                                        }
                                    }
                                }
                                var dialog = ui.create.dialog('谒海', [list, 'vcard']);
                                player.chooseButton(dialog).ai = function(button) {
                                    var effect = player.getUseValue(button.link[2]);
                                    if (effect > 0) return effect;
                                    return 0;
                                }
                            } else if (event.choice == 'black') {
                                if (event.black_cards.length > 0) player.discard(event.black_cards);
                                player.chooseTarget("谒海：选择一名角色成为【杀】的目标", function(card, player, target) {
                                    return player.canUse('sha', target);
                                }, false).ai = function(target) {
                                    return get.effect(target, {
                                        name: 'sha'
                                    }, player)
                                };
                            }

                            'step 4'
                            if (event.choice == 'red' && result.bool) {
                                player.chooseUseTarget(result.links[0][2], true, false);
                            }
                            if (event.choice == 'black' && result.bool) {
                                player.useCard({
                                    name: 'sha'
                                }, result.targets, true);
                            }


                        },
                        ai: {
                            expose: 0.6,
                            threaten: 1.2,
                        },
                    },

                    "hx_wenxian": {
                        zhuSkill: true,
                        group: ["hx_wenxian_die", "hx_wenxian_discard"],
                        subSkill: {
                            die: {
                                trigger: {
                                    global: "die",
                                },
                                filter: function(event, player) {
                                    if (!player.hasZhuSkill('hx_wenxian')) return false;
                                    return event.source && event.source != player && event.source.group != 'wei';
                                },
                                check: function(event, player) {
                                    return true;
                                },
                                content: function() {
                                    trigger.source.group = 'wei';
                                },
                                sub: true,
                            },
                            discard: {
                                trigger: {
                                    player: "discardAfter",
                                },
                                filter: function(event, player) {
                                    if (!player.hasZhuSkill('hx_wenxian')) return false;
                                    if (event.parent.name != 'hx_yehai') return false;
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && players[i].group == 'wei') return true;
                                    }
                                    return false;
                                },
                                check: function(event, player) {
                                    var players = game.filterPlayer();
                                    var good = 0;
                                    var bad = 0;
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && players[i].group == 'wei' && get.attitude(player, players[i]) > 0) good = 1;
                                        if (players[i] != player && players[i].group == 'wei' && get.attitude(player, players[i]) < 0) bad = 1;
                                    }
                                    var cards = event.cards;
                                    var gc = 0;
                                    var bc = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.value(cards[i]) >= 0) gc += 1;
                                        if (get.value(cards[i]) < 0) bc += 1;
                                    }
                                    if (gc >= 1 && good == 1 && bc <= 1) return true;
                                    if (bad == 1 && good == 1) return true;
                                    if (bad == 1 && good == 0 && (bc - gc) >= 1) return true;
                                    return false;
                                },
                                content: function() {
                                    "step 0"

                                    if (trigger.cards.length >= 1) {
                                        player.chooseCardButton('将牌分配给任意魏势力角色', true, trigger.cards, [1, trigger.cards.length]).set('ai', function(button) {
                                            if (ui.selected.buttons.length == 0) return 1;
                                            return 0;
                                        });
                                    } else {
                                        event.finish();
                                    }
                                    "step 1"
                                    if (result.bool) {
                                        for (var i = 0; i < result.links.length; i++) {
                                            trigger.cards.remove(result.links[i]);
                                        }
                                        event.togive = result.links.slice(0);
                                        player.chooseTarget('将' + get.translation(result.links) + '交给一名魏势力角色', function(card, player, target) {
                                            return target != player && target.group == 'wei';
                                        }, true).set('ai', function(target) {
                                            var att = get.attitude(_status.event.player, target);
                                            if (_status.event.enemy) {
                                                return -att;
                                            } else if (att > 0) {
                                                return att / (1 + target.countCards('h'));
                                            } else {
                                                return att / 100;
                                            }
                                        }).set('enemy', get.value(event.togive[0]) < 0);
                                    }
                                    "step 2"
                                    if (result.targets.length) {
                                        result.targets[0].gain(event.togive, 'draw');
                                        player.line(result.targets[0], 'green');
                                        game.log(result.targets[0], '获得了' + get.cnNumber(event.togive.length) + '张牌');
                                        event.goto(0);
                                    }
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.6,
                            threaten: 1.2,
                        },
                    },

                    "hx_queyue": {
                        trigger: {
                            player: ["useCard", "respond"],
                        },
                        check: function(event, player) {
                            var cards = event.cards;
                            if (cards.length == 2) {
                                if (get.color(cards[0]) == get.color(cards[1]) && get.attitude(player, _status.currentPhase) < 0) return true;
                            }
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) == 'equip') return true;
                            }
                            return false;
                        },
                        prompt2: function(event, player) {
                            return '【却月】使用或打出的两张牌中有装备牌时，你可以摸一张牌。两张牌颜色相同时，你可以弃置当前角色一张牌。';
                        },
                        filter: function(event, player) {
                            if (!event.skill) return false;
                            if (event.skill != 'hx_queyue_sha' && event.skill != 'hx_queyue_shan' && event.skill != 'hx_queyue_tao' && event.skill != 'hx_queyue_jiu') return false;
                            var cards = event.cards;
                            if (cards.length == 2) {
                                if (get.color(cards[0]) == get.color(cards[1])) return true;
                            }
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) == 'equip') return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            var cards = trigger.cards;
                            var flag = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) == 'equip') flag = 1;
                            }
                            if (flag == 1) player.draw();
                            'step 1'
                            var cards = trigger.cards;

                            if (cards.length == 2) {
                                if (get.color(cards[0]) == get.color(cards[1])) {
                                    player.line(_status.currentPhase, 'green');
                                    player.discardPlayerCard(_status.currentPhase, 'he', false);
                                }
                            }
                        },
                        ai: {
                            expose: 0.3,
                            threaten: 1.1,
                        },
                        group: ["hx_queyue_sha", "hx_queyue_shan", "hx_queyue_tao", "hx_queyue_jiu"]
                    },

                    "hx_queyue_sha": {
                        enable: ["chooseToUse", "chooseToRespond"],
                        filterCard: function(card) {
                            return true;
                        },
                        position: 'he',
                        selectCard: 2,
                        check: function(card) {
                            if (card.name == 'sha') return 0;
                            return 5 - get.value(card);
                        },
                        viewAs: {
                            name: "sha",
                        },
                        viewAsFilter: function(player) {
                            if ((!player.countCards('he')) || player.countCards('he') < 2) return false;
                        },
                        prompt: "将两张牌当杀使用或打出",
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'respondSha') && current < 0) return 0.6;
                                },
                            },
                            respondSha: true,
                            skillTagFilter: function(player) {
                                if ((!player.countCards('he')) || player.countCards('he') < 2) return false;
                            },
                            order: function() {
                                return get.order({
                                    name: 'sha'
                                }) + 0.1;
                            },
                            useful: -1,
                            value: -1,
                            canLink: function(player, target, card) {
                                if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                        target: target,
                                        card: card,
                                    }, true)) return false;
                                if (player.hasSkill('jueqing') || target.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                return true;
                            },
                            basic: {
                                useful: [5, 1],
                                value: [5, 1],
                            },
                            result: {
                                target: function(player, target, card, isLink) {
                                    var eff = function() {
                                        if (!isLink && player.hasSkill('jiu')) {
                                            if (!target.hasSkillTag('filterDamage', null, {
                                                    player: player,
                                                    card: card,
                                                    jiu: true,
                                                })) {
                                                if (get.attitude(player, target) > 0) {
                                                    return -7;
                                                } else {
                                                    return -4;
                                                }
                                            }
                                            return -0.5;
                                        }
                                        return -1.5;
                                    }();
                                    if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) return eff / 1.2;
                                    return eff;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function(card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function(card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function(card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function(card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function(card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                    },

                    "hx_queyue_shan": {
                        enable: ["chooseToRespond", "chooseToUse"],
                        filterCard: function(card) {
                            return true;
                        },
                        position: 'he',
                        selectCard: 2,
                        check: function(card) {
                            if (card.name == 'shan') return 0;
                            return 6 - get.value(card);
                        },
                        viewAs: {
                            name: "shan",
                        },
                        prompt: "将两张牌当闪使用或打出",
                        viewAsFilter: function(player) {
                            if ((!player.countCards('he')) || player.countCards('he') < 2) return false;
                        },
                        ai: {
                            respondShan: true,
                            skillTagFilter: function(player) {
                                if ((!player.countCards('he')) || player.countCards('he') < 2) return false;
                            },
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                },
                            },
                            order: 4,
                            useful: -1,
                            value: -1,
                            basic: {
                                useful: [7, 2],
                                value: [7, 2],
                            },
                            result: {
                                player: 1,
                            },
                        },
                    },

                    "hx_queyue_tao": {
                        enable: ["chooseToRespond", "chooseToUse"],
                        filterCard: function(card) {
                            return true;
                        },
                        position: 'he',
                        selectCard: 2,
                        check: function(card) {
                            if (card.name == 'tao') return 0;
                            if (_status.event.type == 'dying') return 1 / Math.max(0.1, get.value(card));
                            return 8 - get.value(card);
                        },
                        viewAs: {
                            name: "tao",
                        },
                        prompt: "将两张牌当桃使用或打出",
                        viewAsFilter: function(player) {
                            if ((!player.countCards('he')) || player.countCards('he') < 2) return false;
                        },
                        ai: {
                            skillTagFilter: function(player) {
                                if ((!player.countCards('he')) || player.countCards('he') < 2) return false;
                            },
                            threaten: 1.3,
                            save: true,
                            respondTao: true,
                            basic: {
                                order: function(card, player) {
                                    if (player.hasSkillTag('pretao')) return 5;
                                    return 2;
                                },
                                useful: [8, 6.5, 5, 4],
                                value: [8, 6.5, 5, 4],
                            },
                            result: {
                                target: 2,
                                target_use: function(player, target) {
                                    if (player == target && player.hp <= 0) return 2;
                                    if (player.hasSkillTag('nokeep', true, null, true)) return 2;
                                    var nd = player.needsToDiscard();
                                    var keep = false;
                                    if (nd <= 0) {
                                        keep = true;
                                    } else if (nd == 1 && target.hp >= 2 && target.countCards('h', 'tao') <= 1) {
                                        keep = true;
                                    }
                                    var mode = get.mode();
                                    if (target.hp >= 2 && keep && target.hasFriend()) {
                                        if (target.hp > 2 || nd == 0) return 0;
                                        if (target.hp == 2) {
                                            if (game.hasPlayer(function(current) {
                                                    if (target != current && get.attitude(target, current) >= 3) {
                                                        if (current.hp <= 1) return true;
                                                        if ((mode == 'identity' || mode == 'versus' || mode == 'chess') && current.identity == 'zhu' && current.hp <= 2) return true;
                                                    }
                                                })) {
                                                return 0;
                                            }
                                        }
                                    }
                                    if (target.hp < 0 && target != player && target.identity != 'zhu') {
                                        if (target.hp < -1 && (1 - target.hp) * 2 < player.countCards("he")) return 0;
                                    }
                                    var att = get.attitude(player, target);
                                    if (att < 3 && att >= 0 && player != target) return 0;
                                    var tri = _status.event.getTrigger();
                                    if (mode == 'identity' && player.identity == 'fan' && target.identity == 'fan') {
                                        if (tri && tri.name == 'dying' && tri.source && tri.source.identity == 'fan' && tri.source != target) {
                                            var num = game.countPlayer(function(current) {
                                                if (current.identity == 'fan') {
                                                    return current.countCards('h', 'tao');
                                                }
                                            });
                                            if (num > 1 && player == target) return 2;
                                            return 0;
                                        }
                                    }
                                    if (mode == 'identity' && player.identity == 'zhu' && target.identity == 'nei') {
                                        if (tri && tri.name == 'dying' && tri.source && tri.source.identity == 'zhong') {
                                            return 0;
                                        }
                                    }
                                    if (mode == 'stone' && target.isMin() &&
                                        player != target && tri && tri.name == 'dying' && player.side == target.side &&
                                        tri.source != target.getEnemy()) {
                                        return 0;
                                    }
                                    return 2;
                                },
                            },
                            tag: {
                                recover: 1,
                                save: 1,
                            },
                        },
                    },


                    "hx_queyue_jiu": {
                        enable: ["chooseToRespond", "chooseToUse"],
                        filterCard: function(card) {
                            return true;
                        },
                        position: 'he',
                        selectCard: 2,
                        check: function(card) {
                            if (card.name == 'jiu' || card.name == 'tao') return 0;
                            if (_status.event.type == 'dying') return 1 / Math.max(0.1, get.value(card));
                            return 4 - get.value(card);
                        },
                        viewAs: {
                            name: "jiu",
                        },
                        prompt: "将两张牌当酒使用或打出",
                        viewAsFilter: function(player) {
                            if ((!player.countCards('he')) || player.countCards('he') < 2) return false;
                        },
                        ai: {
                            skillTagFilter: function(player) {
                                return player.countCards('he') >= 2;
                            },
                            threaten: 1.1,
                            save: true,
                            basic: {
                                useful: function(card, i) {
                                    if (_status.event.player.hp > 1) {
                                        if (i == 0) return 4;
                                        return 1;
                                    }
                                    if (i == 0) return 7.3;
                                    return 3;
                                },
                                value: function(card, player, i) {
                                    if (player.hp > 1) {
                                        if (i == 0) return 5;
                                        return 1;
                                    }
                                    if (i == 0) return 7.3;
                                    return 3;
                                },
                            },
                            order: function() {
                                return get.order({
                                    name: 'sha'
                                }) + 0.2;
                            },
                            result: {
                                target: function(player, target) {
                                    if (target && target.isDying()) return 2;
                                    if (target && !target.isPhaseUsing()) return 0;
                                    if (lib.config.mode == 'stone' && !player.isMin()) {
                                        if (player.getActCount() + 1 >= player.actcount) return 0;
                                    }
                                    var shas = player.getCards('h', 'sha');
                                    if (shas.length == 0) return 0;
                                    if (shas.length > 1 && (player.getCardUsable('sha') > 1 || player.countCards('h', 'zhuge'))) {
                                        return 0;
                                    }
                                    var cards = player.getCards("he");
                                    var count = 0;
                                    var count_sha = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (cards[i].name != 'jiu' && get.value(cards[i]) < 4) {
                                            count += 1;
                                            if (cards[i].name == 'sha') count_sha += 1;
                                        }
                                    }
                                    if (count < 2) return 0;
                                    if (shas.length == 1 && count_sha == 1 && count == 2) return 0;
                                    shas.sort(function(a, b) {
                                        return get.order(b) - get.order(a);
                                    })
                                    var card;
                                    if (shas.length) {
                                        for (var i = 0; i < shas.length; i++) {
                                            if (lib.filter.filterCard(shas[i], target)) {
                                                card = shas[i];
                                                break;
                                            }
                                        }
                                    } else if (player.hasSha() && player.needsToDiscard()) {
                                        if (player.countCards('h', 'hufu') != 1) {
                                            card = {
                                                name: 'sha'
                                            };
                                        }
                                    }
                                    if (card) {
                                        if (game.hasPlayer(function(current) {
                                                return (get.attitude(target, current) < 0 &&
                                                    target.canUse(card, current, true, true) &&
                                                    !current.hasSkillTag('filterDamage', null, {
                                                        player: player,
                                                        card: card,
                                                        jiu: true,
                                                    }) &&
                                                    get.effect(current, card, target) > 0);
                                            })) {
                                            return 1;
                                        }
                                    }
                                    return 0;
                                },
                            },
                            tag: {
                                save: 1,
                            },
                        },
                    },

                    "hx_fubing": {
                        unique: true,
                        global: "hx_fubing_2",
                        zhuSkill: true,
                    },

                    "hx_fubing_2": {
                        trigger: {
                            player: "loseEnd",
                        },
                        filter: function(event, player) {
                            if (player.hasZhuSkill('hx_fubing')) {
                                return false;
                            }
                            if (player.group != 'shu') return false;
                            var check = game.hasPlayer(function(current) {
                                return current.hasZhuSkill("hx_fubing");
                            });
                            if (!check) return false;
                            for (var i = 0; i < event.cards.length; i++) {
                                if (event.cards[i].original == 'e' && get.type(event.cards[i]) == 'equip' && get.position(event.cards[i]) == 'd') return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].hasZhuSkill("hx_fubing") && get.attitude(player, players[i]) > 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            "step 0"
                            var str = '使一名有主公技【府兵】的角色获得进入弃牌堆的装备牌';
                            player.chooseTarget(str, function(card, player, target) {
                                return target.hasZhuSkill("hx_fubing");
                            }).ai = function(target) {
                                return get.attitude(player, target);
                            }
                            "step 1"
                            if (result.bool) {
                                for (i = 0; i < trigger.cards.length; i++) {
                                    if (trigger.cards[i].original == 'e' && get.type(trigger.cards[i]) == 'equip') {
                                        result.targets[0].gain(trigger.cards[i], 'gain2');
                                    }
                                }
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                    },

                    "hx_cuidi": {
                        forced: true,
                        group: ["hx_cuidi_hit", "hx_cuidi_damage"],
                        subSkill: {
                            hit: {
                                trigger: {
                                    player: "shaBegin",
                                },
                                forced: true,
                                filter: function(event, player) {
                                    return event.target.hp == event.target.maxHp;
                                },
                                content: function() {
                                    trigger.directHit = true;
                                },
                            },
                            damage: {
                                trigger: {
                                    source: "damageBegin",
                                },
                                forced: true,
                                filter: function(event) {
                                    return event.card && event.card.name == 'sha' && event.player.hp <= 1;
                                },
                                content: function() {
                                    trigger.num++;
                                },
                            }
                        },
                        ai: {
                            threaten: 1.0,
                            expose: 0.4,
                        },
                    },

                    "hx_lufu": {
                        trigger: {
                            global: "dyingAfter",
                        },
                        filter: function(event, player) {
                            return event.player != player && event.player.isAlive();
                        },
                        check: function(event, player) {
                            return get.attitude(player, event.player) < 0 && player.maxHp > 1 && get.effect(event.player, {
                                name: 'sha'
                            }, player, player) > 0;
                        },
                        content: function() {
                            player.loseMaxHp();
                            player.useCard({
                                name: 'sha',
                                isCard: true
                            }, trigger.player, false);
                        },
                        ai: {
                            threaten: 1.0,
                            expose: 0.4,
                        },
                    },

                    "hx_yanxi": {
                        enable: "phaseUse",
                        filter: function(event, player) {
                            if (!player.countCards('h')) return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && players[i].countCards('h')) return true;
                            }
                            return false;
                        },
                        filterTarget: function(card, player, target) {
                            return player != target && target.countCards('h');
                        },
                        content: function() {
                            "step 0"
                            event.target1 = target;
                            player.chooseToCompare(event.target1);
                            "step 1"
                            if (result.bool) {
                                if (!event.target1.countCards('h') || event.target1.countCards('h') == 0) event.target1.damage();
                                if (event.target1.countCards('h') && event.target1.countCards('h') > player.countCards('h')) event.target1.chooseToDiscard(true);
                            } else {
                                var evt = _status.event.getParent('phaseUse');
                                if (evt && evt.name == 'phaseUse') {
                                    evt.skipped = true;
                                    event.finish();
                                }
                            }
                        },
                        ai: {
                            order: 4,
                            result: {
                                player: function(player) {
                                    return -1;
                                },
                                target: function(player, target) {
                                    var nd = !player.needsToDiscard();
                                    if (player.hasCard(function(card) {
                                            if (get.position(card) != "h") return false;
                                            var val = get.value(card)
                                            if (nd && val < 0) return true;
                                            if (card.name == 'du' && player.hp == 1) return false;

                                            if (target.countCards('h') == 1 && !target.hasSkillTag('noh')) return (card.number >= val + 4) || val <= 4;
                                            return (card.number >= val + 5) || val <= 3;
                                        })) return -2;
                                    return 0;
                                },
                            },
                            expose: 0.4,
                            threaten: 1.2,
                        },
                    },

                    "hx_lizu": {
                        trigger: {
                            player: "compare",
                            target: "compare",
                        },
                        filter: function(event, player) {
                            if (event.iwhile) return false;
                            if (!player.countCards('h') || player.countCards('h') == 0) return false;
                            if (event.player == player) {
                                return get.color(event.card1) && (get.color(event.card1) == 'red' || get.color(event.card1) == 'black');
                            } else {
                                return get.color(event.card2) && (get.color(event.card2) == 'red' || get.color(event.card2) == 'black');
                            }
                        },
                        check: function(event, player) {
                            if (event.player == player) {
                                if (event.num1 + 3 <= event.num2 || event.num1 > event.num2) return false;
                                if (get.color(event.card1) == 'red') return player.countCards('h', {
                                    color: 'black'
                                }) > 0;
                                if (get.color(event.card1) == 'black') return player.countCards('h', {
                                    color: 'red'
                                }) > 0;
                            } else {
                                if (event.num2 + 3 <= event.num1 || event.num2 > event.num1) return false;
                                if (get.color(event.card2) == 'red') return player.countCards('h', {
                                    color: 'black'
                                }) > 0;
                                if (get.color(event.card2) == 'black') return player.countCards('h', {
                                    color: 'red'
                                }) > 0;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.chooseCard('h', '选择一张手牌展示')
                                .ai = function(card) {
                                    if (trigger.player == player) {
                                        if (get.color(trigger.card1) == 'red' && get.color(card) == 'black') return 1;
                                        if (get.color(trigger.card1) == 'black' && get.color(card) == 'red') return 1;
                                    } else {
                                        if (get.color(trigger.card2) == 'red' && get.color(card) == 'black') return 1;
                                        if (get.color(trigger.card2) == 'black' && get.color(card) == 'red') return 1;
                                    }
                                    return -1;
                                };
                            'step 1'
                            if (result.bool) {
                                player.showCards(result.cards);
                                var card = result.cards[0];
                                var flag = 0;
                                if (trigger.player == player && get.color(trigger.card1) == 'red' && get.color(card) == 'black') flag = 1;
                                if (trigger.player == player && get.color(trigger.card1) == 'black' && get.color(card) == 'red') flag = 1;
                                if (trigger.player != player && get.color(trigger.card2) == 'black' && get.color(card) == 'red') flag = 1;
                                if (trigger.player != player && get.color(trigger.card2) == 'black' && get.color(card) == 'red') flag = 1;
                                if (flag == 1) {
                                    game.log(player, '拼点牌点数+3');
                                    if (player == trigger.player) {
                                        trigger.num1 += 3;
                                    } else {
                                        trigger.num2 += 3;
                                    }
                                }
                            } else event.finish();
                        },
                        ai: {
                            expose: 0.4,
                            threaten: 0.8,
                        },
                    },


                    "hx_juechen": {
                        forced: true,
                        trigger: {
                            target: "useCardToTargeted",
                            player: "useCardToPlayered",
                        },
                        mod: {
                            targetEnabled: function(card, player, target, now) {
                                var count = Math.max(1, target.maxHp - target.hp);
                                var check = player.countCards("he") - target.countCards("h") < count;
                                if ((card.name == 'sha' || card.name == 'juedou') && check) return false;
                            },
                        },
                        filter: function(event, player) {
                            var check = false;
                            var count = Math.max(1, player.maxHp - player.hp);
                            if (player == event.player) check = true;
                            else {
                                check = event.player.countCards("he") + event.cards.length - event.target.countCards("h") >= count;
                            }
                            return (event.card.name == 'sha' || event.card.name == 'juedou') && check;
                        },
                        content: function() {
                            'step 0'
                            var count = Math.max(1, player.maxHp - player.hp);
                            if (trigger.player == player && trigger.target.countCards("he") - trigger.cards.length - trigger.player.countCards("h") < count) event.goto(1);
                            else {
                                player.draw(1);
                                event.finish();
                            }
                            'step 1'
                            game.log(player, "令", trigger.target, "无法响应", trigger.card);
                            trigger.getParent().directHit.push(trigger.target);
                        },
                        ai: {
                            effect: {
                                player: function(card, player, target, current) {
                                    if (card.name != 'sha' && card.name != 'juedou') return;
                                    var count = Math.max(1, player.maxHp - player.hp);
                                    var check = target.countCards("he") - player.countCards("h") >= count;
                                    if (!check) return;
                                    return [1, 1];
                                },
                                target: function(card, player, target, current) {
                                    if (card.name != 'sha' && card.name != 'juedou') return;
                                    if (!target.hasFriend()) return;
                                    var count = Math.max(1, target.maxHp - target.hp);
                                    var check = player.countCards("he") - target.countCards("h") >= count;
                                    if (!check) return;
                                    return [1, 1];
                                },
                            },
                            "directHit_ai": true,
                            skillTagFilter: function(player, tag, arg) {
                                if (get.attitude(player, arg.target) > 0 || (arg.card.name != 'sha' && arg.card.name != 'juedou')) return false;
                                var count = Math.max(1, player.maxHp - player.hp);
                                return arg.target.countCards("he") - player.countCards("h") < count;
                            },
                        }
                    },

                    "hx_zhongchi": {
                        content: function() {
                            'step 0'
                            player.storage.hx_zhongchi_wuqi = 0;
                            player.storage.hx_zhongchi_fangju = 0;
                            player.storage.hx_zhongchi_zuoji = 0;
                            player.storage.hx_zhongchi_baowu = 0;
                            player.addSkill("hx_zhongchi_fangju");
                            player.addSkill("hx_zhongchi_zuoji");
                            player.awakenSkill(event.name);
                            player.storage[event.name] = true;
                            event.current = player.next;
                            'step 1'
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                //if(players[i] == player) continue;
                                var cards = players[i].getCards('e');
                                for (var j = 0; j < cards.length; j++) {
                                    var card = cards[j];
                                    if (get.subtype(card) == 'equip1') player.storage.hx_zhongchi_wuqi += 1;
                                    if (get.subtype(card) == 'equip2') player.storage.hx_zhongchi_fangju += 1;
                                    if (get.subtype(card) == 'equip3') player.storage.hx_zhongchi_zuoji += 1;
                                    if (get.subtype(card) == 'equip4') player.storage.hx_zhongchi_zuoji += 1;
                                    if (get.subtype(card) == 'equip5') player.storage.hx_zhongchi_baowu += 1;
                                }
                                players[i].discard(players[i].getCards('e'));
                            }
                            'step 2'
                            player.disableEquip(1);
                            player.disableEquip(2);
                            player.disableEquip(3);
                            player.disableEquip(4);
                            player.disableEquip(5);
                            if (player.storage.hx_zhongchi_wuqi > 0) player.draw(player.storage.hx_zhongchi_wuqi);
                            if (player.storage.hx_zhongchi_baowu > 0) player.recover(player.storage.hx_zhongchi_baowu);
                            player.syncStorage("hx_zhongchi_zuoji");
                            player.markSkill("hx_zhongchi_zuoji")
                            player.syncStorage("hx_zhongchi_fangju");
                            player.markSkill("hx_zhongchi_fangju")
                        },
                        skillAnimation: true,
                        animationColor: "wood",
                        juexingji: true,
                        unique: true,
                        trigger: {
                            global: "phaseZhunbeiBegin",
                        },
                        filter: function(event, player) {
                            return player.hp <= 1 && !player.storage.hx_zhongchi;
                        },
                        forced: true,
                        ai: {
                            threaten: function(player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function(card, player, target) {
                                    if (!target.hasFriend()) return;
                                    var count = 0;
                                    var players = game.filterPlayer();
                                    var damaged = target.maxHp - target.hp;
                                    for (var i = 0; i < players.length; i++) {
                                        //if(players[i] == target) continue;
                                        var att = get.attitude(target, players[i]);
                                        var cards = players[i].getCards('e');
                                        for (var j = 0; j < cards.length; j++) {
                                            var card = cards[j];
                                            if (get.subtype(card) == 'equip1') {
                                                if (att > 0) count -= 1;
                                                else if (att < 0) count += 1;
                                                count += 1;
                                            }
                                            if (get.subtype(card) == 'equip2') {
                                                if (att > 0) count -= 1;
                                                else if (att < 0) count += 1;
                                                count += 0.5;
                                            }
                                            if (get.subtype(card) == 'equip3') {
                                                if (att > 0) count -= 1;
                                                else if (att < 0) count += 1;
                                                count += 0.5;
                                            }
                                            if (get.subtype(card) == 'equip4') {
                                                if (att > 0) count -= 1;
                                                else if (att < 0) count += 1;
                                                count += 0.5;
                                            }
                                            if (get.subtype(card) == 'equip5') {
                                                if (att > 0) count -= 1;
                                                else if (att < 0) count += 1;
                                                if (damaged > 0) {
                                                    damaged -= 1;
                                                    count += 2;
                                                }
                                            }
                                        }
                                    }
                                    if (count >= 3 && get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target) return [0.5, 1];
                                },
                            },
                        },
                    },

                    "hx_zhongchi_fangju": {
                        forced: true,
                        popup: false,
                        marktext: "驰",
                        mark: true,
                        intro: {
                            content: "手牌上限增加#张",
                        },
                        mod: {
                            maxHandcard: function(player, num) {
                                return num + player.storage.hx_zhongchi_fangju;
                            },
                        },
                    },

                    "hx_zhongchi_zuoji": {
                        forced: true,
                        popup: false,
                        charlotte: true,
                        marktext: "驰",
                        mark: true,
                        intro: {
                            content: "攻击距离增加#点",
                        },
                        mod: {
                            attackFrom: function(from, to, distance) {
                                return distance - from.storage.hx_zhongchi_zuoji;
                            },
                        },
                    },

                    "hx_qijia": {
                        trigger: {
                            player: "phaseJieshuBegin",
                        },
                        frequent: true,
                        filter: function(event, player) {
                            return game.hasPlayer(function(current) {
                                return current.countCards('ej');
                            });
                        },
                        content: function() {
                            'step 0'
                            player.judge(function(card) {
                                var color = get.color(card);
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    var judges = players[i].getCards("j");
                                    var equips = players[i].getCards("e");
                                    if (get.attitude(player, players[i]) > 0) {
                                        for (var j = 0; j < judges.length; j++) {
                                            if (get.color(judges[j]) == color) return 2;
                                        }
                                    }
                                    if (get.attitude(player, players[i]) < 0) {
                                        for (var j = 0; j < equips.length; j++) {
                                            if (get.color(equips[j]) == color) return 1;
                                        }
                                    }
                                }
                                return 0;
                            });
                            'step 1'
                            if (result.color) {
                                event.card = result;
                                player.chooseTarget('请选择一名角色，弃置其场上一张与判定牌颜色相同的牌', function(card, player, target) {
                                    if (!target.countCards('ej') || target.countCards('ej') == 0) return false;
                                    var cards = target.getCards("ej");
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.color(cards[i]) == get.color(event.card)) return true;
                                    }
                                    return false;
                                }).set('ai', function(target) {
                                    var player = _status.event.player;
                                    var att = get.attitude(player, target);

                                    if (att > 0) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? {
                                                name: js[0].viewAs
                                            } : js[0];
                                            var flag = 0;
                                            for (var i = 0; i < js.length; i++) {
                                                if (get.color(js[i]) == get.color(event.card)) flag = 1;
                                            }
                                            if (flag == 1 && (jj.name == 'guohe' || js.length > 1 || get.effect(target, jj, target, player) < 0)) {
                                                return 2 * att;
                                            }
                                        }
                                        if (target.getEquip('baiyin') && target.isDamaged() &&
                                            get.recoverEffect(target, player, player) > 0 && get.color(event.card) == 'black') {
                                            if (target.hp == 1 && !target.hujia) return 1.6 * att;
                                            if (target.hp == 2) return 0.01 * att;
                                            return 0;
                                        }
                                    }
                                    var es = target.getCards('e');
                                    var noe = target.hasSkillTag('noe');
                                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged() && get.color(event.card) == 'black');
                                    if (noe || noe2) return 0;
                                    if (att <= 0 && !es.length) return 1.5 * att;
                                    var flag = 0;
                                    for (var i = 0; i < es.length; i++) {
                                        if (get.color(es[i]) == get.color(event.card)) flag = 1;
                                    }
                                    if (flag == 1) return -1.5 * att;
                                    return 0;
                                });
                            } else event.finish();
                            'step 2'
                            if (result.bool) {
                                event.target = result.targets[0];
                                event.target.addExpose(0.1);
                                player.logSkill('hx_qijia', event.target);
                                game.delayx();
                            } else event.finish();
                            'step 3'
                            if (event.target) {
                                player.discardPlayerCard(event.target, "ej").set('filterButton', function(button) {
                                    return get.color(button.link) == get.color(event.card);
                                }).set('ai', function(button) {
                                    var tar = event.target;
                                    var att = get.attitude(player, tar);
                                    if (att > 0) {
                                        if (get.type(button.link) == 'delay' && button.link.name != 'XS_mantian') return 10;
                                        return -1;
                                    } else {
                                        if (get.type(button.link) == 'delay' && button.link.name != 'XS_mantian') return -1;
                                        return 1 + get.value(button.link);
                                    }
                                });
                            } else event.finish();
                            'step 4'
                            if (result.bool && game.hasPlayer(function(current) {
                                    return current.countCards('ej');
                                })) event.goto(0);
                            else event.finish();
                        },
                        ai: {
                            expose: 0.6,
                            threaten: 1.5,
                        },
                    },

                    "hx_jiaogong": {
                        trigger: {
                            player: "judgeEnd",
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            if (event.result.card.name == 'du') {
                                var flag = 0;
                                var cards = player.getCards("he");
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.value(cards[i]) < 5 && get.color(event.result.card) == get.color(cards[i])) flag = 1;
                                }
                                for (var i = 0; i < players.length; i++) {
                                    if (get.attitude(player, players[i]) < 0 && flag == 1) return true;
                                }
                                return false;
                            }
                            var flag = 0;
                            var cards = player.getCards("he");
                            var flag1 = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.value(cards[i]) < 7 && get.color(event.result.card) == get.color(cards[i])) {
                                    if (event.result.card.name == 'shan' || get.type(event.result.card) == 'equip') flag = 1;
                                }
                                if (event.result.card.name != 'shan' && get.type(event.result.card) != 'equip' && get.color(event.result.card) == get.color(cards[i])) {
                                    if (get.value(cards[i]) < 5 && get.value(cards[i]) < get.value(event.result.card)) flag1 = 1;
                                }
                            }
                            for (var i = 0; i < players.length; i++) {
                                if (get.attitude(player, players[i]) < 0 && (flag == 1 || flag1 == 1)) return true;
                            }
                            return false;
                        },
                        filter: function(event, player) {
                            if (!get.position(event.result.card, true) || get.position(event.result.card, true) != 'o') return false;
                            var card = event.result.card;
                            var cards = player.getCards("he");
                            for (var i = 0; i < cards.length; i++) {
                                if (get.color(cards[i]) == get.color(card)) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.chooseCardTarget({
                                filterCard: function(card) {
                                    return get.color(card) == get.color(trigger.result.card);
                                },
                                position: 'he',
                                selectCard: 1,
                                selectTarget: 1,
                                filterTarget: function(card, player, target) {
                                    return true;
                                },
                                ai1: function(card) {
                                    var card1 = trigger.result.card;
                                    if (card1.name == 'shan' || get.type(card1) == 'equip') {
                                        return 7 - get.value(card);
                                    }
                                    return 5 - get.value(card);
                                },
                                ai2: function(target) {
                                    var card1 = trigger.result.card;
                                    if (card1.name == 'du') return -get.attitude(player, target);
                                    else if (get.attitude(player, target) < 0) return -1;
                                    else if (get.attitude(player, target) == 0) return 0.1;
                                    else if (target.countCards("h") <= 2 && (!target.hasJudge('lebu'))) return 2;
                                    return 1;
                                },
                                prompt: '徼功：弃置一张与判定牌颜色相同的牌，然后令一名角色获得判定牌'
                            });
                            'step 1'
                            if (result.bool) {
                                player.discard(result.cards);
                                result.targets[0].gain(trigger.result.card, 'gain2');
                                var card1 = trigger.result.card;
                                if (card1.name == 'shan' || get.type(card1) == 'equip') {
                                    player.draw(2);
                                }
                            }
                        },
                        ai: {
                            expose: 0.6,
                            threaten: 1.5,
                        },
                    },

                    "hx_jueyun": {
                        trigger: {
                            global: "judgeBegin",
                        },
                        filter: function(event, player) {
                            return !event.directresult && player.storage.hx_jueyun == 1;
                        },
                        check: function(event, player) {

                            var tar = _status.currentPhase;
                            var players = game.filterPlayer();
                            if (get.attitude(player, tar) == 0) return false;
                            else if (get.attitude(player, tar) > 0) {
                                if (event.card && (event.card.name == 'fulei' || event.card.name == 'shandian')) {
                                    for (var i = 0; i < players.length; i++) {
                                        if (get.attitude(players[i], tar) < 0 && players[i].hasSkillTag("rejudge")) return true;
                                    }
                                    return false;
                                } else if (event.card && (event.card.name == 'lebu')) {
                                    if (tar.countCards("h") <= tar.hp - 2) return false;
                                    return true;
                                } else if (event.card && (event.card.name == 'bingliang' || event.card.name == 'caomu')) {
                                    if (tar.countCards("h") > tar.hp) return false;
                                    return true;
                                }
                            } else if (get.attitude(player, tar) < 0) {
                                if (event.card && (event.card.name == 'fulei' || event.card.name == 'shandian')) {
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && get.attitude(players[i], tar) > 0 && players[i].hasSkillTag("rejudge")) return false;
                                    }
                                    return true;
                                } else if (event.card && (event.card.name == 'lebu')) {
                                    if (tar.countCards("h") > tar.hp) return true;
                                    return false;
                                } else if (event.card && (event.card.name == 'bingliang' || event.card.name == 'caomu')) {
                                    if (tar.countCards("h") < tar.hp - 2) return true;
                                    return false;
                                }
                            }
                            var tempcard = false,
                                temp = -Infinity,
                                temp1 = +Infinity;
                            for (var i = 0; i < ui.cardPile.childElementCount; i++) {
                                var card = ui.cardPile.childNodes[i];
                                var temp2 = event.judge(card);
                                if (temp2 > temp) {
                                    tempcard = card;
                                    temp = temp2;
                                }
                                if (temp2 < temp1) {
                                    temp1 = temp2;
                                }
                            }
                            for (var i = 0; i < ui.discardPile.childElementCount; i++) {
                                var card = ui.discardPile.childNodes[i];
                                var temp2 = event.judge(card);
                                if (temp2 > temp) {
                                    tempcard = card;
                                    temp = temp2;
                                }
                                if (temp2 < temp1) {
                                    temp1 = temp2;
                                }
                            }
                            //if(get.attitude(player,tar)>0&&temp>=2) return true;
                            //if(get.attitude(player,tar)<0&&temp1<=-2) return true;
                            if (get.attitude(player, tar) != 0 && temp - temp1 >= 2) return true;
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.storage.hx_jueyun -= 1;
                            var list = [];


                            for (var i = 0; i < ui.cardPile.childElementCount; i++) {
                                var card = ui.cardPile.childNodes[i];
                                list.add(card);
                            }
                            for (var i = 0; i < ui.discardPile.childElementCount; i++) {
                                var card = ui.discardPile.childNodes[i];
                                list.add(card);
                            }
                            player.chooseCardButton('选择一张牌作为判定牌', list, true)
                                .set('ai', function(button) {
                                    if (get.attitude(player, _status.currentPhase) >= 0) return 100 + trigger.judge(button.link);
                                    return 100 - trigger.judge(button.link);

                                })
                                .set('filterButton', function(button) {
                                    return true;
                                });
                            'step 1'
                            if (result.bool) {
                                trigger.directresult = result.links[0];
                                trigger.noJudgeTrigger = true;
                            }
                            game.updateRoundNumber();
                        },
                        group: ["hx_jueyun_init"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: ["gameStart", "roundStart"],
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_jueyun = 1;
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.2,
                            rejudge: true,
                            tag: {
                                rejudge: 1,
                            },
                        },
                    },

                    "hx_qianyin": {
                        trigger: {
                            player: "damageBefore",
                        },
                        filter: function(event) {
                            var card = event.card;
                            if (card && card.name == 'sha') return false;
                            return true;
                        },
                        forced: true,
                        content: function() {
                            trigger.cancel();
                        },

                        ai: {
                            nodamage: true,
                            notrick: true,
                            nofire: true,
                            nothunder: true,
                            effect: {
                                target: function(card, player, target, current) {
                                    if (card.name == 'tiesuo') return 'zerotarget';
                                    if ((get.type(card) == 'trick' || get.type(card) == 'delay') && get.tag(card, 'damage')) return 'zeroplayertarget';
                                },
                            },
                        },

                        group: ["hx_qianyin_sha"],
                        subSkill: {
                            sha: {
                                mod: {
                                    targetEnabled: function(card, player, target, now) {
                                        if (card.name == 'sha' && get.suit(card) != 'club') return false;
                                    },
                                },
                                sub: true,
                            },
                        },
                    },

                    "hx_tianming": {
                        group: ["hx_tianming_end"],
                        subSkill: {
                            end: {
                                trigger: {
                                    player: "phaseJieshuEnd",
                                },
                                forced: true,
                                filter: function(event, player) {
                                    return true;
                                },
                                content: function() {
                                    "step 0"
                                    if (!player.storage.hx_tianming || !player.storage.hx_tianming.length) {
                                        player.recover();
                                        event.goto(7);
                                    }
                                    event.num1 = player.storage.hx_tianming.length;
                                    switch (event.num1) {
                                        case 4:
                                            event.str = '对一名其他角色造成一点伤害';
                                            event.goto(1);
                                            break;
                                        case 3:
                                            event.str = '移动场上的一张牌';
                                            if (game.countPlayer(function(current) {
                                                    return current.countCards('ej') > 0
                                                }) != 0) event.goto(3);
                                            else event.goto(7);
                                            break;
                                        case 2:
                                            event.str = '弃置一名其他角色区域内的一张牌';
                                            if (game.countPlayer(function(current) {
                                                    return current != player && current.countDiscardableCards(player, 'hej') > 0
                                                }) != 0) event.goto(4);
                                            else event.goto(7);
                                            break;
                                        case 1:
                                            player.draw(1);
                                            event.goto(7);
                                            break;
                                    }
                                    "step 1"
                                    player.chooseTarget(get.prompt('hx_tianming'), event.str, function(card, player, target) {
                                        return player != target;
                                    }).set('ai', function(target) {
                                        var eff = get.damageEffect(target, player, player) + 100;
                                        return eff;
                                    });
                                    "step 2"
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hx_tianming', target);
                                        player.line(target, 'blue');
                                        target.damage(player, 1, 'nocard');
                                        event.goto(7);
                                    } else event.finish();
                                    "step 3"
                                    player.moveCard(true);
                                    event.goto(7);
                                    "step 4"
                                    player.chooseTarget(get.prompt('hx_tianming'), '选择一名其他角色，弃置其区域内的一张牌', 1, function(card, player, target) {
                                        return target != player && target.countDiscardableCards(player, 'hej') > 0;
                                    }, true).ai = function(target) {
                                        var player = _status.event.player;
                                        return get.effect(target, {
                                            name: 'guohe'
                                        }, player, player) + 100;
                                    };
                                    "step 5"
                                    if (result.bool) {
                                        event.target = result.targets[0];
                                        player.line(result.targets, 'green');
                                        player.logSkill('hx_tianming', result.targets);
                                    }
                                    "step 6"
                                    player.discardPlayerCard(event.target, 'hej', true);
                                    "step 7"
                                    player.storage.hx_tianming = [];
                                    player.unmarkSkill('hx_tianming');

                                },
                                sub: true,
                            },
                        },
                        init: function(player) {
                            player.storage.hx_tianming = [];
                        },
                        trigger: {
                            player: "useCardEnd",
                        },
                        forced: true,
                        popup: false,
                        filter: function(event, player) {
                            if (_status.currentPhase != player) return false;
                            for (var i = 0; i < event.cards.length; i++) {
                                var suit = get.suit(event.cards[i]);
                                if (suit && !player.storage.hx_tianming.contains(suit)) return true;
                            }
                            return false;
                        },
                        marktext: "天",
                        intro: {
                            content: function(storage) {
                                if (!storage.length) {
                                    return '未使用过有花色的牌';
                                } else {
                                    var str = '已使用过的花色有：' + get.translation(storage);
                                    return str;
                                }
                            },
                        },
                        content: function() {
                            for (var i = 0; i < trigger.cards.length; i++) {
                                var suit = get.suit(trigger.cards[i]);
                                if (suit) player.storage.hx_tianming.add(suit)
                            }
                            player.markSkill('hx_tianming');
                            player.syncStorage('hx_tianming');
                        },
                        ai: {
                            expose: 0.3,
                            threaten: 1.8,
                        },
                    },

                    "hx_dingguo": {
                        trigger: {
                            global: "dyingAfter",
                        },
                        filter: function(event, player) {
                            if (event.player == player && player.isAlive()) return true;
                            else {
                                if (event.source && event.source == player) return true;
                            }
                            return false;
                        },
                        skillAnimation: true,
                        animationColor: "thunder",
                        unique: true,
                        juexingji: true,
                        forced: true,
                        content: function() {
                            player.loseMaxHp();
                            player.draw(2);
                            player.awakenSkill("hx_dingguo");
                            player.addSkill("rezhiheng");
                        },
                        ai: {
                            expose: 0.3,
                            threaten: 1.8,
                        },
                    },

                    "hx_guangna": {
                        unique: true,
                        global: "hx_guangna2",
                        zhuSkill: true,
                    },

                    "hx_guangna2": {

                        enable: "phaseUse",
                        discard: false,
                        lose: false,
                        delay: false,
                        line: true,
                        direct: true,
                        clearTime: true,
                        prepare: function(cards, player, targets) {
                            targets[0].logSkill('hx_guangna');
                        },
                        prompt: function() {
                            var player = _status.event.player;
                            var list = game.filterPlayer(function(target) {
                                return target != player && target.hasZhuSkill('hx_guangna', player);
                            });
                            var str = '将一张非基本牌交给' + get.translation(list);
                            if (list.length > 1) str += '中的一人';
                            return str;
                        },
                        filter: function(event, player) {
                            if (player.group != 'wei') return false;
                            if (player.countCards('h', lib.skill.hx_guangna2.filterCard) == 0) return false;
                            return game.hasPlayer(function(target) {
                                return target != player && target.hasZhuSkill('hx_guangna', player) && !target.hasSkill('hx_guangna3');
                            });
                        },
                        filterCard: function(card) {
                            var type = get.type(card);
                            return type != 'basic';
                        },
                        log: false,
                        visible: true,
                        filterTarget: function(card, player, target) {
                            return target != player && target.hasZhuSkill('hx_guangna', player) && !target.hasSkill('hx_guangna3');
                        },
                        content: function() {
                            target.gain(cards, player, 'giveAuto');
                            target.addTempSkill('hx_guangna3', 'phaseUseEnd');
                        },
                        ai: {
                            expose: 0.3,
                            order: 1,
                            result: {
                                target: 5,
                            },
                        },

                    },
                    "hx_guangna3": {

                    },

                    "hx_zunwei": {
                        forced: true,
                        trigger: {
                            global: "loseAfter",
                        },
                        init: function(player) {
                            player.storage.hx_zunwei_numbers = [5, 9];
                        },
                        filter: function(event, player) {
                            if (event.type != 'discard') return false;
                            if (event.player == player) return false;
                            for (var i = 0; i < event.cards2.length; i++) {
                                if (player.storage.hx_zunwei_numbers.contains(event.cards2[i].number) || (event.player.hasSkill("hx_tianen_1") && event.cards2[i].number == 1)) {
                                    var card = event.cards2[i];
                                    var check = get.position(event.cards2[i], true) == 'd';
                                    if (event.player.hasSkill("hx_tianen_5") && event.cards2[i].number == 5) check = false;
                                    if (check) return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            for (var i = 0; i < trigger.cards2.length; i++) {
                                var card = trigger.cards2[i];
                                var check = get.position(trigger.cards2[i], true) == 'd';
                                if (trigger.player.hasSkill("hx_tianen_1") && trigger.cards2[i].number == 1) player.gain(card, 'gain2', 'log');
                                else if (trigger.player.hasSkill("hx_tianen_5") && trigger.cards2[i].number == 5) continue;
                                else if (player.storage.hx_zunwei_numbers.contains(trigger.cards[i].number) && check) player.gain(card, 'gain2', 'log');
                            }
                        },
                        ai: {
                            expose: 0.2,
                            threaten: 1.1,
                        },
                        global: ["hx_zunwei_debuff"],
                    },

                    "hx_zunwei_debuff": {
                        forced: true,
                        mod: {
                            cardEnabled: function(card, player) {
                                if (!game.hasPlayer(function(current) {
                                        return current.hasSkill('hx_zunwei');
                                    })) return false;
                                if (player.hasSkill('hx_zunwei')) return;
                                if (player.hasSkill("hx_tianen_1") && card.number == 1) return false;
                                if (player.hasSkill("hx_tianen_5") && card.number == 5) return;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i] == player) continue;
                                    if (!players[i].hasSkill("hx_zunwei")) continue;
                                    if (players[i].storage.hx_zunwei_numbers.contains(card.number)) return false;
                                }
                                return;
                            },
                            cardUsable: function(card, player) {
                                if (!game.hasPlayer(function(current) {
                                        return current.hasSkill('hx_zunwei');
                                    })) return false;
                                if (player.hasSkill('hx_zunwei')) return;
                                if (player.hasSkill("hx_tianen_1") && card.number == 1) return false;
                                if (player.hasSkill("hx_tianen_5") && card.number == 5) return;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i] == player) continue;
                                    if (!players[i].hasSkill("hx_zunwei")) continue;
                                    if (players[i].storage.hx_zunwei_numbers.contains(card.number)) return false;
                                }
                                return;
                            },
                            cardRespondable: function(card, player) {
                                if (!game.hasPlayer(function(current) {
                                        return current.hasSkill('hx_zunwei');
                                    })) return false;
                                if (player.hasSkill('hx_zunwei')) return;
                                if (player.hasSkill("hx_tianen_1") && card.number == 1) return false;
                                if (player.hasSkill("hx_tianen_5") && card.number == 5) return;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i] == player) continue;
                                    if (!players[i].hasSkill("hx_zunwei")) continue;
                                    if (players[i].storage.hx_zunwei_numbers.contains(card.number)) return false;
                                }
                                return;
                            },
                            cardSavable: function(card, player) {
                                if (!game.hasPlayer(function(current) {
                                        return current.hasSkill('hx_zunwei');
                                    })) return false;
                                if (player.hasSkill('hx_zunwei')) return;
                                if (player.hasSkill("hx_tianen_1") && card.number == 1) return false;
                                if (player.hasSkill("hx_tianen_5") && card.number == 5) return;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i] == player) continue;
                                    if (!players[i].hasSkill("hx_zunwei")) continue;
                                    if (players[i].storage.hx_zunwei_numbers.contains(card.number)) return false;
                                }
                                return;
                            },
                            aiValue: function(player, card, num) {
                                if (!game.hasPlayer(function(current) {
                                        return current.hasSkill('hx_zunwei');
                                    })) return;
                                if (player.hasSkill('hx_zunwei')) return;
                                if (player.hasSkill("hx_tianen_1") && card.number == 1) return -1;
                                if (player.hasSkill("hx_tianen_5") && card.number == 5) return;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i] == player) continue;
                                    if (!players[i].hasSkill("hx_zunwei")) continue;
                                    if (players[i].storage.hx_zunwei_numbers.contains(card.number)) return -1;
                                }
                                return;
                            },
                            aiUseful: function(player, card, num) {
                                if (!game.hasPlayer(function(current) {
                                        return current.hasSkill('hx_zunwei');
                                    })) return;
                                if (player.hasSkill('hx_zunwei')) return;
                                if (player.hasSkill("hx_tianen_1") && card.number == 1) return -1;
                                if (player.hasSkill("hx_tianen_5") && card.number == 5) return;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i] == player) continue;
                                    if (!players[i].hasSkill("hx_zunwei")) continue;
                                    if (players[i].storage.hx_zunwei_numbers.contains(card.number)) return -1;
                                }
                                return;
                            },
                        },
                    },

                    "hx_zuigong": {
                        unique: true,
                        enable: "chooseToUse",
                        mark: true,
                        skillAnimation: true,
                        animationStr: "罪躬",
                        limited: true,
                        animationColor: "orange",
                        init: function(player) {
                            player.storage.hx_zuigong = false;
                        },
                        filter: function(event, player) {
                            if (player.storage.hx_zuigong) return false;
                            if (event.type == 'dying') {
                                if (player != event.dying) return false;
                                return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('hx_zuigong');
                            player.storage.hx_zuigong = true;
                            player.discard(player.getCards('hej'));
                            'step 1'
                            player.link(false);
                            'step 2'
                            player.turnOver(false);
                            'step 3'
                            player.draw(4);
                            'step 4'
                            if (player.hp < 1) {
                                player.recover(1 - player.hp);
                            }
                            'step 5'
                            if (player.storage.hx_zunwei_numbers.contains(9)) {
                                player.storage.hx_zunwei_numbers.remove(9);
                            }
                        },
                        ai: {
                            order: 1,
                            skillTagFilter: function(player, arg, target) {
                                if (player != target || player.storage.hx_zuigong) return false;
                            },
                            save: true,
                            result: {
                                player: function(player) {
                                    if (player.hp <= 0) return 10;
                                    if (player.hp <= 2 && player.countCards('he') <= 1) return 10;
                                    return 0;
                                },
                            },
                            threaten: function(player, target) {
                                if (!target.storage.hx_zuigong) return 0.6;
                            },
                        },
                        intro: {
                            content: "limited",
                        },
                    },

                    "hx_tianen": {
                        zhuSkill: true,
                        trigger: {
                            global: "phaseBegin",
                        },
                        filter: function(event, player) {
                            if (!player.hasZhuSkill('hx_tianen')) return false;
                            if (_status.currentPhase == player) return false;
                            if (_status.currentPhase.group != 'shu') return false;
                            return true;
                        },
                        check: function(event, player) {
                            return get.attitude(player, _status.currentPhase) != 0;
                        },
                        content: function() {
                            'step 0'
                            var choice = 1;
                            player.chooseControl(choice).set('choiceList', ['令“尊威”于此回合增加点数“1”', '令“尊威”于此回合移去点数“5”'])
                                .set('ai', function() {
                                    if (get.attitude(player, _status.currentPhase) < 0) return 0;
                                    return 1;
                                });

                            'step 1'
                            if (result.index == 0) {
                                game.log(player, "令“尊威”于此回合增加点数“1”");
                                trigger.player.addTempSkill("hx_tianen_1");
                            } else {
                                game.log(player, "令“尊威”于此回合移去点数“5”");
                                trigger.player.addTempSkill("hx_tianen_5");
                            }
                        },
                        ai: {
                            expose: 0.3,
                            threaten: 0.7,
                        },
                    },

                    "hx_tianen_1": {},

                    "hx_tianen_5": {},

                    "hx_wuwai": {
                        forced: true,
                        mod: {
                            targetEnabled: function(card, player, target, now) {
                                if (get.type(card) == 'trick' && player.hp != target.hp) return false;
                                if (card.name == 'sha' && (!get.nature(card)) && player.countCards('h') != target.countCards('h')) return false;
                            },
                        },
                    },

                    "hx_chaji": {
                        trigger: {
                            global: "gameStart",
                            player: "changeHp",
                        },
                        forced: true,
                        unique: true,
                        derivation: ["qice", "reguanxing"],
                        content: function() {
                            player.removeAdditionalSkill('hx_chaji');
                            var list = [];
                            if (!player.isDamaged()) {
                                list.push('qice');
                            }
                            if (player.isDamaged()) {
                                list.push('reguanxing');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('hx_chaji', list);
                            }
                        },
                    },

                    "hx_fengtao": {
                        enable: "phaseUse",
                        filter: function(event, player) {
                            if (player.countCards('he') == 0) {
                                return false;
                            }
                            if (!game.hasPlayer(function(current) {
                                    return current != player && current.countCards("hej") > 0;
                                })) return false;
                            return !player.hasSkill('hx_fengtao_empty') || player.hasSkill("hx_jishi_fengtao");
                        },
                        position: "he",
                        prompt2: function(event, player) {
                            return '弃置一张牌，然后弃置一名其他角色的一张牌';
                        },
                        filterCard: function(card) {
                            return true;
                        },
                        complexCard: true,
                        complexTarget: true,
                        filterTarget: function(card, player, target) {
                            return target.countCards("hej") > 0;
                        },
                        ai1: function(card) {
                            var type = 'a';
                            var players = game.filterPlayer();
                            var player = _status.event.player;
                            var val = 0;
                            for (var i = 0; i < players.length; i++) {
                                var target = players[i];
                                if (target == player || target.countCards("hej") == 0) continue;
                                var att = get.attitude(player, target);
                                var nh = target.countCards('h');
                                if (att > 0) {
                                    if (target.countCards('j', function(card) {
                                            var cardj = card.viewAs ? {
                                                name: card.viewAs
                                            } : card;
                                            return get.effect(target, cardj, target, player) < 0;
                                        }) > 0) {
                                        if (val < 3) val = 3;
                                    }
                                    if (target.getEquip('baiyin') && target.isDamaged() &&
                                        get.recoverEffect(target, player, player) > 0) {
                                        if (target.hp == 1 && !target.hujia) {
                                            if (val < 1.6) val = 1.6;
                                        }
                                    }
                                    if (target.countCards('e', function(card) {
                                            if (get.position(card) == 'e') return get.value(card, target) < 0;
                                        }) > 0) {
                                        if (val < 1) val = 1;
                                    }
                                }
                                var es = target.getCards('e');
                                var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                var noe2 = (es.filter(function(esx) {
                                    return get.value(esx, target) > 0;
                                }).length == 0);
                                var noh = (nh == 0 || target.hasSkillTag('noh'));
                                if (noh && (noe || noe2)) continue;
                                if (att <= 0 && !target.countCards('he')) continue;
                                var order = 0;
                                if (att < 0) {
                                    if (Math.max(1, 5 - target.hp) > order) {
                                        order = Math.max(1, 5 - target.hp);
                                        if (get.effect(target, {
                                                name: "sha"
                                            }, player, player) > 0) {
                                            var cards = target.getCards("hej");
                                            var val = 0;
                                            for (var j = 0; j < cards.length; j++) {
                                                var card = cards[j];
                                                if (target.getCards('j').contains(card)) {
                                                    var efff = get.effect(target, {
                                                        name: card.viewAs || card.name,
                                                        cards: [card],
                                                    }, target, target);
                                                    if (efff > 0) {
                                                        if (val < 0.5) {
                                                            val = 0.5;
                                                            type = 'trick';
                                                        }
                                                    }
                                                }
                                                if (target.getCards('e').contains(card)) {
                                                    var evalue = get.value(card, target);
                                                    if (target.hasSkillTag('noe')) {
                                                        if (evalue >= 7) {
                                                            if (evalue / 6 > val) {
                                                                val = evalue / 6;
                                                                type = 'equip';
                                                            }
                                                        }
                                                        if (evalue / 10 > val) {
                                                            val = evalue / 10;
                                                            type = 'equip';
                                                        }
                                                    }
                                                    if (evalue / 3 > val) {
                                                        val = evalue / 3;
                                                        type = 'equip';
                                                    }
                                                }
                                                if (target.getCards('h').contains(card)) {
                                                    if (target.hasSkillTag('noh') && 0.1 > val) {
                                                        val = 0.1;
                                                        type = 'basic';
                                                    }
                                                    var nh = target.countCards('h');
                                                    if (nh == 1 && 2 > val) {
                                                        val = 2;
                                                        type = 'basic';
                                                    }
                                                    if (nh == 2 && 1.6 > val) {
                                                        val = 1.6;
                                                        type = 'basic';
                                                    }
                                                    if (nh == 3 && 1 > val) {
                                                        val = 1;
                                                        type = 'basic';
                                                    }
                                                    if (nh == 4 && 0.8 > val) {
                                                        val = 0.8;
                                                        type = 'basic';
                                                    }
                                                    if (nh == 5 && 0.6 > val) {
                                                        val = 0.6;
                                                        type = 'basic';
                                                    }
                                                    if (nh > 5 && 0.4 > val) {
                                                        val = 0.4;
                                                        type = 'basic';
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (type != 'a' && get.type2(card) == type) return 7 - get.value(card);
                            return 5.5 - get.value(card);
                        },
                        ai2: function(target) {
                            var player = _status.event.player;
                            var att = get.attitude(player, target);
                            var nh = target.countCards('h');
                            if (att == 0) return 0;
                            if (att > 0) {
                                if (target.countCards('j', function(card) {
                                        var cardj = card.viewAs ? {
                                            name: card.viewAs
                                        } : card;
                                        return get.effect(target, cardj, target, player) < 0;
                                    }) > 0) return 3;
                                if (target.getEquip('baiyin') && target.isDamaged() &&
                                    get.recoverEffect(target, player, player) > 0) {
                                    if (target.hp == 1 && !target.hujia) return 1.6;
                                }
                                if (target.countCards('e', function(card) {
                                        if (get.position(card) == 'e') return get.value(card, target) < 0;
                                    }) > 0) return 1;
                            }
                            var es = target.getCards('e');
                            var noe = (es.length == 0 || target.hasSkillTag('noe'));
                            var noe2 = (es.filter(function(esx) {
                                return get.value(esx, target) > 0;
                            }).length == 0);
                            var noh = (nh == 0 || target.hasSkillTag('noh'));
                            if (noh && (noe || noe2)) return 0;
                            if (att <= 0 && !target.countCards('he')) return -1.5;
                            if (att < 0) return Math.max(1, 5 - target.hp);
                            return -1.5;
                        },
                        content: function() {
                            'step 0'
                            player.addTempSkill("hx_fengtao_empty");
                            player.discardPlayerCard(targets[0], "hej", 1, true).ai = function(button) {
                                var val = get.buttonValue(button);
                                if (get.attitude(_status.event.player, get.owner(button.link)) > 0) return -val;
                                if (get.effect(targets[0], {
                                        name: "sha"
                                    }, player, player) > 0 && get.type2(button.link) == get.type2(cards[0])) return val + 2;
                                return val;
                            };
                            'step 1'
                            if (result.bool) {
                                if (get.type2(result.links[0]) == get.type2(cards[0])) {
                                    player.chooseBool('是否对' + get.translation(targets[0]) + '使用一张【杀】？').set('choice', get.effect(targets[0], {
                                        name: "sha"
                                    }, player, player) > 0);
                                } else event.finish();
                            } else event.finish();
                            'step 2'
                            if (result.bool) {
                                player.useCard({
                                    name: 'sha',
                                    isCard: true
                                }, targets[0], false);
                            }
                        },
                        ai: {
                            order: 9,
                            result: {
                                target: function(player, target) {
                                    var att = get.attitude(player, target);
                                    var nh = target.countCards('h');
                                    if (att > 0) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? {
                                                name: js[0].viewAs
                                            } : js[0];
                                            if (jj.name == 'guohe' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                                                return 3;
                                            }
                                        }
                                        if (target.getEquip('baiyin') && target.isDamaged() &&
                                            get.recoverEffect(target, player, player) > 0) {
                                            if (target.hp == 1 && !target.hujia) return 1.6;
                                            if (target.hp == 2) return 0.01;
                                            return 0;
                                        }
                                    }
                                    var es = target.getCards('e');
                                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                    var noe2 = (es.filter(function(esx) {
                                        return get.value(esx, target) > 0;
                                    }).length == 0);
                                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                                    if (noh && (noe || noe2)) return 0;
                                    if (att <= 0 && !target.countCards('he')) return 1.5;
                                    return -1.5;
                                },
                            },
                            tag: {
                                loseCard: 1,
                                discard: 1,
                            },
                        },
                    },

                    "hx_fengtao_empty": {

                    },

                    "hx_jishi": {
                        unique: true,
                        mark: true,
                        skillAnimation: true,
                        animationStr: "集师",
                        limited: true,
                        animationColor: "orange",
                        trigger: {
                            player: 'phaseUseBegin',
                        },
                        filter: function(event, player) {
                            var cards = player.getCards("h");
                            var count = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (cards[i].name == 'sha') count += 1;
                            }
                            if (count >= player.hp) return true;
                            return false;
                        },
                        check: function(event, player) {
                            if (player.hp <= 2) return true;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (player.canUse('sha', players[i]) && get.effect(players[i], {
                                        name: 'sha'
                                    }, player, player) > 0) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('hx_jishi');
                            player.recover();
                            player.addTempSkill("hx_jishi_fengtao");
                            var cards = player.getCards("h");
                            var showlist = []
                            for (var i = 0; i < cards.length; i++) {
                                if (cards[i].name == 'sha') showlist.add(cards[i]);
                            }
                            player.showCards(showlist);
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.6,
                        },
                    },

                    "hx_jishi_fengtao": {
                        forced: true,
                        popup: false,
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return Infinity;
                            },
                        },
                        ai: {
                            unequip: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (!get.zhu(player, 'shouyue')) return false;
                                if (arg && arg.name == 'sha') return true;
                                return false;
                            },
                        },
                    },

                    "hx_xiongjue": {
                        trigger: {
                            source: "damageBegin4",
                        },
                        direct: true,
                        filter: function(event, player) {
                            var players = game.filterPlayer();
                            var flag = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && (players[i].countCards("h") > player.countCards("h") || players[i].hp > player.hp)) flag = 1;
                            }
                            if (flag == 0) return false;
                            return event.parent.name != 'hx_xiongjue' && event.parent.name != 'hx_xiongjue_damaged';
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player || players[i] == event.player) continue;
                                if (get.attitude(player, players[i]) < 0 && (players[i].countCards("h") > player.countCards("h") || players[i].hp > player.hp)) {
                                    if (get.attitude(player, event.player) >= 0) return true;
                                    else if (get.damageEffect(players[i], player, player) > get.damageEffect(event.player, player, player)) return true;
                                }
                            }
                            return false;
                        },
                        prompt2: function(event, player) {
                            return '是否将此伤害转移至另一名角色？';
                        },
                        content: function() {
                            "step 0"
                            player.chooseTarget("雄决：选择一名其他角色转移此次伤害", function(card, player, target) {
                                return target != player && (target.countCards("h") > player.countCards("h") || target.hp > player.hp);
                            }, false).ai = function(target) {
                                var player = _status.event.player;
                                player._hxxiongjuetmp = true;
                                var eff1 = get.damageEffect(target, player, player);
                                var eff2 = get.damageEffect(trigger.player, player, player);
                                delete player._hxxiongjuetmp;
                                return eff1 - eff2;
                            };
                            "step 1"
                            if (result.bool) {
                                trigger.cancel();
                                player.logSkill('hx_xiongjue', result.targets);
                                result.targets[0].damage(trigger.num);
                            }
                        },
                        ai: {
                            expose: 0.6,
                            effect: {
                                player: function(card, player, target, current) {
                                    if (player._hxxiongjuetmp) return;
                                    player._hxxiongjuetmp = true;
                                    var players = game.filterPlayer();
                                    var flag = 0;
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && (players[i].countCards("h") > player.countCards("h") || players[i].hp > player.hp) &&
                                            get.damageEffect(players[i], player, player) > 0) flag = 1;
                                    }
                                    if (flag == 0) {
                                        delete player._hxxiongjuetmp;
                                        return;
                                    }
                                    if (current == 0) {
                                        delete player._hxxiongjuetmp;
                                        return;
                                    }
                                    if (get.tag(card, 'damage') && current < 0) {
                                        delete player._hxxiongjuetmp;
                                        if (current < 0) return -current;
                                    }
                                    delete player._hxxiongjuetmp;
                                    return;
                                },
                            },
                        },


                        group: ["hx_xiongjue_init", "hx_xiongjue_damaged"],
                        subSkill: {
                            init: {
                                trigger: {
                                    global: ["gameStart", "roundStart"],
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                                silent: true,
                                content: function() {
                                    player.storage.hx_xiongjue = 0;
                                },
                                sub: true,
                            },
                            damaged: {
                                sub: true,
                                trigger: {
                                    player: "damageBegin4",
                                },
                                direct: true,
                                filter: function(event, player) {
                                    if (player.storage.hx_xiongjue == 1) return false;
                                    var players = game.filterPlayer();
                                    var flag = 0;
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && (players[i].countCards("h") > player.countCards("h") || players[i].hp > player.hp)) flag = 1;
                                    }
                                    if (flag == 0) return false;
                                    return event.parent.name != 'hx_xiongjue' && event.parent.name != 'hx_xiongjue_damaged';
                                },
                                check: function(event, player) {
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] == player) continue;
                                        if (get.attitude(player, players[i]) < 0 && (players[i].countCards("h") > player.countCards("h") || players[i].hp > player.hp)) return true;
                                    }
                                    if (event.num >= player.hp) return true;
                                    return false;
                                },
                                prompt2: function(event, player) {
                                    return '是否将此伤害转移至另一名角色？';
                                },
                                content: function() {
                                    "step 0"
                                    player.chooseTarget("雄决：选择一名其他角色转移此次伤害", function(card, player, target) {
                                        return target != player && (target.countCards("h") > player.countCards("h") || target.hp > player.hp);
                                    }, false).ai = function(target) {
                                        var player = _status.event.player;
                                        player._hxxiongjuetmp = true;
                                        var eff = get.damageEffect(target, player, player);
                                        delete player._hxxiongjuetmp;
                                        return eff;
                                    };
                                    "step 1"
                                    if (result.bool) {
                                        trigger.cancel();
                                        player.logSkill('hx_xiongjue', result.targets);
                                        result.targets[0].damage(trigger.num);
                                        player.storage.hx_xiongjue = 1;
                                    }
                                },
                                ai: {
                                    "maixie_defend": true,
                                    expose: 0.6,
                                    effect: {
                                        target: function(card, player, target, current) {
                                            if (target._hxxiongjuetmp) return;
                                            target._hxxiongjuetmp = true;
                                            var flag = 0;
                                            var risk = 0;
                                            var players = game.filterPlayer();
                                            for (var i = 0; i < players.length; i++) {
                                                if (players[i] != target && (players[i].countCards("h") > target.countCards("h") || players[i].hp > target.hp) &&
                                                    get.damageEffect(players[i], target, target) > 0) {
                                                    flag = 1;
                                                    if (players[i].hp <= 2) risk = 1;
                                                }
                                            }
                                            delete target._hxxiongjuetmp;
                                            if (flag == 0) return;
                                            if (!get.tag(card, 'damage')) return;
                                            else if (player.storage.hx_xiongjue == 1) return;
                                            else if (player.hasSkillTag('jueqing', false, target)) return;
                                            else if (risk == 0 && !player.hasFriend() && player.next != game.roundStart) return;
                                            if (current < 0) return -current;
                                        },
                                    },
                                },
                            },
                        },
                    },

                    "hx_qingsu": {
                        zhuSkill: true,
                        global: "hx_qingsu_2",
                        trigger: {
                            source: "dieAfter",
                        },
                        filter: function(event, player) {
                            if (!player.hasZhuSkill("hx_qingsu")) return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && players[i].group == 'wu') return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                if (get.attitude(player, players[i]) > 0 && players[i].group == 'wu') return true;
                            }
                            return false;
                        },
                        "prompt2": function(event, player) {
                            return '是否令一名【吴】势力角色摸两张牌？';
                        },
                        content: function() {
                            "step 0"
                            player.chooseTarget("清肃：选择一名吴势力角色摸两张牌", function(card, player, target) {
                                return target != player && target.group == 'wu';
                            }, false).ai = function(target) {
                                return get.attitude(player, target);
                            };
                            "step 1"
                            if (result.bool) {
                                result.targets[0].draw(2);
                            }
                        },
                    },

                    "hx_qingsu_2": {
                        trigger: {
                            source: "dieAfter",
                        },
                        filter: function(event, player) {
                            if (player.group != "wu") return false;
                            if (player.hasZhuSkill('hx_qingsu')) return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && players[i].group == 'wu' && players[i].hasZhuSkill('hx_qingsu')) return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                if (get.attitude(player, players[i]) > 0 && players[i].group == 'wu' && players[i].hasZhuSkill('hx_qingsu')) return true;
                            }
                            return false;
                        },
                        "prompt2": function(event, player) {
                            return '是否令一名拥有主公技【清肃】的吴势力角色摸两张牌？';
                        },
                        content: function() {
                            "step 0"
                            player.chooseTarget("清肃：选择一名拥有主公技【清肃】的吴势力角色摸两张牌", function(card, player, target) {
                                return target != player && target.group == 'wu' && target.hasZhuSkill('hx_qingsu');
                            }, false).ai = function(target) {
                                return get.attitude(player, target);
                            };
                            "step 1"
                            if (result.bool) {
                                result.targets[0].draw(2);
                            }
                        },
                    },

                    "hx_qingzhi": {
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function(event, player) {
                            return player.countCards('h');;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && get.attitude(player, players[i]) > 0) return true;
                            }
                            var black_cards = player.getCards("h", {
                                color: "black"
                            });
                            var red_cards = player.getCards("h", {
                                color: "red"
                            });
                            if (black_cards.length >= red_cards.length) {
                                var count = player.maxHp - player.hp;
                                var len = black_cards.length;
                                if (count - length >= 3) return true;
                                var num = 0;
                                for (var i = 0; i < black_cards.length; i++) {
                                    num += get.value(black_cards[i], player, 'raw');
                                }
                                num /= len;
                                if (count - length <= 0) return false;
                                if (count - length == 1 && num < 4) return true;
                                if (count - length == 2 && num < 6) return true;
                            }
                            if (black_cards.length <= red_cards.length) {
                                var count = player.maxHp - player.hp;
                                var len = red_cards.length;
                                var num = 0;
                                var tao = 0;
                                for (var i = 0; i < red_cards.length; i++) {
                                    if (red_cards[i].name == 'tao') tao = 1;
                                    num += get.value(red_cards[i], player, 'raw');
                                }
                                num /= len;
                                if (num < 0) return true;
                                if (tao == 1) return false;
                                if (len <= 2 && num < 4) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.showHandcards();
                            var black_cards = player.getCards("h", {
                                color: "black"
                            });
                            var red_cards = player.getCards("h", {
                                color: "red"
                            });
                            event.black_cards = black_cards;
                            event.red_cards = red_cards;

                            'step 1'
                            if (event.black_cards.length < event.red_cards.length) {
                                event.choice = 'red';
                            } else if (event.black_cards.length > event.red_cards.length) {
                                event.choice = 'black';
                            } else if (event.black_cards.length == event.red_cards.length) {
                                player.chooseControl('红色', '黑色', function(event, player) {
                                    var black_cards = player.getCards("h", {
                                        color: "black"
                                    });
                                    var red_cards = player.getCards("h", {
                                        color: "red"
                                    });
                                    var num = 0;
                                    var num1 = 0;
                                    if (red_cards.length >= 3 && black_cards.length >= 3) return false;
                                    for (var i = 0; i < red_cards.length; i++) {
                                        num += Math.max(0, get.value(red_cards[i], player, 'raw'));
                                    }
                                    for (var i = 0; i < black_cards.length; i++) {
                                        num1 += Math.max(0, get.value(black_cards[i], player, 'raw'));
                                    }
                                    num /= red_cards.length;
                                    num1 /= black_cards.length;
                                    num *= Math.min(red_cards.length, player.hp);
                                    num1 *= Math.min(black_cards.length, player.hp);
                                    if (12 - num > 0) return '红色';
                                    return '黑色';
                                }).set('prompt', '倾志：选择一种颜色的牌，交给其他角色');
                            }
                            'step 2'
                            if (result.control) {
                                if (result.control == '红色') {
                                    event.choice = 'red';
                                } else event.choice = 'black';
                            }
                            if (event.choice == 'red') event.cards = player.getCards("h", {
                                color: "red"
                            });
                            else event.cards = player.getCards("h", {
                                color: "black"
                            });

                            'step 3'
                            if (event.cards.length >= 1) {

                                player.chooseCardButton('将牌分配给任意其他角色', true, event.cards, [1, event.cards.length]).set('ai', function(button) {
                                    if (ui.selected.buttons.length == 0) return 1;
                                    return 0;
                                });
                            } else {
                                if (event.choice == 'black') {
                                    var count = player.maxHp - player.hp;
                                    player.draw(count);
                                } else if (player.isDamaged()) {
                                    player.useCard({
                                        name: 'tao'
                                    }, player);
                                }
                                event.finish();
                            }
                            "step 4"
                            if (result.bool) {
                                for (var i = 0; i < result.links.length; i++) {
                                    event.cards.remove(result.links[i]);
                                }
                                event.togive = result.links.slice(0);
                                player.chooseTarget('将' + get.translation(result.links) + '交给一名其他角色', function(card, player, target) {
                                    return target != player;
                                }, true).set('ai', function(target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.enemy) {
                                        return -att;
                                    } else if (att > 0) {
                                        return att / (1 + target.countCards('h'));
                                    } else {
                                        return att / 100;
                                    }
                                }).set('enemy', get.value(event.togive[0]) < 0);
                            }
                            "step 5"
                            if (result.targets.length) {
                                result.targets[0].gain(event.togive, 'draw');
                                player.line(result.targets[0], 'green');
                                game.log(result.targets[0], '获得了' + get.cnNumber(event.togive.length) + '张牌');
                                event.goto(3);
                            } else event.finish();

                        },
                        ai: {
                            expose: 0.2,
                            threaten: 1.3,
                        },
                    },

                    "hx_julie": {
                        global: "hx_julie2",
                        zhuSkill: true,
                        trigger: {
                            global: "recoverAfter",
                        },
                        filter: function(event, player) {
                            return event.player && event.player != player && event.player.group != 'shu' && event.player.hp == event.player.maxHp && player.hasZhuSkill("hx_julie");
                        },
                        check: function(event, player) {
                            return true;
                        },
                        content: function() {
                            trigger.player.group = 'shu';
                        },
                    },

                    "hx_julie2": {

                        trigger: {
                            player: "phaseJieshuEnd",
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var cards = player.getCards("he");
                            var d = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.color(cards[i]) == 'red' && get.value(cards[i]) < 7) d = 1;
                            }
                            if (d == 0) return false;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue
                                if (players[i].hasZhuSkill("hx_julie") && get.attitude(player, players[i]) > 0) return true;
                            }
                            return false;
                        },
                        filter: function(event, player) {
                            if (player.group != 'shu') return false;
                            if (player.hasZhuSkill('hx_julie')) {
                                return false;
                            }
                            var check = game.hasPlayer(function(current) {
                                return current.hasZhuSkill("hx_julie");
                            });
                            return check && player.countCards('he', {
                                color: "red"
                            }) > 0;
                        },
                        content: function() {
                            "step 0"
                            player.chooseCardTarget({
                                filterCard: function(card) {
                                    return get.color(card) == 'red';
                                },
                                position: 'he',
                                selectCard: [1, 1],
                                selectTarget: 1,
                                filterTarget: function(card, player, target) {
                                    return player != target && target.hasZhuSkill("hx_julie");
                                },
                                ai1: function(card) {
                                    return 7 - get.value(card);
                                },
                                ai2: function(target) {
                                    return get.attitude(player, target);
                                },
                                prompt: '聚烈：将一张红色牌交给主公'
                            });
                            "step 1"
                            if (result.bool) {
                                result.targets[0].gain(result.cards, player, 'giveAuto');
                            }

                        },
                        ai: {
                            expose: 0.2,
                        },

                    },

                    "hx_jiegong": {
                        trigger: {
                            global: "phaseDiscardBegin"
                        },
                        filter: function(event, player) {
                            return event.player.countCards('e') > 0;
                        },
                        check: function(event, player) {
                            var target = event.player;
                            if (get.attitude(player, target) <= 0) {
                                if (target.hasSkillTag('noe')) return false;
                                var cards = target.getCards("e");
                                for (var i = 0; i < cards.length; i++) {
                                    if (cards[i].name == 'baiyin' && target.hp < target.maxHp) continue;
                                    else return true;
                                }
                                return false;
                            }
                            if (target == player && target.countCards("h") >= target.hp) {
                                if (!(target.getEquip(1) || target.getEquip(4))) return false;
                            }
                            return true;
                        },
                        content: function() {
                            'step 0'
                            player.choosePlayerCard(trigger.player, 'e', true, function(button) {
                                if (get.attitude(player, trigger.player) <= 0) {
                                    return get.buttonValue(button);
                                }
                                return 20 - get.buttonValue(button);
                            });
                            'step 1'
                            if (result.links) {
                                event.cards = result.links;
                                trigger.player.chooseControl('收回', '交给', function(event, player) {
                                    var evt = _status.event.getParent();
                                    var self = _status.event.player;
                                    var meng = evt.player;
                                    if (get.attitude(self, meng) <= 0) return '收回';
                                    return '交给';
                                }).set('prompt', '节攻：收回' + get.translation(result.links[0]) + "，或将其交给" + get.translation(player));
                            } else {
                                event.finish();
                            }
                            'step 2'
                            if (result.control) {
                                if (result.control == '收回') trigger.player.gain(event.cards, 'gain2');
                                else {
                                    player.gain(event.cards, 'gain2');
                                    trigger.player.draw(1);
                                }
                            } else event.finish();
                        },
                        ai: {
                            expose: 0.5,
                        },
                    },

                    "hx_zhanyu": {
                        trigger: {
                            global: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            return player.countCards("h", {
                                type: "equip"
                            }) > 0;
                        },
                        check: function(event, player) {
                            var cards = player.getCards("h");
                            var players = game.filterPlayer();
                            var flag = 0;
                            for (var i = 0; i < cards.length; i++) {
                                var card = cards[i];
                                if (get.type(card) != 'equip') continue;
                                for (var j = 0; j < players.length; j++) {
                                    if (get.subtype(card) == 'equip1' && ((players[j].get('e', '1') != undefined && get.value(card) > players[j].get('e', '1')) || players[j].get('e', '1') == undefined)) flag = 1;
                                    if (get.subtype(card) == 'equip2' && ((players[j].get('e', '2') != undefined && get.value(card) > players[j].get('e', '2')) || players[j].get('e', '2') == undefined)) flag = 1;
                                    if (get.subtype(card) == 'equip3' && ((players[j].get('e', '3') != undefined && get.value(card) > players[j].get('e', '3')) || players[j].get('e', '3') == undefined)) flag = 1;
                                    if (get.subtype(card) == 'equip4' && ((players[j].get('e', '4') != undefined && get.value(card) > players[j].get('e', '4')) || players[j].get('e', '4') == undefined)) flag = 1;
                                    if (get.subtype(card) == 'equip5' && ((players[j].get('e', '5') != undefined && get.value(card) > players[j].get('e', '5')) || players[j].get('e', '5') == undefined)) flag = 1;
                                }
                            }

                            var urgent = 0;
                            var danger = 0;
                            var current = _status.currentPhase;
                            var players = game.filterPlayer();
                            var count = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (get.attitude(player, current) <= 0) count += 1;
                            }
                            if (count < player.countCards("h", {
                                    type: "equip"
                                })) return true;
                            else if (get.attitude(player, current) > 0) return false;
                            else if (flag == 1) return true;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == current) continue;
                                else if (get.attitude(player, players[i]) <= 0) continue;
                                else if (players[i].hp == 1 && get.distance(current, players[i], 'attack') <= 1) {
                                    urgent += 1;
                                    danger += 1;
                                } else if ((players[i].hp == 2 && get.distance(current, players[i], 'attack') <= 1) || (players[i].hp == 1)) {
                                    danger += 1;
                                }
                            }
                            if (danger > 0) return true;
                            return false;
                        },
                        content: function() {
                            "step 0"
                            player.chooseCardTarget({
                                filterCard: function(card) {
                                    return get.type(card) == 'equip';
                                },
                                position: 'h',
                                selectCard: [1, 1],
                                selectTarget: 1,
                                filterTarget: function(card, player, target) {
                                    return true;
                                },
                                ai1: function(card) {
                                    return get.value(card);
                                },
                                ai2: function(target) {
                                    var current = _status.currentPhase;
                                    if (get.attitude(player, target) <= 0) return -1;
                                    else if (target.hp == 1 && get.distance(current, target, 'attack') <= 1) return 2;
                                    else if ((target.hp == 2 && get.distance(current, target, 'attack') <= 1) || (target.hp == 1)) return 1;
                                    var cards = player.getCards("h");
                                    var flag = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        var card = cards[i];
                                        if (get.type(card) != 'equip') continue;
                                        if (get.subtype(card) == 'equip1' && ((target.get('e', '1') != undefined && get.value(card) > target.get('e', '1')) || target.get('e', '1') == undefined)) return 1;
                                        if (get.subtype(card) == 'equip2' && ((target.get('e', '2') != undefined && get.value(card) > target.get('e', '2')) || target.get('e', '2') == undefined)) return 1;
                                        if (get.subtype(card) == 'equip3' && ((target.get('e', '3') != undefined && get.value(card) > target.get('e', '3')) || target.get('e', '3') == undefined)) return 1;
                                        if (get.subtype(card) == 'equip4' && ((target.get('e', '4') != undefined && get.value(card) > target.get('e', '4')) || target.get('e', '4') == undefined)) return 1;
                                        if (get.subtype(card) == 'equip5' && ((target.get('e', '5') != undefined && get.value(card) > target.get('e', '5')) || target.get('e', '5') == undefined)) return 1;
                                    }
                                    return 0.5;
                                },
                                prompt: '展御：指定一名角色，对其使用一张装备牌，并令其本回合不能成为普通【杀】的对象'
                            });
                            "step 1"
                            if (result.bool) {
                                result.targets[0].equip(result.cards[0]);
                                var targets = event.targets;
                                player.line(result.targets, 'green');
                                result.targets[0].addTempSkill("hx_zhanyu_sha", "phaseUseAfter");
                                game.log(result.targets[0], "被指定为【展御】的对象");
                            }
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.8,
                        },
                        subSkill: {
                            "sha": {
                                mod: {
                                    targetEnabled: function(card, player, target, now) {
                                        if (card.name == 'sha' && (!card.nature)) return false;
                                    },
                                },
                                sub: true,
                                mark: true,
                                intro: {
                                    content: "已获得展御标记，不能成为普通【杀】的对象",
                                },
                            }
                        },
                    },

                    "hx_xiance": {
                        direct: true,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        init: function(player) {
                            if (!player.storage.hx_xiance) player.storage.hx_xiance = [];
                        },
                        content: function() {
                            'step 0'
                            var list = [];
                            for (var i = 0; i < lib.inpile.length; i++) {
                                var name = lib.inpile[i];
                                var type = get.type(name);
                                if (type == 'trick') {
                                    if (lib.filter.cardEnabled({
                                            name: name
                                        }, player)) {
                                        list.push([get.translation(type), '', name][2]);
                                    }
                                }
                            }
                            for (var i = 0; i < player.storage.hx_xiance.length; i++) {
                                list.remove(player.storage.hx_xiance[i]);
                            }
                            player.chooseButton(['先策：请选择要使用的牌名', [list, 'vcard']]).set('ai', function(button) {
                                var effect = player.getUseValue(button.link[2]);
                                if (effect > 0) return effect;
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('hx_xiance');
                                var name = result.links[0][2];
                                event.vcard = result.links;
                                event.cardname = name;
                                player.storage.hx_xiance.add(name);
                                player.chooseUseTarget(result.links[0][2], true, false);
                            } else event.finish();
                        },
                        ai: {
                            expose: 0.2,
                        },
                    },

                    "hx_houzhi": {
                        init: function(player) {
                            player.storage.hx_houzhi = [];
                        },
                        position: "hes",
                        enable: "chooseToUse",
                        filterCard: function(card) {
                            return _status.event.player.storage.hx_houzhi.contains(card.name);
                        },
                        viewAsFilter: function(player) {
                            var cards = player.getCards("hes");
                            for (var i = 0; i < cards.length; i++) {
                                if (player.storage.hx_houzhi.contains(cards[i].name)) return true;
                            }
                            return false;
                        },
                        viewAs: {
                            name: "wuxie",
                        },
                        prompt: "将一张此局游戏使用过的名称的牌当无懈可击使用",
                        check: function(card) {
                            return 8 - get.value(card)
                        },
                        group: ["hx_houzhi_store"],
                        subSkill: {
                            store: {
                                sub: true,
                                forced: true,
                                popup: false,
                                trigger: {
                                    player: "useCardAfter",
                                },
                                content: function() {
                                    var cards = trigger.cards;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (!player.storage.hx_houzhi.contains(cards[i].name)) player.storage.hx_houzhi.push(cards[i].name);
                                    }
                                },
                            },
                        },
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                            },
                            result: {
                                player: 1,
                            },
                            expose: 0.2,
                        },
                    },

                    "hx_anzhi": {
                        trigger: {
                            global: "gameStart",
                            player: "changeHp",
                        },
                        forced: true,
                        unique: true,
                        derivation: ["keji", "bazhen"],
                        content: function() {
                            player.removeAdditionalSkill('hx_anzhi');
                            var list = [];
                            if (player.hp > 2) {
                                list.push('keji');
                            }
                            if (player.hp <= 2) {
                                list.push('bazhen');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('hx_anzhi', list);
                            }
                        },
                    },

                    "hx_zhechong": {
                        trigger: {
                            player: ["phaseBefore", "changeHp"],
                        },
                        forced: true,
                        unique: true,
                        derivation: ["keji", "bazhen"],
                        content: function() {
                            player.removeAdditionalSkill('hx_anzhi');
                            var list = [];
                            if (player.hp > 2) {
                                list.push('keji');
                            }
                            if (player.hp <= 2) {
                                list.push('bazhen');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('hx_anzhi', list);
                            }
                        },
                    },

                    "hx_zhechong": {
                        trigger: {
                            global: "useCardToTarget",
                        },
                        filter: function(event, player) {
                            if (event.target == player) return false;
                            var count = player.maxHp - player.hp;
                            if (get.distance(player, event.target) <= count) {
                                return event.card.name == 'sha' && get.color(event.card) == 'black' && (!event.targets.contains(player));
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var target = event.target;
                            var source = event.player;
                            if (get.effect(target, {
                                    name: 'sha'
                                }, source, player) > 0) return false;
                            return true;
                        },
                        content: function() {
                            player.draw();
                            var evt = trigger.getParent();
                            evt.triggeredTargets2.remove(trigger.target);
                            evt.targets.remove(trigger.target);
                            evt.targets.push(player);
                        },
                        mod: {
                            globalTo: function(from, to, current) {
                                var players = game.filterPlayer();
                                var count = to.maxHp - to.hp;
                                if (players.length > count) return current + count;
                                return current;
                            },
                        },
                        ai: {
                            threaten: 2.5,
                        },
                    },

                    "hx_qingshi": {
                        trigger: {
                            player: "phaseDrawAfter",
                        },
                        direct: true,
                        filter: function(event, player) {
                            return event.cards.length == 2;
                        },
                        init: function(player) {
                            player.storage.hx_qingshi = 0;
                        },
                        content: function() {
                            "step 0"
                            player.showCards(trigger.cards);
                            "step 1"
                            var c1 = get.color(trigger.cards[0]);
                            var c2 = get.color(trigger.cards[1]);
                            if (c1 == c2) {
                                player.draw(1);
                                player.addTempSkill("luanji");
                                event.finish();
                            } else {
                                player.storage.hx_qingshi = 1;
                                event.finish();
                            }
                        },
                        ai: {
                            expose: 0.3,
                            threaten: 2,
                        },
                        group: ["hx_qingshi_init", "hx_qingshi_end"],
                        subSkill: {
                            "init": {
                                trigger: {
                                    player: "phaseBegin",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_qingshi = 0;
                                },
                                sub: true,
                            },
                            "end": {
                                trigger: {
                                    player: "phaseUseEnd",
                                },
                                filter: function(event, player) {
                                    return player.storage.hx_qingshi == 1;
                                },
                                check: function(event, player) {
                                    var taoyuan = 0;
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        var eff1 = get.effect(players[i], {
                                            name: 'taoyuan'
                                        }, player, player);
                                        taoyuan += eff1;
                                    }
                                    if (taoyuan < 1) return false;
                                    return true;
                                },
                                content: function() {
                                    player.chooseUseTarget({
                                        name: "taoyuan",
                                        isCard: true
                                    }, true);
                                },
                                sub: true,
                            },
                        },
                    },

                    "hx_renyuan": {
                        unique: true,
                        zhuSkill: true,
                        trigger: {
                            player: ["chooseToRespondBefore", "chooseToUseBefore"],
                        },
                        filter: function(event, player) {
                            if (!player.isDamaged()) return false;
                            if (event.responded) return false;
                            if (player.storage.hx_renyuaning) return false;
                            if (!player.hasZhuSkill('hx_renyuan')) return false;
                            if (!event.filterCard({
                                    name: 'shan'
                                }, player, event)) return false;
                            return game.hasPlayer(function(current) {
                                return current != player && current.group == 'qun';
                            });
                        },
                        check: function(event, player) {
                            if (get.damageEffect(player, event.player, player) >= 0) return false;
                            return true;
                        },
                        content: function() {
                            "step 0"
                            if (event.current == undefined) event.current = player.next;
                            if (event.current == player) {
                                event.finish();
                            } else if (event.current.group == 'qun') {
                                if ((event.current == game.me && !_status.auto) || (
                                        get.attitude(event.current, player) > 2) ||
                                    event.current.isOnline()) {
                                    player.storage.hx_renyuaning = true;
                                    var next = event.current.chooseToRespond('是否替' + get.translation(player) + '打出一张闪？', {
                                        name: 'shan'
                                    });
                                    next.set('ai', function() {
                                        var event = _status.event;
                                        return (get.attitude(event.player, event.source) - 2);
                                    });
                                    next.set('skillwarn', '替' + get.translation(player) + '打出一张闪');
                                    next.autochoose = lib.filter.autoRespondShan;
                                    next.set('source', player);
                                }
                            }
                            "step 1"
                            player.storage.hx_renyuaning = false;
                            if (result.bool) {
                                event.current.draw(1);
                                event.finish();
                                trigger.result = {
                                    bool: true,
                                    card: {
                                        name: 'shan',
                                        isCard: true
                                    }
                                };
                                trigger.responded = true;
                                trigger.animate = false;
                                if (typeof event.current.ai.shown == 'number' && event.current.ai.shown < 0.95) {
                                    event.current.ai.shown += 0.3;
                                    if (event.current.ai.shown > 0.95) event.current.ai.shown = 0.95;
                                }
                            } else {
                                event.current = event.current.next;
                                event.goto(0);
                            }
                        },
                        ai: {
                            expose: 1.5,
                            respondShan: true,
                            skillTagFilter: function(player) {
                                if (player.storage.hx_renyuaning) return false;
                                if (!player.hasZhuSkill('hx_renyuan')) return false;
                                if (!player.isDamaged()) return false;
                                return game.hasPlayer(function(current) {
                                    return current != player && current.group == 'qun';
                                });
                            },
                        },
                    },

                    "hx_jieqi": {
                        trigger: {
                            player: ["useCardEnd", "respondEnd"],
                        },
                        usable: 1,
                        filter: function(event, player) {
                            if ((!event.cards) || event.cards.length != 1) return false;
                            if (get.type(event.cards[0]) != 'basic' && get.type(event.cards[0]) != 'trick') return false;
                            if ((!get.suit(event.cards[0]) || (!event.cards[0].number))) return false;
                            var card = event.cards[0];
                            var cards = player.getCards("h");
                            for (var i = 0; i < cards.length; i++) {
                                if (get.suit(cards[i]) == get.suit(card) || cards[i].number == card.number) return true;
                            }
                            return false;

                        },
                        check: function(event, player) {
                            var card = event.cards[0];
                            var cards = player.getCards("h");
                            for (var i = 0; i < cards.length; i++) {
                                if ((get.suit(cards[i]) == get.suit(card) || cards[i].number == card.number) && get.value(cards[i]) < get.value(card)) {
                                    if (!(player.hp == 1 && card.name == 'du')) return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            "step 0"
                            player.chooseCard({
                                filterCard: function(card) {
                                    return get.suit(trigger.cards[0]) == get.suit(card) || trigger.cards[0].number == card.number;
                                },
                                position: 'h',
                                selectCard: 1,
                                ai: function(card) {
                                    return 8 - get.value(card);
                                },
                                prompt: '弃置一张花色或点数与' + get.translation(trigger.cards[0]) + '相同的手牌'
                            });
                            "step 1"
                            if (result.bool) {
                                player.showCards(result.cards);
                                player.discard(result.cards);
                                player.gain(trigger.cards, "gain2");
                            }
                        },
                        ai: {
                            expose: 1.5,
                            threaten: 1.0,
                        },
                    },

                    "hx_taohui": {
                        trigger: {
                            player: "phaseUseEnd",
                        },
                        forced: true,
                        filter: function(event, player) {
                            var list1 = player.storage.hx_taohui_suits;
                            var list2 = player.storage.hx_taohui_nums;
                            if (list1.length <= 1 || list2.length <= 1) return true;
                            player.storage.hx_taohui_suits = [];
                            player.storage.hx_taohui_nums = [];
                            return false;
                        },
                        content: function() {
                            var list1 = player.storage.hx_taohui_suits;
                            var list2 = player.storage.hx_taohui_nums;
                            if (list1.length <= 1) {
                                player.draw();
                            }
                            if (list2.length <= 1) {
                                player.recover();
                                player.addTempSkill("hx_taohui_limit", "phaseAfter");
                            }
                            player.storage.hx_taohui_suits = [];
                            player.storage.hx_taohui_nums = [];
                        },
                        group: ["hx_taohui_init", "hx_taohui_add"],
                        subSkill: {
                            init: {
                                trigger: {
                                    player: "phaseUseBegin",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                content: function() {
                                    player.storage.hx_taohui_suits = [];
                                    player.storage.hx_taohui_nums = [];
                                },
                                sub: true,
                            },
                            add: {
                                trigger: {
                                    player: "useCard",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                filter: function(event, player) {
                                    if (!player.isPhaseUsing()) return false;
                                    return event.cards.length > 0;
                                },
                                content: function() {
                                    var cards = trigger.cards;
                                    for (var i = 0; i < cards.length; i++) {
                                        var suit = get.suit(cards[i]);
                                        var num = cards[i].number;
                                        if (suit && player.storage.hx_taohui_suits.indexOf(suit) < 0) player.storage.hx_taohui_suits.add(suit);
                                        if (num && player.storage.hx_taohui_nums.indexOf(num) < 0) player.storage.hx_taohui_nums.add(num);
                                    }
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.2,
                            threaten: 0.8,
                            effect: {
                                player: function(card, player, target) {
                                    if (!player.isPhaseUsing()) return;
                                    var list1 = player.storage.hx_taohui_suits;
                                    var list2 = player.storage.hx_taohui_nums;
                                    if (list2.length > 1) return;
                                    if (list2.length == 0) return;
                                    var num = list2[0];
                                    if (card.number == num) return;
                                    if (player.isDamaged()) return [1, -2, 0, 0];
                                    else return;
                                },
                            },
                        },

                    },

                    "hx_taohui_skip": {
                        forced: true,
                        popup: false,
                        trigger: {
                            player: "phaseDiscardBefore",
                        },
                        content: function() {
                            trigger.cancel();
                        },
                    },

                    "hx_taohui_limit": {
                        mod: {
                            maxHandcard: function(player, num) {
                                return num + 1;
                            },
                        },
                        sub: true,
                    },


                    "hx_shouxun": {
                        marktext: "勋",
                        trigger: {
                            source: "damageEnd",
                        },
                        forced: true,
                        usable: 1,
                        init: function(player) {
                            player.storage.hx_shouxun = [];
                        },
                        content: function() {
                            var cards = get.cards(trigger.num);
                            player.storage.hx_shouxun = player.storage.hx_shouxun.concat(cards);
                            player.$gain2(cards);
                            game.log(player, '将' + get.cnNumber(cards.length) + '张牌置于武将牌上');
                            player.syncStorage('hx_shouxun');
                            player.markSkill('hx_shouxun');
                        },
                        intro: {
                            content: "cards",
                        },
                        ai: {
                            threaten: 0.8,
                        },
                        group: ["hx_shouxun_black", "hx_shouxun_red"],
                    },

                    "hx_shouxun_black": {
                        cardUsable: function(card, player, num) {
                            if (card.name == 'sha') {
                                var cards = player.storage.hx_shouxun;
                                if (!cards || cards.length == 0) return false;
                                var black = 0;
                                var red = 0;
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.color(cards[i]) == 'black') black += 1;
                                    if (get.color(cards[i]) == 'red') red += 1;
                                }
                                if (black >= red) return num + 1;
                                return num;
                            } else return num;
                        },
                        sub: true,
                    },

                    "hx_shouxun_red": {
                        mod: {
                            maxHandcard: function(player, num) {
                                var cards = player.storage.hx_shouxun;
                                if (!cards || cards.length == 0) return;
                                var black = 0;
                                var red = 0;
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.color(cards[i]) == 'black') black += 1;
                                    if (get.color(cards[i]) == 'red') red += 1;
                                }
                                if (black <= red) return num + 1;
                                return num;
                            },
                        },
                        sub: true,
                    },

                    "hx_lugong": {
                        skillAnimation: true,
                        animationColor: "thunder",
                        unique: true,
                        juexingji: true,
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        forced: true,
                        filter: function(event, player) {
                            return player.storage.hx_shouxun && player.storage.hx_shouxun.length >= 3 && !player.storage.hx_huarong;
                        },
                        derivation: "hx_huarong",
                        content: function() {
                            player.loseMaxHp();
                            player.recover();
                            player.addSkill('hx_huarong');
                            player.storage.hx_huarong = true;
                            player.awakenSkill('hx_lugong');
                        },
                    },

                    "hx_huarong": {
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        filter: function(event, player) {
                            return player.storage.hx_shouxun && player.storage.hx_shouxun.length > 0;
                        },
                        content: function() {
                            'step 0'
                            player.chooseCardButton('选择一张“勋”加入手牌', player.storage.hx_shouxun, function(button) {
                                return true;
                            }, true).set('ai', function(button) {
                                return get.value(button.link);
                            });
                            'step 1'
                            if (result.bool) {
                                player.storage.hx_shouxun.remove(result.links[0]);
                                player.gain(result.links[0], 'fromStorage');
                                if (player.storage.hx_shouxun.length) player.markSkill('hx_shouxun');
                                else player.unmarkSkill('hx_shouxun');
                                var card = result.links[0];
                                var cards = player.storage.hx_shouxun;
                                var count = 0;
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.suit(cards[i]) == get.suit(card)) count += 1;
                                }
                                player.draw(count);
                            } else event.finish();
                        },
                        ai: {
                            threaten: 0.8,
                        },
                    },

                    "hx_heliu": {
                        trigger: {
                            global: "phaseDiscardAfter",
                        },
                        filter: function(event, player) {
                            if (event.player != player) {
                                var history = event.player.getHistory('lose', function(evt) {
                                    return evt.type == 'discard' && evt.getParent('phaseDiscard') == event && evt.hs.filterInD('d').length > 0;
                                });
                                if (!history.length || !history[0].cards) return false;
                                var cards = history[0].cards;
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.color(cards[i]) == 'red') return true;
                                }
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var history = event.player.getHistory('lose', function(evt) {
                                return evt.type == 'discard' && evt.getParent('phaseDiscard') == event && evt.hs.filterInD('d').length > 0;
                            });
                            if (!history.length || !history[0].cards) return false;
                            var cards = history[0].cards;
                            var value = 0;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.color(cards[i]) == 'red') value += get.value(cards[i], player, 'raw');
                            }
                            if (value > 0) return true;
                            return false;
                        },
                        content: function() {
                            var history = trigger.player.getHistory('lose', function(evt) {
                                return evt.type == 'discard' && evt.getParent('phaseDiscard') == trigger && evt.hs.filterInD('d').length > 0;
                            });
                            var cards = history[0].cards;
                            var red_cards = [];
                            for (var i = 0; i < cards.length; i++) {
                                if (get.color(cards[i]) == 'red') red_cards.add(cards[i]);
                            }
                            game.delay(0.5);
                            if (red_cards.length) {
                                player.gain(red_cards);
                                player.$gain2(red_cards);
                                game.log(player, '收回了', red_cards);
                            }
                            game.delay();
                        },
                        ai: {
                            threaten: 1.3,
                            expose: 0.2,
                        },
                    },

                    "hx_fuyi": {
                        trigger: {
                            player: "phaseAfter",
                        },
                        limited: true,
                        filter: function(event, player) {
                            return true;
                        },
                        check: function(event, player) {
                            var profit = 0;
                            var loss = 0;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                var cnt = player.getHandcardLimit() - player.countCards("h");
                                if (players[i] == player) {
                                    if (cnt >= 2) profit += 2;
                                    if (cnt == 1) profit += 1;
                                    if (cnt <= 0) profit += 0.5;
                                } else if (get.attitude(player, players[i]) < 0) {
                                    if (cnt >= 2) loss += 2;
                                    if (cnt == 1) {
                                        loss += 1;
                                        profit += 0.5;
                                    }
                                    if (cnt <= 0) {
                                        loss += 0.5;
                                        profit += 1;
                                    }
                                } else if (get.attitude(player, players[i]) > 0) {
                                    if (cnt >= 2) profit += 2;
                                    if (cnt == 1) profit += 1.5;
                                    if (cnt <= 0) profit += 1.5;
                                }
                            }
                            return profit - loss > Math.round(players.length / 2)
                        },
                        content: function() {
                            "step 0"
                            player.awakenSkill('hx_fuyi');
                            player.addSkill("hx_fuyi_store");
                            if (event.current == undefined) event.current = player;
                            event.current.draw(2);
                            event.current.phaseDiscard();
                            "step 1"
                            event.current = event.current.next;
                            if (event.current == player) {
                                event.finish();
                            } else event.goto(0);
                        },
                        ai: {
                            threaten: 1.3,
                            expose: 0.2,
                        },
                    },

                    "hx_fuyi_store": {
                        trigger: {
                            player: "dyingBegin",
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        silent: true,
                        content: function() {
                            player.restoreSkill("hx_fuyi");
                            player.removeSkill("hx_fuyi_store");
                        },
                        forced: true,
                        popup: false,
                    },

                    "hx_zhishi": {
                        trigger: {
                            global: "phaseZhunbeiBegin",
                        },
                        filter: function(event, player) {
                            return get.distance(player, event.player, 'attack') <= 1 && player.canCompare(event.player);
                        },
                        check: function(event, player) {
                            if (get.attitude(player, event.player) < -2) {
                                var cards = player.getCards('h');
                                if (cards.length > player.hp) return true;
                                for (var i = 0; i < cards.length; i++) {
                                    var useful = get.useful(cards[i]);
                                    if (useful < 5) return true;
                                    if (cards[i].number > 7 && useful < 7) return true;
                                }
                            }
                            return false;
                        },
                        logTarget: "player",
                        content: function() {
                            "step 0"
                            player.chooseToCompare(trigger.player);
                            "step 1"
                            if (result.bool) {
                                trigger.player.addTempSkill('hx_zhishi_nohurt');
                                event.finish();
                            } else event.finish();
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.5,
                        },
                    },

                    "hx_zhishi_nohurt": {
                        trigger: {
                            source: "damageBefore",
                        },
                        forced: true,
                        popup: false,
                        content: function() {
                            trigger.cancel();
                        },
                        ai: {
                            nofire: true,
                            nothunder: true,
                            nodamage: true,
                            effect: {
                                player: function(card, player, target, current) {
                                    if (get.tag(card, 'damage')) return 'zeroplayertarget';
                                },
                            },
                        },
                    },

                    "hx_xujin": {
                        unique: true,
                        mark: true,
                        skillAnimation: true,
                        juexingji: true,
                        animationColor: "soil",
                        limited: true,
                        forced: true,
                        trigger: {
                            player: "phaseEnd",
                        },
                        derivation: "hx_shisi",
                        filter: function(event, player) {
                            return player.isMaxHp() || player.isMinHp();
                        },
                        content: function() {
                            player.awakenSkill('hx_xujin');
                            player.loseMaxHp();
                            player.draw(2);
                            player.addSkill('hx_shisi');
                        },
                        intro: {
                            content: "limited",
                        },
                    },

                    "hx_shisi": {
                        trigger: {
                            player: "loseEnd",
                        },
                        //usable:1,
                        filter: function(event, player) {
                            return _status.currentPhase != player;
                        },
                        frequent: true,
                        content: function() {
                            "step 0"
                            player.chooseTarget('选择一名其他角色，观看其手牌', function(card, player, target) {
                                if (player == target) return false;
                                var evr = trigger.parent.parent;
                                if (evr && evr.name == 'chooseToCompare' && (evr.player == target || evr.target == target)) {
                                    return target.countCards("h") > 1;
                                }
                                return target.countCards("h") >= 1;
                            }).ai = function(target) {
                                if (get.attitude(player, target) >= 0) return 0.1;
                                if (player.countCards("h") <= 2) return 3 - player.countCards("h");
                                if (player.hp <= 2) return 1;
                                return 0.5;
                            }
                            "step 1"
                            if (result.bool) {
                                var target = result.targets[0];
                                player.line(target, 'green');
                                game.log(player, "指定观看", target, "的手牌");
                                event.target = target;
                                var cards = target.getCards('h');
                                var evr = trigger.parent.parent;
                                if (evr && evr.name == 'chooseToCompare' && (evr.player == target || evr.target == target)) {
                                    if (evr.player == target) cards.remove(evr.card1);
                                    if (evr.player == player) cards.remove(evr.card2);
                                }
                                var black = false;
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.color(cards[i]) == 'black') black = true;
                                }
                                player.chooseButton(['弃置一张黑色牌', cards], black)
                                    .set('filterButton', function(button) {
                                        return get.color(button.link) == 'black';
                                    })
                                    .set('ai', function(button) {
                                        return get.value(button.link);
                                    });
                            } else event.finish();
                            "step 2"
                            if (result.bool) {
                                var card = result.links[0];
                                event.target.discard(card, "discard");
                            } else {
                                player.draw();
                                event.finish();
                            }
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 2.0,
                        },
                    },

                    "hx_huimao": {
                        group: ["hx_huimao_1", "hx_huimao_2"],
                        subSkill: {
                            "1": {
                                trigger: {
                                    source: "damageEnd",
                                },
                                filter: function(event, player) {
                                    if (event.getParent(4).name == 'hx_huimao_1') return false;
                                    return player != event.player && event.player && event.player.isAlive();
                                },
                                check: function(event, player) {
                                    return get.effect(event.player, {
                                        name: 'sha'
                                    }, player, player) > 0;
                                },
                                content: function() {
                                    "step 0"
                                    if (player.isLinked()) player.link(false);
                                    else player.link();
                                    "step 1"
                                    if (event.current == undefined) event.current = player;
                                    else if (event.current == trigger.player) event.current = event.current.next;
                                    if (trigger.player.isAlive() && lib.filter.targetEnabled({
                                            name: 'sha'
                                        }, event.current, trigger.player)) {
                                        event.current.chooseToUse({
                                            name: 'sha'
                                        }, trigger.player, '是否对' + get.translation(trigger.player) + '使用一张杀？');
                                    }
                                    "step 2"
                                    event.current = event.current.next;
                                    if (event.current == player || event.current.next == player) {
                                        event.finish();
                                    } else event.goto(1);
                                },
                            },
                            "2": {
                                trigger: {
                                    player: "damageEnd",
                                },
                                filter: function(event, player) {
                                    return player != event.source && event.source && event.source.isAlive();
                                },
                                check: function(event, player) {
                                    return get.effect(event.source, {
                                        name: 'sha'
                                    }, player, player) > 0;
                                },
                                content: function() {
                                    "step 0"
                                    if (player.isLinked()) player.link(false);
                                    else player.link();
                                    "step 1"
                                    if (event.current == undefined) event.current = player;
                                    else if (event.current == trigger.source) event.current = event.current.next;
                                    if (trigger.source.isAlive() && lib.filter.targetEnabled({
                                            name: 'sha'
                                        }, event.current, trigger.source)) {
                                        event.current.chooseToUse({
                                            name: 'sha'
                                        }, trigger.source, '是否对' + get.translation(trigger.source) + '使用一张杀？');
                                    }
                                    "step 2"
                                    event.current = event.current.next;
                                    if (event.current == player || event.current.next == player) {
                                        event.finish();
                                    } else event.goto(1);
                                },
                            },
                        },
                        ai: {
                            threaten: 0.5,
                            expose: 0.5,
                            "maixie_defend": true,
                        }
                    },

                    "hx_bingzhu": {
                        global: "hx_bingzhu_card",
                        forced: true,
                    },
                    "hx_bingzhu_card": {
                        forced: true,
                        mod: {
                            cardname: function(card, player) {
                                var players = game.filterPlayer();
                                if (player.hasSkill("hx_bingzhu")) return;
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i].hasSkill("hx_bingzhu")) {
                                        if ((players[i].isLinked() && player.isLinked()) || (!players[i].isLinked() && !player.isLinked())) {
                                            if (get.suit(card) == 'spade') return "shan";
                                        }
                                        if ((players[i].isLinked() && !player.isLinked()) || (!players[i].isLinked() && player.isLinked())) {
                                            if (get.suit(card) == 'diamond') return "sha";
                                        }
                                    }
                                }
                            },
                        },
                    },

                    "hx_yufen": {
                        trigger: {
                            player: "useCard",
                        },
                        forced: true,
                        filter: function(event, player) {
                            if (!player.isDamaged() || !event.card) return false;
                            if (get.type(event.card) != 'basic') return false;
                            if (get.color(event.card) != 'red') return false;
                            if (event.card.name == 'tao') return false;
                            if (event.card.name == 'jiu' && event.parent.parent.name == '_save') return false;
                            return true;
                        },
                        content: function() {
                            player.recover();
                        },
                        group: ["hx_yufen_buff"],
                        subSkill: {
                            buff: {
                                trigger: {
                                    player: "shaBegin",
                                },
                                filter: function(event, player) {
                                    return player.hp > event.target.hp;
                                },
                                forced: true,
                                content: function() {
                                    trigger.directHit = true;
                                },
                                ai: {
                                    "directHit_ai": true,
                                    skillTagFilter: function(player, tag, arg) {
                                        if (get.attitude(player, arg.target) > 0 || arg.card.name != 'sha') return false;
                                        var hp = arg.target.hp;
                                        return player.hp > hp;
                                    },
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.2,
                            threaten: 0.8,
                            effect: {
                                player: function(card, player, target) {
                                    if (!player.isDamaged()) return;
                                    if (card.name != 'sha' || get.color(card) != 'red') return;
                                    return [1, 2, 1, 0];
                                },
                            },
                        },
                    },

                    "hx_minglve": {
                        trigger: {
                            player: "loseAfter",
                        },
                        frequent: true,
                        filter: function(event, player) {
                            return (!player.countCards('e') && event.es && event.es.length > 0) ||
                                (!player.countCards('h') && event.hs && event.hs.length > 0) ||
                                (!player.countCards('j') && event.js && event.js.length > 0);
                        },
                        content: function() {
                            "step 0"
                            if (!player.countCards('h') && trigger.hs && trigger.hs.length > 0) {
                                player.chooseTarget("明略：选择一名角色，摸一张牌", function(card, player, target) {
                                    return true;
                                }).set('ai', function(target) {
                                    if (get.attitude(player, target) <= 0) return -1;
                                    if (target.maxHp > target.countCards("h")) return target.maxHp - target.countCards("h");
                                    return 0.1;
                                });
                            } else event.goto(2);
                            "step 1"
                            if (result.bool) {
                                result.targets[0].draw();
                            }
                            "step 2"
                            if (!player.countCards('e') && trigger.es && trigger.es.length > 0) {
                                player.chooseTarget("明略：选择一名角色，失去1点体力", function(card, player, target) {
                                    return true;
                                }).set('ai', function(target) {
                                    if (get.attitude(player, target) >= 0) return -1;
                                    return target.maxHp - target.hp + 1;
                                });
                            } else event.goto(4);
                            "step 3"
                            if (result.bool) {
                                result.targets[0].loseHp();
                            }
                            "step 4"
                            if (!player.countCards('j') && trigger.js && trigger.js.length > 0) {
                                player.chooseTarget("明略：选择一名角色，回复1点体力", function(card, player, target) {
                                    return target.isDamaged();
                                }).set('ai', function(target) {
                                    if (get.attitude(player, target) <= 0) return -1;
                                    return target.maxHp - target.hp + 1;
                                });
                            } else event.finish();
                            "step 5"
                            if (result.bool) {
                                result.targets[0].recover();
                            }
                        },
                        ai: {
                            expose: 0.7,
                            threaten: 1.2,
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.type(card) == 'delay') return [1, 2];
                                },
                            },
                            noh: true,
                            noe: true,
                            skillTagFilter: function(player, tag) {
                                if (tag == 'noh') {
                                    if (player.countCards('h') != 1) return false;
                                }
                                if (tag == 'noe') {
                                    if (player.countCards('e') != 1) return false;
                                }
                            },
                        },
                    },

                    "hx_jianxin": {
                        enable: "phaseUse",
                        usable: 1,
                        filter: function(event, player) {
                            return player.countCards('h');
                        },
                        filterTarget: function(card, player, target) {
                            return player != target && target.countCards('h');
                        },
                        content: function() {
                            'step 0'
                            target.discardPlayerCard(player, 'h', 'visible', true);
                            'step 1'
                            player.discardPlayerCard(target, 'visible', true, 'h').set('ai', function(button) {
                                var card = button.link;
                                if (card.name == 'du') return 5;
                                return get.value(card);
                            });
                        },
                        ai: {
                            order: 6,
                            result: {
                                player: function(player, target) {
                                    if (player.hasSkillTag("noh")) return 0;
                                    var cards = player.getCards("h");
                                    var value = 0;
                                    var du = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        value = Math.max(value, get.value(cards[i]));
                                        if (cards[i].name == 'du') du = 1;
                                    }
                                    if (du == 1 || value >= 7) return -2;
                                    return -1;
                                },
                                target: function(player, target) {
                                    if (target.hasSkillTag("noh")) return 0;
                                    else if (target.hp == 1 && target.countCards("h") <= 2) return -2.5;
                                    else if (target.countCards("h") == 1) return -2;
                                    return -1.5;
                                },
                            },
                        },
                    },

                    "hx_nangce": {
                        marktext: "囊",
                        trigger: {
                            player: ["useCardAfter", "respondAfter"],
                        },
                        frequent: true,
                        filter: function(event, player) {
                            if (event.parent.name == 'hx_nangce_extra') return false;
                            return _status.currentPhase != player && event.cards && event.cards.length == 1 && (get.type(event.cards[0]) == 'basic' || get.type(event.cards[0]) == 'trick');
                        },
                        init: function(player) {
                            player.storage.hx_nangce = [];
                        },
                        content: function() {
                            var cards = trigger.cards;
                            player.storage.hx_nangce = player.storage.hx_nangce.concat(cards);
                            player.$gain2(cards);
                            game.log(player, '将' + get.cnNumber(trigger.cards.length) + '张牌置于武将牌上');
                            player.syncStorage('hx_nangce');
                            player.markSkill('hx_nangce');
                        },
                        intro: {
                            content: "cards",
                        },
                        ai: {
                            threaten: 1.3,
                            expose: 0.5,
                        },
                        group: ["hx_nangce_extra"],
                        subSkill: {
                            extra: {
                                trigger: {
                                    global: "useCardAfter",
                                },
                                filter: function(event, player) {
                                    if (event.parent.name == 'hx_nangce_extra') return false;
                                    if (!event.targets || !event.card) return false;
                                    //if(get.info(event.card).complexTarget) return false; 
                                    if (event.targets.length == 0) return false;
                                    if (!lib.filter.cardEnabled(event.card, event.player, event.parent)) return false;
                                    var type = get.type(event.card);
                                    if (type != 'trick') return false;
                                    var card = game.createCard(event.card.name, event.card.suit, event.card.number, event.card.nature);
                                    var targets = event._targets || event.targets;
                                    for (var i = 0; i < targets.length; i++) {
                                        if (!targets[i].isIn()) return false;
                                        if (!event.player.canUse({
                                                name: event.card.name
                                            }, targets[i], false, false)) {
                                            return false;
                                        }
                                    }
                                    var nangces = player.storage.hx_nangce;
                                    for (var i = 0; i < nangces.length; i++) {
                                        if (get.color(nangces[i]) != get.color(event.card)) return true;
                                    }
                                    return false;
                                },
                                check: function(event, player) {
                                    if (get.tag({
                                            name: event.card.name
                                        }, 'norepeat')) return false;
                                    var card = game.createCard(event.card.name, event.card.suit, event.card.number, event.card.nature);
                                    var effect = 0;
                                    var targets = event.targets;
                                    for (var i = 0; i < targets.length; i++) {
                                        effect += get.effect(targets[i], event.card, event.player, player);
                                    }

                                    if (effect <= 0) return false;
                                    return true;
                                },
                                content: function() {
                                    'step 0'
                                    player.chooseCardButton('弃置一张武将牌上的牌', player.storage.hx_nangce, function(button) {
                                        return true;
                                    }, true).set('ai', function(button) {
                                        return 1;
                                    }).set('filterButton', function(button) {
                                        return get.color(button.link) != get.color(trigger.card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.storage.hx_nangce.remove(result.links[0]);
                                        player.discard(result.links[0]);
                                        if (player.storage.hx_nangce.length) player.markSkill('hx_nangce');
                                        else player.unmarkSkill('hx_nangce');
                                        game.log(player, '令', trigger.player, '的', trigger.card, '额外结算一次');
                                        var card = game.createCard(trigger.card.name, trigger.card.suit, trigger.card.number, trigger.card.nature);
                                        trigger.player.useCard(card, (trigger._targets || trigger.targets).slice(0));
                                    } else event.finish();
                                },
                            },
                        },
                    },

                    "hx_ruliao": {
                        trigger: {
                            player: ["useCardAfter", "respondAfter"],
                        },
                        marktext: "料",
                        filter: function(event, player) {
                            if (_status.currentPhase != player) return false;
                            return event.cards && event.cards.length == 1 && (get.type(event.cards[0]) == 'basic' || get.type(event.cards[0]) == 'trick');
                        },
                        frequent: true,
                        init: function(player) {
                            player.storage.hx_ruliao = [];
                        },
                        content: function() {
                            player.storage.hx_ruliao = player.storage.hx_ruliao.concat(trigger.cards);
                            player.$gain2(trigger.cards);
                            game.log(player, '将' + get.cnNumber(trigger.cards.length) + '张牌置于武将牌上');
                            player.syncStorage('hx_ruliao');
                            player.markSkill('hx_ruliao');
                        },
                        intro: {
                            content: "cards",
                        },
                        ai: {
                            threaten: 1.3,
                            expose: 0.5,
                        },
                        group: ["hx_ruliao_cancel"],
                        subSkill: {
                            cancel: {
                                trigger: {
                                    global: ["useCard", "respondEnd"],
                                },
                                filter: function(event, player) {
                                    if (event.player == player) return false;
                                    if (!event.card) return false;
                                    var type = get.type(event.card);
                                    if (type != 'basic') return false;
                                    var ruliaos = player.storage.hx_ruliao;
                                    for (var i = 0; i < ruliaos.length; i++) {
                                        if (get.color(ruliaos[i]) == get.color(event.card)) return true;
                                    }
                                    return false;
                                },
                                check: function(event, player) {
                                    if (event.name == 'useCard') {
                                        var effect = 0;
                                        var targets = event.targets;
                                        for (var i = 0; i < targets.length; i++) {

                                            effect += get.effect(targets[i], event.card, event.player, player);
                                        }

                                        if (effect >= 0) return false;
                                        return true;
                                    }
                                    if (event.name == 'respond') {
                                        if (get.attitude(player, event.player) < 0) return true;
                                        return false;
                                    }
                                    return false;
                                },
                                content: function() {
                                    'step 0'
                                    player.chooseCardButton('弃置一张武将牌上的牌', player.storage.hx_ruliao, function(button) {
                                        return true;
                                    }, true).set('ai', function(button) {
                                        return 1;
                                    }).set('filterButton', function(button) {
                                        return get.color(button.link) == get.color(trigger.card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.storage.hx_ruliao.remove(result.links[0]);
                                        player.discard(result.links[0]);
                                        if (player.storage.hx_ruliao.length) player.markSkill('hx_ruliao');
                                        else player.unmarkSkill('hx_ruliao');
                                        if (trigger.name == 'respond') {
                                            if (trigger.parent.result) {
                                                trigger.parent.result.bool = false;
                                            }
                                        }
                                        trigger.cancel();
                                        game.log(player, '令', trigger.player, '的', trigger.card, '无效');

                                    } else event.finish();
                                },
                            },
                        },
                    },

                    "hx_jinxun": {
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        filter: function(event, player) {
                            return !player.getStat('damage');
                        },
                        content: function() {
                            player.draw();
                            player.loseHp();
                        },
                    },

                    "hx_duozhen": {
                        trigger: {
                            player: ["useCard", "respond"],
                        },
                        filter: function(event, player) {
                            if (_status.currentPhase == player) return false;
                            if (event.card.name != 'shan') return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && players[i].countCards("e") > 0) return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && players[i].countCards("e") > 0 && get.attitude(player, players[i]) <= 0) {
                                    var cards = players[i].getCards('e');
                                    for (var j = 0; j < cards.length; j++) {
                                        var card = cards[j];
                                        var sub = get.subtype(card);
                                        if (!player.getEquip(sub) && get.equipValue(card) > 0) return true;
                                        if (player.getEquip(sub) && get.equipValue(card) >= get.equipValue(player.getEquip(sub))) return true;
                                    }
                                }
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.chooseTarget('请选择获得装备的角色', function(card, player, target) {
                                return target.countCards("e") > 0;
                            }).ai = function(target) {
                                return -get.attitude(player, target) + 0.1;
                            };
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.chooseCardButton('获得' + get.translation(target) + '装备区的一张牌', target.getCards('e'), 1, false).ai = function(button) {
                                    var sub = get.subtype(button.link);
                                    if (!player.getEquip(sub)) return get.equipValue(button.link);
                                    return get.equipValue(button.link) - get.equipValue(player.getEquip(sub)) + 0.1;
                                };
                            }
                            'step 2'
                            if (result.bool) {
                                var eq = result.links[0];
                                player.equip(eq);
                                player.chooseToUse({
                                    name: 'sha'
                                }, '夺阵：是否使用一张杀？').logSkill = 'hx_duozhen';
                            }
                        },
                        ai: {
                            expose: 0.7,
                            threaten: 2.2,
                        },
                    },

                    "hx_qizheng": {
                        group: ["hx_qizheng_sha", "hx_qizheng_tao", "hx_qizheng_setup"],
                        init: function(player) {
                            player.storage.hx_qizheng = 0;
                        },
                        ai: {
                            expose: 0.7,
                            threaten: 1.5,
                        },
                    },

                    "hx_qizheng_sha": {
                        trigger: {
                            source: "damageBegin1",
                        },
                        filter: function(event, player) {
                            if (!event.parent) return false;
                            var evt = event.parent;
                            if (!evt.card) return false;
                            if (!evt.targets || evt.targets.length != 1) return false;
                            if (evt.card.name != 'sha') return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != evt.targets[0] && players[i].isDamaged()) return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var evt = event.parent;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != evt.targets[0] && players[i].isDamaged() && get.recoverEffect(players[i], player, player) > 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            var tri = trigger.parent;
                            player.chooseTarget("选择一名角色恢复" + trigger.num + "点体力", function(card, player, target) {
                                return target.isDamaged() && target != tri.targets[0];
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.recoverEffect(target, player, player);
                            });
                            "step 1"
                            if (result.bool) {
                                var target = result.targets[0];
                                player.line(target, 'green');
                                target.recover(trigger.num);
                                player.storage.hx_qizheng += 1;
                            }
                        },
                        sub: true,
                    },

                    "hx_qizheng_tao": {
                        trigger: {
                            source: "recoverBegin",
                        },
                        filter: function(event, player) {
                            if (!event.parent) return false;
                            var evt = event.parent;
                            if (!evt.card) return false;
                            if (!evt.targets || evt.targets.length != 1) return false;
                            if (evt.card.name == 'tao') return true;
                            if (evt.card.name == 'jiu' && evt.parent.parent.parent.name == '_save') return true;
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var evt = event.parent;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != evt.targets[0] && get.damageEffect(players[i], player, player) > 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            var tri = trigger.parent;
                            player.chooseTarget("选择一名角色造成" + trigger.num + "点伤害", function(card, player, target) {
                                return target != tri.targets[0];
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.damageEffect(target, player, player);
                            });
                            "step 1"
                            if (result.bool) {
                                var target = result.targets[0];
                                player.line(target, 'red');
                                target.damage(trigger.num);
                                player.storage.hx_qizheng += 1;
                            }
                        },
                        sub: true,
                    },

                    "hx_qizheng_setup": {
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        popup: false,
                        content: function() {
                            player.storage.hx_qizheng = 0;
                        },
                        sub: true,
                    },

                    "hx_gaoyin": {
                        unique: true,
                        mark: true,
                        skillAnimation: true,
                        juexingji: true,
                        animationColor: "soil",
                        limited: true,
                        forced: true,
                        trigger: {
                            //global:"phaseAfter",
                            global: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            return player.storage.hx_qizheng >= 2;
                        },
                        content: function() {
                            player.awakenSkill('hx_gaoyin');
                            player.loseMaxHp();
                            player.removeSkill('hx_qizheng');
                            player.addSkill('hx_qizheng_plus');
                        },
                        intro: {
                            content: "limited",
                        },
                    },

                    "hx_qizheng_plus": {
                        group: ["hx_qizheng_sha", "hx_qizheng_tao", "hx_qizheng_setup", "hx_qizheng_lost", "hx_qizheng_draw", "hx_qizheng_damage"],
                        ai: {
                            expose: 0.7,
                            threaten: 1.5,
                        },
                    },

                    "hx_qizheng_lost": {
                        trigger: {
                            global: "loseEnd",
                        },
                        filter: function(event, player) {
                            if (!event.parent.parent.parent) return false;
                            var evt = event.parent.parent.parent;
                            if (!evt.card) return false;
                            if (evt.card.name != 'guohe' && evt.card.name != 'shunshou') return false;
                            if (evt.player != player) return false;
                            if (!evt.targets || evt.targets.length != 1) return false;
                            return true;
                        },
                        check: function(event, player) {
                            return true;
                        },
                        content: function() {
                            'step 0'
                            var tri = trigger.parent.parent.parent;
                            player.chooseTarget("选择一名角色摸" + trigger.cards.length + "张牌", function(card, player, target) {
                                return target != tri.targets[0];
                            }).set('ai', function(target) {
                                if (get.attitude(player, target) <= 0) return -1;
                                if (target.countCards("h") < 3) return 3 - target.countCards("h");
                                return 1;
                            });
                            "step 1"
                            if (result.bool) {
                                var target = result.targets[0];
                                player.line(target, 'green');
                                target.draw(trigger.cards.length);
                            }
                        },
                        sub: true,
                    },

                    "hx_qizheng_draw": {
                        trigger: {
                            global: "gainEnd",
                        },
                        filter: function(event, player) {
                            if (!event.parent.parent) return false;
                            var evt = event.parent.parent;
                            if (!evt.card) return false;
                            if (evt.card.name != 'wuzhong' && evt.card.name != 'zengbin') return false;
                            if (evt.player != player) return false;
                            if (!evt.targets || evt.targets.length != 1) return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != evt.player && players[i].countCards("he") > 0) return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var evt = event.parent.parent;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != evt.player && players[i].countCards("he") > 0 && get.attitude(player, players[i]) < 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            "step 0"
                            var tri = trigger.parent.parent;
                            player.chooseTarget("选择一名角色弃" + trigger.cards.length + "张牌", function(card, player, target) {
                                return target != tri.targets[0];
                            }).set('ai', function(target) {
                                if (get.attitude(player, target) > 0) return -1;
                                if (target.countCards("he") < trigger.cards.length) return target.countCards("h");
                                return 1;
                            });
                            "step 1"
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.line(target, 'red');
                                target.chooseToDiscard(true, trigger.cards.length);
                            }
                            "step 2"
                            if (result.bool) {
                                if (trigger.parent.parent.card.name == 'zengbin') {
                                    event.target.draw(2);
                                }
                            }
                        },
                        sub: true,
                    },

                    "hx_qizheng_damage": {
                        trigger: {
                            source: "damageBegin1",
                        },
                        filter: function(event, player) {
                            if (!event.parent) return false;
                            var evt = event.parent;
                            if (!evt.card) return false;
                            if (evt.card.name != 'juedou' && evt.card.name != 'huogong') return false;
                            if (evt.player != player) return false;
                            if (!evt.targets || evt.targets.length != 1) return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != evt.targets[0] && players[i].isDamaged()) return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var evt = event.parent;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != evt.targets[0] && players[i].isDamaged() && get.recoverEffect(players[i], player, player) > 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            var tri = trigger.parent;
                            player.chooseTarget("选择一名角色恢复" + trigger.num + "点体力", function(card, player, target) {
                                return target.isDamaged() && target != tri.targets[0];
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.recoverEffect(target, player, player);
                            });
                            "step 1"
                            if (result.bool) {
                                var target = result.targets[0];
                                player.line(target, 'green');
                                target.recover(trigger.num);
                            }
                        },
                        sub: true,
                    },

                    "hx_jishuo": {
                        marktext: "羁",
                        forced: true,
                        trigger: {
                            global: "useCardAfter",
                        },
                        init: function(player) {
                            player.storage.hx_jishuo = [];
                        },
                        filter: function(event, player) {
                            if (!event.cards) return false;
                            if (event.player == player) return false;
                            if (event.cards) {
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (get.position(event.cards[i]) == 'd' && get.type(event.cards[i]) == 'basic' && get.color(event.cards[i]) == 'black') return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            var cards = [];
                            for (var i = 0; i < trigger.cards.length; i++) {
                                if (get.position(trigger.cards[i]) == 'd' && get.type(trigger.cards[i]) == 'basic' && get.color(trigger.cards[i]) == 'black') cards.add(trigger.cards[i])
                            }
                            player.storage.hx_jishuo = player.storage.hx_jishuo.concat(cards);
                            player.$gain2(cards);
                            game.log(player, '将' + get.cnNumber(cards.length) + '张牌置于武将牌上');
                            player.syncStorage('hx_jishuo');
                            player.markSkill('hx_jishuo');
                        },
                        intro: {
                            content: "cards",
                        },
                        group: ["hx_jishuo_place"],
                        subSkill: {
                            place: {
                                forced: true,
                                trigger: {
                                    player: "phaseJudgeBefore",
                                },
                                filter: function(event, player) {
                                    return player.storage.hx_jishuo.length > 0 && !player.hasJudge("bingliang");
                                },
                                content: function() {
                                    player.addJudge('bingliang', player.storage.hx_jishuo[0]);
                                    player.$give(player.storage.hx_jishuo[0], player);
                                    player.storage.hx_jishuo.remove(player.storage.hx_jishuo[0]);
                                    player.syncStorage('hx_jishuo');
                                    player.markSkill('hx_jishuo');
                                },
                                sub: true,
                            }
                        },
                    },

                    "hx_safu": {
                        trigger: {
                            player: "phaseBegin",
                        },
                        init: function(player) {
                            player.storage.hx_jishuo_max = -1;
                            player.storage.hx_jishuo_min = 14;
                            player.storage.hx_jishuo_cnt = 0;
                            player.storage.hx_jishuo_s = 0;
                            player.storage.hx_jishuo_c = 0;
                        },
                        filter: function(event, player) {
                            var cards = player.storage.hx_jishuo;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                cards = cards.concat(players[i].getCards("ej"));
                            }
                            /*for(var i = 0;i<cards.length;i++){
                                for(var j = i+1;j<cards.length;j++){
                                    if(cards[i].number+1 == cards[j].number || cards[i].number-1 == cards[j].number) return true;
                                }
                            }
                            return false;*/
                            return cards.length > 0;
                        },
                        content: function() {
                            'step 0'
                            if (player.storage.hx_jishuo.length > 0) {
                                player.chooseCardButton(player.storage.hx_jishuo, 1, "是否弃置一张“羁朔”牌？")
                                    .set('filterButton', function(button) {
                                        if (player.storage.hx_jishuo_cnt == 0) return true;
                                        if (button.link.number == player.storage.hx_jishuo_max + 1 || button.link.number == player.storage.hx_jishuo_min - 1) return true;
                                        return false;
                                    }).set('ai', function(card) {
                                        var max = Math.max(player.storage.hx_jishuo_max, card.number);
                                        var min = Math.min(player.storage.hx_jishuo_min, card.number);
                                        var players = game.filterPlayer();
                                        var k = 0;
                                        for (var i = 0; i < players.length; i++) {
                                            var ecards = players[i].getCards("e");
                                            var jcards = players[i].getCards("j");
                                            for (var j = 0; j < ecards.length; j++) {
                                                if (ecards[j].number == max + 1 || ecards[j].number == min - 1) {
                                                    if (get.attitude(player, players[i]) > 0 && players[i].hp < players[i].maxHp && ecards[j].name == 'baiyin') return 5;
                                                    if (get.attitude(player, players[i]) < 0 && ecards[j].name != 'baiyin') return 5;
                                                }
                                                if (ecards[j].number == player.storage.hx_jishuo_max + 1 || ecards[j].number == player.storage.hx_jishuo_min - 1) {
                                                    if (get.attitude(player, players[i]) > 0 && players[i].hp < players[i].maxHp && ecards[j].name == 'baiyin') k = 1;
                                                    if (get.attitude(player, players[i]) < 0 && ecards[j].name != 'baiyin') k = 1;
                                                }
                                            }
                                            for (var j = 0; j < jcards.length; j++) {
                                                if (jcards[j].number == max + 1 || jcards[j].number == min - 1) {
                                                    if (get.attitude(player, players[i]) > 0) return 6;
                                                }
                                                if (jcards[j].number == player.storage.hx_jishuo_max + 1 || jcards[j].number == player.storage.hx_jishuo_min - 1) {
                                                    if (get.attitude(player, players[i]) > 0) k = 1;
                                                }
                                            }
                                        }
                                        if (k == 1) return -1;
                                        return 1;
                                    });
                            } else event.goto(2);;
                            'step 1'
                            if (result.bool) {
                                var card = result.links[0];
                                player.storage.hx_jishuo.remove(card);
                                player.discard(card, "lose");
                                player.storage.hx_jishuo_max = Math.max(player.storage.hx_jishuo_max, card.number);
                                player.storage.hx_jishuo_min = Math.min(player.storage.hx_jishuo_min, card.number);
                                player.storage.hx_jishuo_cnt += 1;
                                player.storage.hx_jishuo_s = 1;
                                event.goto(6);
                            } else event.goto(2);
                            'step 2'
                            player.chooseTarget('请选择一名角色，弃置其场上一张牌', function(card, player, target) {
                                if (player.storage.hx_jishuo_cnt == 0) return target.countCards("ej") > 0;
                                var cards = target.getCards("ej");
                                for (var i = 0; i < cards.length; i++) {
                                    if (cards[i].number == player.storage.hx_jishuo_max + 1 || cards[i].number == player.storage.hx_jishuo_min - 1) return true;
                                }
                                return false;
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                var att = get.attitude(player, target);

                                if (att > 0) {
                                    var js = target.getCards('j');
                                    if (js.length) {
                                        var jj = js[0].viewAs ? {
                                            name: js[0].viewAs
                                        } : js[0];
                                        var flag = 0;
                                        for (var i = 0; i < js.length; i++) {
                                            if (js[i].number == player.storage.hx_jishuo_max + 1 || js[i].number == player.storage.hx_jishuo_min - 1 || player.storage.hx_jishuo_cnt == 0) flag = 1;
                                        }
                                        if (flag == 1 && (jj.name == 'guohe' || js.length > 1 || get.effect(target, jj, target, player) < 0)) {
                                            return 2 * att;
                                        }
                                    }
                                    if (target.getEquip('baiyin') && target.isDamaged() &&
                                        get.recoverEffect(target, player, player) > 0 && player.storage.hx_jishuo_min == 2) {
                                        if (target.hp == 1 && !target.hujia) return 1.6 * att;
                                        if (target.hp == 2) return 0.01 * att;
                                        return 0;
                                    }
                                }
                                var es = target.getCards('e');
                                var noe = target.hasSkillTag('noe');
                                var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged() && player.storage.hx_jishuo_min == 2);
                                if (noe || noe2) return 0;
                                if (att <= 0 && !es.length) return 1.5 * att;
                                var flag = 0;
                                for (var i = 0; i < es.length; i++) {
                                    if (es[i].number == player.storage.hx_jishuo_max + 1 || es[i].number == player.storage.hx_jishuo_min - 1 || player.storage.hx_jishuo_cnt == 0) flag = 1;
                                }
                                if (flag == 1) return -1.5 * att;
                                return 0;
                            });

                            'step 3'
                            if (result.bool) {
                                event.target = result.targets[0];
                                event.target.addExpose(0.1);
                                player.logSkill('hx_safu', event.target);
                                game.delayx();
                            } else event.goto(6);
                            'step 4'
                            if (event.target) {
                                player.discardPlayerCard(event.target, "ej").set('filterButton', function(button) {
                                    if (player.storage.hx_jishuo_cnt == 0) return true;
                                    return (button.link.number == player.storage.hx_jishuo_max + 1 || button.link.number == player.storage.hx_jishuo_min - 1);
                                }).set('ai', function(button) {
                                    var tar = event.target;
                                    var att = get.attitude(player, tar);
                                    if (att > 0) {
                                        if (get.type(button.link) == 'delay' && button.link.name != 'XS_mantian') return 10;
                                        return -1;
                                    } else {
                                        if (get.type(button.link) == 'delay' && button.link.name != 'XS_mantian') return -1;
                                        return 1 + get.value(button.link);
                                    }
                                });
                            } else event.goto(6);
                            'step 5'
                            if (result.bool) {
                                player.storage.hx_jishuo_max = Math.max(player.storage.hx_jishuo_max, result.cards[0].number);
                                player.storage.hx_jishuo_min = Math.min(player.storage.hx_jishuo_min, result.cards[0].number);
                                player.storage.hx_jishuo_cnt += 1;
                                player.storage.hx_jishuo_c = 1;
                            }
                            'step 6'
                            var bool = game.hasPlayer(function(current) {
                                var cards = current.getCards("ej");
                                for (var i = 0; i < cards.length; i++) {
                                    if (cards[i].number == player.storage.hx_jishuo_max + 1 || cards[i].number == player.storage.hx_jishuo_min - 1) return true;
                                }
                                return false;
                            });
                            var bool1 = false;
                            var cards = player.storage.hx_jishuo;
                            for (var i = 0; i < cards.length; i++) {
                                if (cards[i].number == player.storage.hx_jishuo_max + 1 || cards[i].number == player.storage.hx_jishuo_min - 1) bool1 = true;
                            }

                            if (player.storage.hx_jishuo_s + player.storage.hx_jishuo_c == 1 && (bool || bool1)) {
                                player.storage.hx_jishuo_s = 0;
                                player.storage.hx_jishuo_c = 0;
                                if (bool1 == true) event.goto(0);
                                else event.goto(2);
                            } else event.goto(7);
                            'step 7'
                            player.draw(player.storage.hx_jishuo_cnt);
                            player.storage.hx_jishuo_max = -1;
                            player.storage.hx_jishuo_min = 14;
                            player.storage.hx_jishuo_cnt = 0;
                            player.storage.hx_jishuo_s = 0;
                            player.storage.hx_jishuo_c = 0;
                        },
                        ai: {
                            expose: 0.6,
                            threaten: 1.5,
                        },
                    },

                    "hx_jingyu": {
                        forced: true,
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        init: function(player) {
                            player.storage.hx_jingyu = player.getAttackRange();
                        },
                        content: function() {
                            player.storage.hx_jingyu = player.getAttackRange();
                            player.addTempSkill("hx_jingyu_mod", "phaseUseAfter")
                        },
                    },

                    "hx_jingyu_mod": {
                        forced: true,
                        mod: {
                            selectTarget: function(card, player, range) {
                                if (range[1] == -1) return;
                                if (card.name == 'sha') range[1] += player.storage.hx_jingyu;
                            },
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num += player.storage.hx_jingyu;
                            },
                        },
                    },

                    "hx_qudi": {
                        trigger: {
                            global: "useCardBefore",
                        },
                        filter: function(event, player) {
                            if (player.hasSkill('hx_qudi_temp')) return false;
                            if (event.player == player) return false;
                            if (event.card.name != 'sha') return false;
                            if (event.targets.length != 1) return false;
                            return true;
                        },
                        check: function(event, player) {
                            var eff = get.effect(event.targets[0], event.card, event.player, player);
                            return eff < 0;
                        },
                        "prompt2": function(event, player) {
                            return '是否为' + get.translation(event.player) + '指定' + get.translation(event.targets[0]) + '为目标的' + get.translation(event.card) + '重新指定使用者和目标？';
                        },
                        content: function() {
                            "step 0"
                            var targetprompt = ['使用', '目标'];
                            player.chooseTarget(2, '为' + get.translation(trigger.card) + '重新指定使用者和目标。', function(card, player, target) {
                                if (!ui.selected.targets.length) return true;
                                else {
                                    var cd = _status.event.getTrigger().card;
                                    var tp = ui.selected.targets[0];
                                    return lib.filter.targetEnabled(cd, tp, target);
                                }
                            }).set('ai', function(target) {
                                var card = _status.event.getTrigger().card;
                                var att = get.attitude(player, target);
                                if (ui.selected.targets.length == 1) {
                                    return -att;
                                } else return att;
                            }).set('targetprompt', targetprompt);
                            "step 1"
                            if (result.bool) {
                                if (!player.hasSkill('hx_qudi_temp')) {
                                    player.addTempSkill('hx_qudi_temp', 'roundStart');
                                }
                                trigger.player = result.targets[0];
                                trigger.targets.remove(trigger.targets[0]);
                                trigger.targets.push(result.targets[1]);
                            } else event.finish();
                        },
                        ai: {
                            expose: 0.5,
                        },
                        /*group:["hx_qudi_dam"],
                        subSkill:{
                            dam:{
                                trigger:{
                                    player:"damageEnd",
                                },
                                filter:function (event,player){ 
                                    return event.num>0&&player.hasSkill('hx_qudi_temp'); 
                                },
                                forced:true,
                                content:function (){ 
                                    player.removeSkill('hx_qudi_temp'); 
                                },
                                sub:true,
                            },
                            temp:{
                                charlotte:true,
                                sub:true,
                            },
                        },*/
                    },

                    "hx_qudi_temp": {

                    },

                    "hx_xueci": {
                        trigger: {
                            source: "damageBegin1",
                        },
                        global: "hx_xueci_1",
                        filter: function(event, player) {
                            if (player.hasSkill('hx_xueci_temp')) return false;
                            if (!event.parent) return false;
                            var evt = event.parent;
                            if (!evt.card) return false;
                            if (!evt.targets) return false;
                            if (evt.card.name != 'sha') return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].isDamaged()) return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var evt = event.parent;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].isDamaged() && get.recoverEffect(players[i], player, player) > 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            var tri = trigger.parent;
                            player.chooseTarget("选择一名角色恢复1点体力", function(card, player, target) {
                                return target.isDamaged();
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.recoverEffect(target, player, player);
                            });
                            "step 1"
                            if (result.bool) {
                                if (!player.hasSkill('hx_xueci_temp')) {
                                    player.addTempSkill('hx_xueci_temp', 'roundStart');
                                }
                                var target = result.targets[0];
                                player.line(target, 'green');
                                target.recover();
                            }
                        },
                    },

                    "hx_xueci_1": {
                        trigger: {
                            source: "damageBegin1",
                        },
                        filter: function(event, player) {
                            if (player.hasSkill("hx_xueci")) return false;
                            if (player.hasSkill('hx_xueci_temp')) return false;
                            if (!event.parent) return false;
                            var evt = event.parent;
                            if (!evt.card) return false;
                            if (!evt.targets) return false;
                            if (evt.card.name != 'sha') return false;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].isDamaged() && players[i].hasSkill("hx_xueci")) return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            var evt = event.parent;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].isDamaged() && players[i].hasSkill("hx_xueci") && get.recoverEffect(players[i], player, player) > 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            var tri = trigger.parent;
                            player.chooseTarget("选择一名角色恢复1点体力", function(card, player, target) {
                                return target.isDamaged() && target.hasSkill("hx_xueci");
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.recoverEffect(target, player, player);
                            });
                            "step 1"
                            if (result.bool) {
                                if (!player.hasSkill('hx_xueci_temp')) {
                                    player.addTempSkill('hx_xueci_temp', 'roundStart');
                                }
                                var target = result.targets[0];
                                player.line(target, 'green');
                                target.recover();
                            }
                        },
                    },

                    "hx_xueci_temp": {

                    },

                    "hx_tianwen": {
                        enable: "chooseToUse",
                        animationStr: "天问",
                        direct: true,
                        init: function(player) {
                            player.storage.hx_tianwen = 0;
                        },
                        filter: function(event, player) {
                            if (player.storage.hx_tianwen != 0) return false;
                            if (event.type == 'dying') {
                                if (player != event.dying) return false;
                                return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.storage.hx_tianwen = 1;
                            player.judge(function(card) {
                                var check;
                                if (get.color(card) == 'red') return 3;
                                return 0;
                            });
                            'step 1'
                            if (result.color && result.color == 'red') {
                                if (player.hp < 1) {
                                    player.recover(1 - player.hp);
                                }
                            }
                        },
                        ai: {
                            order: 9,
                            save: true,
                            result: {
                                player: 10,
                            },
                        },
                        group: ["hx_tianwen_after"],
                        subSkill: {
                            after: {
                                trigger: {
                                    player: "dyingAfter",
                                },
                                filter: function(event, player) {
                                    return event.player == player && player.isAlive();
                                },
                                forced: true,
                                frequent: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_tianwen = 0;
                                },
                            },
                        },
                    },

                    "hx_yundao": {
                        trigger: {
                            global: "dying",
                        },
                        check: function(event, player) {
                            return get.attitude(player, event.player) > 0;
                        },
                        logTarget: "player",
                        derivation: "gzyinghun",
                        content: function() {
                            "step 0"
                            trigger.player.chooseTarget(get.prompt2('gzyinghun'), function(card, player, target) {
                                return trigger.player != target;
                            }).set('ai', function(target) {
                                var player = trigger.player;
                                if (player.getDamagedHp() == 1 && target.countCards('he') == 0) {
                                    return 0;
                                }
                                if (get.attitude(trigger.player, target) > 0) {
                                    return 10 + get.attitude(trigger.player, target);
                                }
                                if (player.getDamagedHp() == 1) {
                                    return -1;
                                }
                                return 1;
                            });
                            "step 1"
                            if (result.bool) {
                                event.num = trigger.player.getDamagedHp();
                                trigger.player.logSkill(event.name, result.targets);
                                event.target = result.targets[0];
                                if (event.num == 1) {
                                    event.directcontrol = true;
                                } else {
                                    var str1 = '摸' + get.cnNumber(event.num, true) + '弃一';
                                    var str2 = '摸一弃' + get.cnNumber(event.num, true);
                                    trigger.player.chooseControl(str1, str2, function(event, player) {
                                        return _status.event.choice;
                                    }).set('choice', get.attitude(trigger.player, event.target) > 0 ? str1 : str2);
                                    event.str = str1;
                                }
                            } else {
                                event.finish();
                            }
                            "step 2"
                            if (event.directcontrol || result.control == event.str) {
                                event.target.draw(event.num);
                                event.target.chooseToDiscard(true, 'he');
                            } else {
                                event.target.draw();
                                event.target.chooseToDiscard(event.num, true, 'he');
                            }
                        },
                        ai: {
                            threaten: 2,
                            expose: 0.8,
                        },
                    },

                    "hx_shilie": {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        init: function(player) {
                            player.storage.hx_shilie_damage = 0;
                        },
                        filter: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && players[i].countCards("h") > 0) return true;
                            }
                            return false;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player && players[i].countCards("h") > 0 && get.attitude(player, players[i]) < 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            player.showHandcards();
                            player.chooseUseTarget("huogong", true, false);
                        },
                        ai: {
                            effect: {
                                player: function(card, player) {
                                    if (card.name == 'huogong') {
                                        return [1, 1];
                                    }
                                },
                            },
                        },
                        group: ["hx_shilie_discard", "hx_shilie_place", "hx_shilie_damaged"],
                        subSkill: {
                            discard: {
                                trigger: {
                                    player: ["loseAfter"],
                                },
                                filter: function(event, player) {
                                    if (!event.parent) return false;
                                    if (!event.parent.parent) return false;
                                    if (!event.parent.parent.parent) return false;
                                    if (!event.parent.parent.parent.card) return false;
                                    return event.parent.parent.parent.card.name == 'huogong';
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                content: function() {
                                    player.draw();
                                },
                                sub: true,
                            },
                            place: {
                                trigger: {
                                    player: "useCardAfter",
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                filter: function(event, player) {
                                    return event.card.name == 'huogong';
                                },
                                content: function() {
                                    if (player.storage.hx_shilie_damage == 0) {
                                        var targets = trigger.targets;
                                        for (var i = 0; i < targets.length; i++) {
                                            trigger.targets[0].chooseToDiscard(true);
                                        }
                                    } else player.storage.hx_shilie_damage = 0;
                                },
                                sub: true,
                            },
                            damaged: {
                                trigger: {
                                    source: "damageEnd",
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                filter: function(event, player) {
                                    return event.card && event.card.name == 'huogong';
                                },
                                content: function() {
                                    player.storage.hx_shilie_damage = 1;
                                },
                                sub: true,
                            },
                        },
                    },


                    "hx_zhifeng": {
                        group: ["hx_zhifeng_miss", "hx_zhifeng_sha"],
                        subSkill: {
                            miss: {
                                trigger: {
                                    player: "shaMiss",
                                },
                                filter: function(event, player) {
                                    return event.target;
                                },
                                check: function(event, player) {
                                    return get.attitude(player, event.target) < 0 && game.hasPlayer(function(current) {
                                        return get.distance(player, current) <= 1;
                                    });
                                },
                                content: function() {
                                    "step 0"
                                    var near_players = [];
                                    var temp = player.next;
                                    while (temp != player) {
                                        if (temp != player && temp != trigger.target && get.distance(player, temp) <= 1) near_players.add(temp);
                                        temp = temp.next;
                                    }
                                    player.storage.hx_zhifeng_players = near_players;
                                    player.storage.hx_zhifeng_cnt = 0;
                                    if (player.storage.hx_zhifeng_players.length == 0) event.finish();
                                    "step 1"
                                    if (event.current == undefined) event.current = player.storage.hx_zhifeng_players[player.storage.hx_zhifeng_cnt];
                                    if (trigger.target.isAlive() && lib.filter.targetEnabled({
                                            name: 'sha'
                                        }, event.current, trigger.target)) {
                                        event.current.chooseToUse({
                                            name: 'sha'
                                        }, trigger.target, '是否对' + get.translation(trigger.target) + '使用一张杀？');
                                    }
                                    "step 2"
                                    player.storage.hx_zhifeng_cnt += 1;
                                    if (player.storage.hx_zhifeng_cnt == player.storage.hx_zhifeng_players.length) {
                                        event.finish();
                                    } else event.goto(1);
                                },
                                sub: true,
                            },
                            sha: {
                                trigger: {
                                    source: "damageEnd",
                                },
                                filter: function(event, player) {
                                    if (event._notrigger.contains(event.player)) return false;
                                    if (event.player == player) return false;
                                    return event.card && event.card.name == 'sha' && event.player.countCards('h');
                                },
                                check: function(event, player) {
                                    return get.attitude(player, event.player) < 0;
                                },
                                content: function() {
                                    "step 0"
                                    player.chooseCardButton(trigger.player, trigger.player.getCards('h')).set('filterButton', function(button) {
                                        return get.type(button.link) == 'basic';
                                    }).set('ai', function(button) {
                                        return get.value(button.link);
                                    });
                                    "step 1"
                                    if (result.bool) {
                                        trigger.player.discard(result.links[0], player);
                                    }
                                },
                                sub: true,
                            },
                        },
                    },

                    "hx_huazhen": {
                        trigger: {
                            target: "useCardToBefore",
                        },
                        filter: function(event, player) {
                            return event.player != player && event.card && event.targets && event.targets.length == 1;
                        },
                        check: function(event, player) {
                            return get.effect(player, event.card, event.player, player) < 0;
                        },
                        content: function() {
                            "step 0"
                            var effect = get.effect(player, trigger.card, trigger.player, player);
                            player.judge(function(card) {
                                if (get.color(trigger.card) != get.color(card)) return -effect;
                                return 0;
                            });

                            "step 1"
                            if (result.color) {
                                if (result.color != get.color(trigger.card)) {
                                    game.log(trigger.player, "使用的", trigger.card, "被取消");
                                    trigger.cancel();
                                }
                            }
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target) {
                                    return 0.5;
                                },
                            },
                            threaten: 0.8,
                        },
                    },

                    "hx_genggu": {
                        trigger: {
                            player: "damageEnd",
                        },
                        forced: true,
                        filter: function(event, player) {
                            return event.source && event.source != player && event.source.hp > player.hp;
                        },
                        content: function() {
                            trigger.source.loseHp();
                        },
                        ai: {
                            "maixie_defend": true,
                            effect: {
                                target: function(card, player, target) {
                                    if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') && player.hp >= target.hp) return [1, 0, 1, -2];
                                },
                            },
                        },
                        group: ["hx_genggu_dying"],
                        subSkill: {
                            dying: {
                                trigger: {
                                    player: "dying",
                                },
                                forced: true,
                                filter: function(event, player) {
                                    return event.getParent().name == 'damage' && event.source && event.source.countCards('h');
                                },
                                content: function() {
                                    //trigger.source.chooseToDiscard('he',true);
                                    trigger.source.discard(trigger.source.getCards("h"));
                                },
                            }
                        },
                    },

                    "hx_hanqing": {
                        trigger: {
                            player: "loseEnd",
                        },
                        forced: true,
                        silent: true,
                        popup: false,
                        init: function(player) {
                            player.storage.hx_hanqing = [];
                        },
                        filter: function(event, player) {
                            if (_status.currentPhase == player) return false;
                            if (event.cards) {
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (event.cards[i].isInPile()) return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            for (var i = 0; i < trigger.cards.length; i++) {
                                if (trigger.cards[i].isInPile()) {
                                    if (trigger.cards[i].name != 'du') {
                                        player.storage.hx_hanqing.push(trigger.cards[i]);
                                    }
                                }
                            }
                        },
                        ai: {
                            effect: {
                                target: function(card) {
                                    if (card.name == 'guohe' || card.name == 'liuxinghuoyu') return 0.5;
                                },
                            },
                        },
                        group: ["hx_hanqing_gain"],
                        subSkill: {
                            gain: {
                                trigger: {
                                    player: ["phaseBefore"],
                                },
                                filter: function(event, player) {
                                    return player.storage.hx_hanqing.length > 0;
                                },
                                forced: true,
                                content: function() {
                                    "step 0"
                                    player.gain(player.storage.hx_hanqing, 'gain2');
                                    "step 1"
                                    player.storage.hx_hanqing = [];
                                },
                                sub: true,
                            },

                        },
                    },

                    "hx_binzu": {
                        forced: true,
                        mod: {
                            globalFrom: function(from, to, current) {
                                return current + 1;
                            },
                            globalTo: function(from, to, current) {
                                return current + 1;
                            },
                        },
                    },

                    "hx_jianzao": {
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        init: function(player) {
                            player.storage.hx_jianzao = 0;
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        check: function(event, player) {
                            if (player.skipList.length > 0 && player.skipList.indexOf("phaseUse") >= 0) return true;
                            return game.hasPlayer(function(current) {
                                return get.attitude(player, current) < 0 && get.distance(player, current, 'attack') <= 2;
                            }) && player.countCards('h', {
                                name: 'sha'
                            }) > 0;
                        },
                        content: function() {
                            'step 0'
                            trigger.untrigger();
                            trigger.finish();
                            player.storage.hx_jianzao = 1;
                            player.addTempSkill("hx_jianzao_buff_1", 'phaseAfter');
                            player.addTempSkill("hx_jianzao_buff_2", 'phaseAfter');
                        },
                        group: ["hx_jianzao_draw"],
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: "phaseJieshuEnd",
                                },
                                forced: true,
                                filter: function(event, player) {
                                    return player.storage.hx_jianzao == 1;
                                },
                                content: function() {
                                    player.storage.hx_jianzao = 0;
                                    player.draw(2);
                                },
                            }
                        },
                        ai: {
                            threaten: 1.5,
                            expose: 0.5,
                        },
                    },

                    "hx_jianzao_buff_1": {
                        forced: true,
                        silent: true,
                        mod: {
                            globalFrom: function(from, to, current) {
                                return current - 1;
                            },
                        },
                    },

                    "hx_jianzao_buff_2": {
                        trigger: {
                            source: "damageBegin",
                        },
                        forced: true,
                        filter: function(event) {
                            return event.card && event.card.name == 'sha';
                        },
                        content: function() {
                            trigger.num++;
                        },
                    },

                    "hx_weijiu": {
                        trigger: {
                            source: "damageBegin",
                        },
                        usable: 1,
                        filter: function(event, player) {
                            if (!player.isPhaseUsing()) return false;
                            return game.hasPlayer(function(current) {
                                return current != event.player && current != player && current.isDamaged();
                            });
                        },
                        check: function(event, player) {
                            var check = game.hasPlayer(function(current) {
                                return current != event.player && current != player && current.isDamaged() && get.attitude(player, current) > 0;
                            });
                            return check;
                        },
                        content: function() {
                            'step 0'
                            player.chooseTarget('请选择一名角色，令其恢复1点体力并摸两张牌', function(card, player, target) {
                                return target != trigger.player && target != player && target.isDamaged();
                            }).set('ai', function(target) {
                                if (get.attitude(player, target) <= 0) return -1;
                                var current = player;
                                var enemy = 0;
                                while (current != target) {
                                    if (get.attitude(current, target) < 0) enemy += 1;
                                    current = current.next;
                                }
                                if (target.hp == 1) return 2;
                                return Math.max(0, enemy - target.hp) + 1;
                            });
                            'step 1'
                            if (result.bool) {
                                result.targets[0].recover();
                                result.targets[0].draw();
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                    },

                    "hx_youzhan": {
                        mod: {
                            cardname: function(card, player) {
                                if (['trick', 'delay'].contains(lib.card[card.name].type)) return 'juedou';
                            },
                        },
                    },

                    "hx_zhenji": {
                        trigger: {
                            player: "useCardBegin",
                        },
                        forced: true,
                        filter: function(event, player) {
                            var card = event.card;
                            return player.isPhaseUsing() && (card.name == 'sha' || get.type(card) == 'trick') && !player.hasSkill("hx_zhenji_temp");
                        },
                        content: function() {
                            var players = game.filterPlayer();
                            player.addTempSkill("hx_zhenji_temp", "phaseUseAfter");
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] != player) {
                                    players[i].addTempSkill('fengyin');
                                    players[i].addTempSkill('hx_zhenji_feng');

                                }
                            }
                        },
                        group: ["hx_zhenji_recover"],
                        subSkill: {
                            temp: {},
                            feng: {
                                charlotte: true,
                                marktext: '禁',
                                mark: true,
                                mod: {
                                    cardEnabled2: function() {
                                        return false;
                                    },
                                },
                                intro: {
                                    content: '不能使用或打出牌'
                                },
                                sub: true,
                            },
                            recover: {
                                trigger: {
                                    player: "useCardAfter",
                                },
                                forced: true,
                                silent: true,
                                filter: function(event, player) {
                                    var card = event.card;
                                    return player.isPhaseUsing() && (card.name == 'sha' || get.type(card) == 'trick');
                                },
                                content: function() {
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player) {
                                            players[i].removeSkill('fengyin');
                                            players[i].removeSkill('hx_zhenji_feng');
                                        }
                                    }
                                },
                                sub: true,
                            },
                        },
                    },

                    "hx_zeshi": {
                        trigger: {
                            global: "dying",
                        },
                        skillAnimation: true,
                        animationColor: "thunder",
                        unique: true,
                        juexingji: true,
                        forced: true,
                        derivation: ["weimu", "luanwu", "yeyan"],
                        content: function() {
                            'step 0'
                            player.addSkill("weimu");
                            var str1 = '回复体力';
                            var str2 = '弃置牌';
                            event.str = str1;
                            var str = '择势：令' + get.translation(trigger.player) + '回复体力至1点，或令其弃置所有手牌与装备区内的牌'
                            player.chooseControl(str1, str2).set('ai', function() {
                                if (get.attitude(player, trigger.player) >= 0) return str1;
                                return str2;
                            }).set('prompt', str);

                            'step 1'
                            if (result.control == event.str) {
                                trigger.player.recover(1 - trigger.player.hp);
                                player.addSkill("luanwu");
                            } else {
                                trigger.player.discard(trigger.player.getCards('h'));
                                trigger.player.discard(trigger.player.getCards('e'));
                                player.addSkill("yeyan");
                            }
                            player.awakenSkill('hx_zeshi');
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.5,
                        },
                    },

                    "hx_tingfen": {
                        trigger: {
                            source: "damageBegin1",
                        },
                        filter: function(event) {
                            return event.card && event.card.name == 'sha' && event.notLink();
                        },
                        forced: true,
                        content: function() {
                            if (player.countCards("h") == 0 || player.countCards("e") == 0) trigger.num++;
                        },
                        ai: {
                            damageBonus: true,
                        },
                    },

                    "hx_paomou": {
                        forced: true,
                        trigger: {
                            player: "phaseJieshuEnd",
                        },
                        filter: function(event, player) {
                            return player.countCards("e") > 0;
                        },
                        content: function() {
                            'step 0'
                            player.chooseToDiscard("抛鍪：弃置一张装备区内的牌", 1, 'e', true).ai = function(card) {
                                return 20 - get.equipValue(card);
                            };
                            'step 1'
                            if (result.bool) {
                                player.draw(1);
                                player.chooseTarget("抛鍪：选择一名角色成为【杀】的目标", function(card, player, target) {
                                    return player != target;
                                }, true).ai = function(target) {
                                    return get.effect(target, {
                                        name: 'sha'
                                    }, player);
                                }
                            }
                            "step 2"
                            if (result.bool) {
                                player.useCard({
                                    name: 'sha'
                                }, result.targets[0], true);
                            }
                        },
                    },

                    "hx_hemeng": {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        check: function(event, player) {
                            var max = -1;
                            var min = Infinity;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                var count = players[i].countCards("h");
                                max = Math.max(max, count);
                                min = Math.min(min, count);
                            }
                            for (var i = 0; i < players.length; i++) {
                                var count = players[i].countCards("h");
                                if (count == max && get.attitude(player, players[i]) < 0) return true;
                                if (count == min && get.attitude(player, players[i]) > 0) return true;
                            }
                            return true;
                        },
                        content: function() {
                            "step 0"
                            player.useCard({
                                name: 'jiu'
                            }, player);
                            "step 1"
                            player.chooseTarget("合盟：选择一名手牌数最大的角色，令其弃一张手牌，或选择一名手牌数最小的角色，令其摸一张牌", function(card, player, target) {
                                var max = -1;
                                var min = Infinity;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    var count = players[i].countCards("h");
                                    max = Math.max(max, count);
                                    min = Math.min(min, count);
                                }
                                return player != target && (target.countCards("h") == max || target.countCards("h") == min);
                            }, false).ai = function(target) {
                                var eff = get.attitude(player, target);
                                var max = -1;
                                var min = Infinity;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    var count = players[i].countCards("h");
                                    max = Math.max(max, count);
                                    min = Math.min(min, count);
                                }
                                if (target.countCards("h") == max && target.countCards("h") == min) return Math.abs(eff) * Math.random();
                                if (target.countCards("h") == max) return -eff * Math.random();
                                if (target.countCards("h") == min) return eff * Math.random();
                                return 0;
                            }
                            "step 2"
                            console.log(player.countCards("h"));
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                var max = -1;
                                var min = Infinity;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    var count = players[i].countCards("h");
                                    max = Math.max(max, count);
                                    min = Math.min(min, count);
                                }
                                if (event.target.countCards("h") == max && event.target.countCards("h") == min) {
                                    player.chooseControl('摸', '弃', function(event, player) {
                                        if (get.attitude(player, target) >= 0) return '摸';
                                        return '弃';
                                    }).set('prompt', '合盟：令其摸牌或弃牌');
                                } else if (target.countCards("h") == max) event.goto(5);
                                else if (target.countCards("h") == min) event.goto(4);
                                else event.finish();
                            } else event.finish();
                            "step 3"
                            if (result.control) {
                                if (result.control == '摸') event.goto(4);
                                else if (result.control == '弃') event.goto(5);
                                else event.finish();
                            } else event.finish();
                            "step 4"
                            event.target.draw();
                            event.goto(6);
                            "step 5"
                            event.target.chooseToDiscard(true);
                            event.goto(7);
                            "step 6"
                            var max = -1;
                            var min = Infinity;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                var count = players[i].countCards("h");
                                max = Math.max(max, count);
                                min = Math.min(min, count);
                            }
                            if (event.target.countCards("h") == min) event.target.draw();
                            event.finish();
                            "step 7"
                            var max = -1;
                            var min = Infinity;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                var count = players[i].countCards("h");
                                max = Math.max(max, count);
                                min = Math.min(min, count);
                            }
                            if (event.target.countCards("h") == max) player.useCard({
                                name: 'sha'
                            }, event.target, false);
                            event.finish();
                        },
                        ai: {
                            expose: 0.6,
                            threaten: 1.2,
                        },
                    },

                    "hx_zhuoneng": {
                        zhuSkill: true,
                        unique: true,
                        subSkill: {
                            count: {
                                trigger: {
                                    global: "recoverBegin",
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                filter: function(event, player) {
                                    if (!event.card || event.card.name != 'tao') return false;
                                    if (!event.source) return false;
                                    if (player.isDying() && event.source != player) return true;
                                    if (event.player.isDying() && event.source == player && player != event.player) return true;
                                    return false;
                                },
                                content: function() {
                                    trigger.hx_zhuoneng = true;
                                },
                                sub: true,
                            },
                        },
                        group: ["hx_zhuoneng_count"],
                        trigger: {
                            global: "recoverAfter",
                        },
                        limited: true,
                        init: function(player) {
                            player.storage.hx_zhuoneng = false;
                        },
                        filter: function(event, player) {
                            if (player.storage.hx_zhuoneng) return false;
                            if (event.player.isDying()) return false;
                            if (!player.hasZhuSkill('hx_zhuoneng')) return false;
                            return event.hx_zhuoneng == true;
                        },
                        check: function(event, player) {
                            if (event.player == player) return get.attitude(player, event.source) > 0;
                            else return get.attitude(player, event.player) > 0;
                        },
                        skillAnimation: true,
                        animationColor: "fire",
                        content: function() {
                            "step 0"
                            //player.awakenSkill('hx_zhuoneng');
                            //player.logSkill('hx_zhuoneng',trigger.source);
                            if (trigger.player == player) event.target = trigger.source;
                            else event.target = trigger.player;
                            event.target.draw(3);
                            event.target.recover(3 - event.target.hp);
                            var check = game.hasPlayer(function(current) {
                                return current.name == 'hx_guanyiwu' || current.name2 == 'hx_guanyiwu';
                            });
                            if (check) event.finish();
                            "step 1"
                            if (event.target.name2 != undefined) {
                                event.target.chooseControl(event.target.name, event.target.name2).set('prompt', '请选择要更换的武将牌');
                            } else event._result = {
                                control: event.target.name
                            };
                            "step 2"
                            event.target.reinit(result.control, 'hx_guanyiwu');
                            if (_status.characterlist) {
                                _status.characterlist.add(result.control);
                                _status.characterlist.remove('hx_guanyiwu');
                            }
                            player.storage.hx_zhuoneng = true;
                        },
                        mark: true,
                        intro: {
                            content: "limited",
                        },
                    },

                    "hx_taluan": {
                        trigger: {
                            global: "phaseJieshuEnd",
                        },
                        init: function(player) {
                            player.storage.hx_taluan = 0;
                        },
                        filter: function(event, player) {
                            return event.player != player && player.storage.hx_taluan == player.countCards('h') && get.distance(player, event.player, 'attack') <= 1;
                        },
                        check: function(event, player) {
                            return get.effect(event.player, {
                                name: 'sha'
                            }, player, player) > 0;
                        },
                        content: function() {
                            player.useCard({
                                name: 'sha'
                            }, trigger.player, false);
                        },
                        mark: true,
                        intro: {
                            content: "回合开始时手牌为#张",
                        },
                        group: ["hx_taluan_start", "hx_taluan_end"],
                        subSkill: {
                            start: {
                                trigger: {
                                    global: "phaseBefore",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                filter: function(event, player) {
                                    return event.player != player;
                                },
                                content: function() {
                                    player.storage.hx_taluan = player.countCards('h');
                                    player.syncStorage("hx_taluan");
                                    player.markSkill("hx_taluan");
                                },
                                sub: true,
                            },
                            end: {
                                trigger: {
                                    global: "phaseAfter",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                filter: function(event, player) {
                                    return event.player != player;
                                },
                                content: function() {
                                    player.storage.hx_taluan = 0;
                                    player.unmarkSkill("hx_taluan");
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 0.8,
                        },
                    },

                    "hx_jingzhai": {
                        trigger: {
                            player: "damageBefore",
                        },
                        filter: function(event, player) {
                            var card = event.card;
                            if (player.countCards("e") < player.hp) return false;
                            if (card && card.name == 'sha' && (!event.nature)) return false;
                            return true;
                        },
                        forced: true,
                        content: function() {
                            trigger.cancel();
                        },
                        mark: true,
                        ai: {
                            nodamage: true,
                            notrick: true,
                            nofire: true,
                            nothunder: true,
                            skillTagFilter: function(player, tag) {
                                if (tag == 'nodamage') {
                                    if (player.countCards("e") < player.hp) return false;
                                }
                                if (tag == 'notrick') {
                                    if (player.countCards("e") < player.hp) return false;
                                }
                                if (tag == 'nofire') {
                                    if (player.countCards("e") < player.hp) return false;
                                }
                                if (tag == 'nothunder') {
                                    if (player.countCards("e") < player.hp) return false;
                                }
                            },
                            effect: {
                                target: function(card, player, target, current) {
                                    if (player.countCards("e") < player.hp) return;
                                    else if (card.name == 'tiesuo') return 'zeroplayertarget';
                                    else if ((get.type(card) == 'trick' || get.type(card) == 'delay') && get.tag(card, 'damage')) return 'zeroplayertarget';
                                    else if (get.tag(card, 'natureDamage')) return 'zeroplayertarget';
                                    else if (get.tag(card, 'fireDamage')) return 'zeroplayertarget';
                                    else if (get.tag(card, 'thunderDamage')) return 'zeroplayertarget';
                                    else return;
                                },
                            },
                        },
                        intro: {
                            content: function(storage, player) {
                                var str = '';
                                if (player.countCards("e") >= player.hp) {
                                    str += '防止普通【杀】以外的伤害';
                                } else {
                                    str += '无效果';
                                }
                                return str;
                            },
                        },
                    },

                    "hx_yilv": {
                        group: ["hx_yilv_miss", "hx_yilv_sha"],
                        subSkill: {
                            miss: {
                                trigger: {
                                    global: "shaMiss",
                                },
                                direct: true,
                                filter: function(event, player) {
                                    if (event.player == player) return false;
                                    return get.itemtype(event.cards) == 'cards' && get.position(event.cards[0], true) == 'o';
                                },
                                content: function() {
                                    "step 0"
                                    event.pla = player;
                                    trigger.player.chooseBool(get.prompt('hx_yilv'), '是否令' + get.translation(player) + '获得' + get.translation(trigger.cards) + '？').set('ai', function() {
                                        var trigger = _status.event.getTrigger();
                                        return get.attitude(trigger.player, event.pla) > 0;
                                    });
                                    "step 1"
                                    if (result.bool) {
                                        player.gain(trigger.cards, 'gain2');
                                        player.logSkill('hx_yilv', trigger.player);
                                    }
                                },
                                sub: true,
                            },
                            sha: {
                                trigger: {
                                    source: "damageAfter",
                                },
                                direct: true,
                                filter: function(event, player) {
                                    if (!event.card || event.card.name != 'sha' || !event.notLink()) return false;
                                    return get.itemtype(event.cards) == 'cards' && get.position(event.cards[0], true) == 'o';
                                },
                                content: function() {
                                    "step 0"
                                    player.chooseTarget(get.prompt('hx_yilv'), '你可令1名其他角色获得' + get.translation(trigger.cards), function(card, player, target) {
                                        return player != target;
                                    }).ai = function(target) {
                                        var att = get.attitude(player, target);
                                        return att;
                                    }
                                    "step 1"
                                    if (result.bool) {
                                        result.targets[0].gain(trigger.cards, 'gain2');
                                        player.logSkill('hx_yilv', result.targets[0]);
                                    }
                                },
                                sub: true,
                            },
                            temp: {
                                charlotte: true,
                                sub: true,
                            },
                        },
                        ai: {
                            expose: 0.8,
                        },
                    },

                    "hx_zhengshi": {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            return player.countCards('h', 'sha') > 0;
                        },
                        check: function(event, player) {
                            if (player.countCards('h', 'sha') == 1 && player.hp > 1) return false;
                            return true;
                        },
                        content: function() {
                            "step 0"
                            player.chooseCard({
                                filterCard: function(card) {
                                    return card.name == 'sha';
                                },
                                position: 'h',
                                selectCard: [1, Infinity],
                                ai: function(card) {
                                    return 6 - get.value(card);
                                },
                                prompt: '整师：重铸手牌中的【杀】',
                            });
                            "step 1"
                            if (result.bool) {
                                var cards = result.cards;
                                player.lose(cards, ui.discardPile, 'visible');
                                player.$throw(cards, 1000);
                                game.log(player, '将', cards, '置入弃牌堆');
                                player.draw(cards.length);
                                if (cards.length >= player.hp) player.moveCard(false);
                            } else event.finish();
                        },
                    },

                    "hx_zhengshi1": {
                        trigger: {
                            global: ["roundStart"],
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        check: function(event, player) {
                            var recover = 0,
                                lose = 0;
                            var players = game.filterPlayer();
                            var flag = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (!players[i].isOut()) {
                                    if (players[i].hp < players[i].maxHp) {
                                        if (get.attitude(player, players[i]) > 0) {
                                            if (players[i].hp < 2) {
                                                lose--;
                                                recover += 0.5;
                                            }
                                            lose--;
                                            recover++;
                                        } else if (get.attitude(player, players[i]) < 0) {
                                            if (players[i].hp < 2) {
                                                lose++;
                                                recover -= 0.5;
                                                if (player.hasSkill("hx_anjian")) flag = 1.5;
                                            }
                                            lose++;
                                            recover--;
                                            if (player.hasSkill("hx_anjian") && flag != 1.5) flag = 1;
                                        }
                                    } else {
                                        if (get.attitude(player, players[i]) > 0) {
                                            lose--;
                                        } else if (get.attitude(player, players[i]) < 0) {
                                            lose++;
                                            if (player.hasSkill("hx_anjian") && flag != 1.5) flag = 1;
                                        }
                                    }
                                }
                            }

                            var max_hp = 0;
                            var friend = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                if (players[i].identity == 'zhu' && get.attitude(player, players[i]) > 0) friend = 1;
                                max_hp = Math.max(max_hp, players[i].hp);
                            }
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                if (players[i].hp == max_hp && get.attitude(player, players[i]) > 0) friend = 1;
                            }
                            if (friend == 0) {
                                if (player.hasSkill("hx_anjian")) flag -= 1;
                                if (lose - flag < recover && recover > 0 && lose - flag < 0) return true;
                                if (lose - flag > recover || recover < 0 || lose - flag > 0) return false;
                                return Math.random() > 0.5;
                            }
                            if (friend == 1) {
                                if (player.hasSkill("hx_anjian")) flag += 1;
                                if (lose - flag < recover || recover > 0 || lose - flag < 0) return true;
                                if (lose - flag > recover && recover < 0 && lose - flag > 0) return false;
                                return Math.random() > 0.5;
                            }
                            return false;
                            //lose<recover&&recover>0 taoyuan zhi
                        },
                        content: function() {
                            'step 0'
                            player.chooseTarget('请选择主公或体力值最大的其他角色', function(card, player, target) {
                                var players = game.filterPlayer();
                                var max_hp = 0;
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i] == player) continue;
                                    max_hp = Math.max(max_hp, players[i].hp);
                                }
                                if (target == player) return false;
                                if (target.identity == 'zhu' || target.hp == max_hp) return true;
                                return false;
                            }).ai = function(target) {
                                if (get.attitude(player, target) > 0) return target.maxHp - target.hp + 2;
                                return 0.1;
                            };
                            'step 1'
                            if (result.bool) {
                                event.target = result.targets[0];
                                event.target.chooseControl('五谷丰登', '桃园结义', function(event, player) {
                                    var recover = 0,
                                        lose = 0;
                                    var flag = 0;
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (!players[i].isOut()) {
                                            if (players[i].hp < players[i].maxHp) {
                                                if (get.attitude(player, players[i]) > 0) {
                                                    if (players[i].hp < 2) {
                                                        lose--;
                                                        recover += 0.5;
                                                    }
                                                    lose--;
                                                    recover++;
                                                } else if (get.attitude(player, players[i]) < 0) {
                                                    if (players[i].hp < 2) {
                                                        lose++;
                                                        recover -= 0.5;
                                                        if (player.hasSkill("hx_anjian")) flag = 1.5;
                                                    }
                                                    lose++;
                                                    recover--;
                                                    if (player.hasSkill("hx_anjian") && flag != 1.5) flag = 1;
                                                }
                                            } else {
                                                if (get.attitude(player, players[i]) > 0) {
                                                    lose--;
                                                } else if (get.attitude(player, players[i]) < 0) {
                                                    lose++;
                                                    if (player.hasSkill("hx_anjian") && flag != 1.5) flag = 1;
                                                }
                                            }
                                        }
                                    }
                                    if (player.hasSkill("hx_anjian")) {
                                        if (get.attitude(event.target, player) < 0) flag -= 1;
                                        if (get.attitude(event.target, player) > 0) flag += 1;
                                    }
                                    if (lose - flag < recover && recover > 0) {
                                        if (get.attitude(event.target, player) > 0) return '桃园结义';
                                        return '五谷丰登';
                                    }
                                    if (get.attitude(event.target, player) > 0) return '五谷丰登';
                                    return '桃园结义';
                                }).set('prompt', '拯世：选择【五谷丰登】或【桃园结义】发动');
                            }
                            'step 2'
                            if (result.control) {
                                if (result.control == '桃园结义') {
                                    event.target.chooseUseTarget('taoyuan', true, false);
                                } else {
                                    event.target.chooseUseTarget('wugu', true, false);
                                }
                            } else event.finish();
                        },
                    },

                    /*"hx_anjian":{
                        filter:function (event,player){
                            return (get.type(event.card)=='trick')&&event.targets&&event.targets.length>1&&event.player!=player;
                        },
                        check:function (event,player){
                            var att = get.attitude(player,event.player);
                            if(att<=0) return event.getParent().excluded.contains(player)||get.tag(event.card,'multineg')||get.effect(player,event.card,event.player,player)<=0;
                            if(event.card.name == 'taoyuan' && player.hp<=2) return false;
                            if(event.card.name == 'wugu' && get.effect(player,event.card,event.player,player)<=7 && get.attitude(player,event.player)>0) return false;
                            return event.getParent().excluded.contains(player)||get.tag(event.card,'multineg')||get.effect(player,event.card,event.player,player)<=4;
                        },
                        trigger:{
                            target:"useCardToTargeted",
                        },
                        content:function (){
                            trigger.getParent().excluded.add(player);
                            player.draw();
                            trigger.player.draw();
                        },
                        ai:{
                            effect:{
                                target:function (card){
                                    if(get.type(card)!='trick') return;

                                    if(card.name=='tiesuo') return [0,2];
                                    if(card.name=='yihuajiemu') return [0,1];
                                    if(get.tag(card,'multineg')) return [0,2];
                                },
                            },
                        },
                    },*/

                    "hx_anjian": {
                        trigger: {
                            target: "useCardToTarget",
                        },
                        filter: function(event, player) {
                            if (!event.targets || !event.targets.contains(player)) return false;
                            var info = get.info(event.card);
                            if (info.type != 'trick') return false;
                            if (info.multitarget) return false;
                            if (event.targets.length > 1) return true;
                            return false;
                        },
                        check: function(event, player) {
                            var targets = event.targets;
                            var att = get.attitude(player, event.player);
                            for (var i = 0; i < targets.length; i++) {
                                var effect = get.effect(targets[i], event.card, event.player, player);
                                if (effect < 0) return true;
                                if (effect == 0 && att > 0) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.chooseTarget(event.unchosen ? get.prompt('hx_anjian') : null, '为' + get.translation(trigger.card) + '减少一个目标', function(card, player, target) {
                                return _status.event.targets.contains(target);
                            }).set('ai', function(target) {
                                var trigger = _status.event.getTrigger();
                                var att = get.attitude(player, trigger.player);
                                if (att <= 0) return -get.effect(target, trigger.card, trigger.player, _status.event.player);
                                return -get.effect(target, trigger.card, trigger.player, _status.event.player) + 0.1;
                            }).set('targets', trigger.targets);
                            'step 1'
                            if (result.bool) {
                                if (!event.isMine() && !event.isOnline()) game.delayx();
                                event.target = result.targets[0];
                            } else {
                                event.finish();
                            }
                            'step 2'
                            player.logSkill('hx_anjian', event.target);
                            trigger.getParent().excluded.add(event.target);
                            trigger.player.draw();
                        },
                        ai: {
                            expose: 0.2,
                            effect: {
                                target: function(card) {
                                    if (get.type(card) != 'trick') return;
                                    //if(get.tag(card,'multineg')) return [0,0,1,1];
                                },
                            },
                        },
                    },

                    "hx_yingshi": {
                        trigger: {
                            global: "useCardAfter",
                        },
                        usable: 1,
                        filter: function(event, player) {
                            if (!player.countCards('h')) return false;
                            if (event.player == player) return false;
                            if (_status.currentPhase == player) return false;
                            if (get.type(event.cards[0]) != 'trick' && get.type(event.cards[0]) != 'basic') return false;
                            if (!event.cards[0] || !event.card.isCard) return false;
                            var players = game.filterPlayer();
                            var card = event.cards[0];
                            return (lib.filter.cardEnabled(card, player) && lib.filter.cardUsable(card, player) && game.hasPlayer(function(current) {
                                return player.canUse(card, current) && lib.filter.targetEnabled2(card, player, current);
                            }));

                        },
                        check: function(event, player) {
                            var cards = player.getCards("h");
                            var card = event.cards[0];
                            var check = game.hasPlayer(function(current) {
                                return player.canUse(card, current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                            });
                            if (check == false) return false;
                            if (player.getUseValue(card) <= 0) return false;
                            for (var i = 0; i < cards.length; i++) {
                                var val = ai.get.value(cards[i]);
                                if (val <= ai.get.value(card)) return true;
                            }
                            return false;
                        },
                        content: function() {
                            "step 0"
                            lib.skill.hx_yingshi2.viewAs = {
                                name: trigger.card.name
                            };
                            var next = player.chooseToUse();
                            next.set('openskilldialog', '将一张手牌当做' + get.translation(trigger.card.name) + '使用');
                            next.set('norestore', true);
                            next.set('_backupevent', 'AM_yingshi2');
                            next.backup('hx_yingshi2');
                            "step 1"
                            if (ui.confirm) ui.confirm.close();
                            //if(!player.countCards('h')) player.draw();
                        },
                        ai: {
                            threaten: 3,
                        },
                    },

                    "hx_yingshi2": {
                        filterCard: true,
                        selectCard: 1,
                        popname: true,
                        check: function(card) {
                            return 12 - get.value(card)
                        },
                    },

                    "hx_yijin": {
                        trigger: {
                            global: "dying",
                        },
                        filter: function(event, player) {
                            return event.player != player && event.player.hp <= 0;
                        },
                        limited: true,
                        unique: true,
                        skillAnimation: true,
                        animationColor: "thunder",
                        logTarget: "player",
                        check: function(event, player) {
                            if (get.attitude(player, event.player) < 4) return false;
                            var save = player.countCards('h', function(card) {
                                var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);
                                if (mod2 != 'unchanged') return mod2;
                                var mod = game.checkMod(card, player, event.player, 'unchanged', 'cardSavable', player);
                                if (mod != 'unchanged') return mod;
                                var savable = get.info(card).savable;
                                if (typeof savable == 'function') savable = savable(card, player, event.player);
                                return savable;
                            })
                            if (save >= 1 - event.player.hp) return false;
                            if (event.player == get.zhu(player)) return true;
                            if (save + event.player.hp + 3 <= 0) return false;
                            return true;
                        },
                        content: function() {
                            player.awakenSkill('hx_yijin');
                            trigger.player.recover(3);
                        },
                        mark: true,
                        intro: {
                            content: "limited",
                        },
                        init: function(player, skill) {
                            player.storage[skill] = false;
                        },
                    },

                    "hx_qulie": {
                        trigger: {
                            source: "damageEnd",
                            player: "recoverBegin",
                        },
                        usable: 1,
                        filter: function(event, player) {
                            if (event.name == 'damage') {
                                if (player.hasZhuSkill("hx_shengwei") && event.player.group == 'wu') return true;
                                return get.distance(player, event.player, 'attack') > 1;
                            } else return true;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player || players[i] == event.player) continue;
                                if (get.distance(player, players[i], 'attack') <= 1 || (player.hasZhuSkill("hx_shengwei") && players[i].group == 'wu')) {
                                    if (get.damageEffect(players[i], player, player) > 0) return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            "step 0"
                            player.chooseTarget("驱烈：选择一名攻击范围内的角色，受到1点伤害", function(card, player, target) {
                                return target != player && target != trigger.player && (get.distance(player, target, 'attack') <= 1 || (player.hasZhuSkill("hx_shengwei") && target.group == 'wu'));
                            }, false).ai = function(target) {
                                return get.damageEffect(target, player, player);
                            };
                            "step 1"
                            if (result.bool) {
                                player.logSkill('hx_qulie', result.targets);
                                result.targets[0].damage(1);
                            }
                        },
                        ai: {
                            threaten: 2.5,
                        },
                    },

                    "hx_qulie2": {
                        trigger: {
                            source: "damageEnd",
                            player: "recoverBegin",
                        },
                        usable: 1,
                        filter: function(event, player) {
                            if (event.name == 'damage') {
                                if (player.hasZhuSkill("hx_shengwei") && event.player.group == 'wu') return true;
                                return get.distance(player, event.player, 'attack') <= 1;
                            } else return true;
                        },
                        check: function(event, player) {
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player || players[i] == event.player) continue;
                                if (get.distance(player, players[i], 'attack') > 1 || (player.hasZhuSkill("hx_shengwei") && players[i].group == 'wu')) {
                                    if (get.damageEffect(players[i], player, player) > 0) return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            "step 0"
                            player.chooseTarget("驱烈：选择一名攻击范围外的角色，受到1点伤害", function(card, player, target) {
                                return target != player && target != trigger.player && (get.distance(player, target, 'attack') > 1 || (player.hasZhuSkill("hx_shengwei") && target.group == 'wu'));
                            }, false).ai = function(target) {
                                return get.damageEffect(target, player, player);
                            };
                            "step 1"
                            if (result.bool) {
                                player.logSkill('hx_qulie', result.targets);
                                result.targets[0].damage(1);
                            }
                        },
                        ai: {
                            threaten: 2.5,
                        },
                    },

                    "hx_jingnan": {
                        unique: true,
                        enable: "chooseToUse",
                        mark: true,
                        skillAnimation: true,
                        animationStr: "靖难",
                        limited: true,
                        animationColor: "orange",
                        init: function(player) {
                            player.storage.hx_jingnan = false;
                        },
                        filter: function(event, player) {
                            if (player.storage.hx_jingnan) return false;
                            if (event.type == 'dying') {
                                if (player != event.dying) return false;
                                return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('hx_jingnan');
                            player.storage.hx_jingnan = true;
                            'step 1'
                            player.gainMaxHp();
                            'step 2'
                            if (player.hp < 2) {
                                player.recover(2 - player.hp);
                            }
                            'step 3'
                            player.draw(2);
                            'step 4'
                            if (player.hp < 1) {
                                player.recover(1 - player.hp);
                            }
                            'step 5'
                            player.removeSkill("hx_qulie");
                            player.addSkill("hx_qulie2");
                        },
                        ai: {
                            order: 1,
                            skillTagFilter: function(player, arg, target) {
                                if (player != target || player.storage.hx_qulie) return false;
                            },
                            save: true,
                            result: {
                                player: function(player) {
                                    if (player.hp <= 0) return 10;
                                    return 0;
                                },
                            },
                            threaten: function(player, target) {
                                if (!target.storage.hx_qulie) return 0.8;
                            },
                        },
                        intro: {
                            content: "limited",
                        },
                    },

                    "hx_shengwei": {
                        zhuSkill: true,
                        forced: true,
                    },

                    "hx_xiaodou": {
                        trigger: {
                            player: "loseAfter",
                        },
                        forced: true,
                        filter: function(event, player) {
                            return (!player.countCards('e') && event.es && event.es.length > 0) ||
                                (!player.countCards('h') && event.hs && event.hs.length > 0);
                        },
                        content: function() {
                            "step 0"
                            player.chooseTarget(get.prompt('hx_xiaodou'), function(card, player, target) {
                                if (target == player) return false;
                                return get.distance(player, target) <= 1;
                            }).set('ai', function(target) {
                                console.log(get.damageEffect(target, player, player));
                                if (player.isTurnedOver()) return get.damageEffect(target, player, player) - 10;
                                else return get.damageEffect(target, player, player) + 3;
                            });
                            "step 1"
                            if (result.bool) {
                                player.logSkill('hx_xiaodou', result.targets);
                                result.targets[0].damage();
                                event.finish();
                            } else {
                                player.draw();
                                player.turnOver();
                            }
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.type(card) == 'equip' && target.countCards('e') <= 1) return [1, 2];
                                    if ((card.name == 'guohe' || card.name == 'shunshou') && target.isTurnedOver()) return [1, 1];
                                },
                            },
                            threaten: 1.5,
                            reverseEquip: true,
                            noh: true,
                            noe: true,
                            skillTagFilter: function(player, tag) {
                                if (tag == 'noh') {
                                    if (player.countCards('h') != 1) return false;
                                    var check = game.hasPlayer(function(current) {
                                        return get.distance(player, current) <= 1 && get.damageEffect(current, player, player) > 0;
                                    });
                                    if (!check && !player.isTurnedOver()) return false;
                                }
                                if (tag == 'noe') {
                                    if (player.countCards('e') != 1) return false;
                                    var check = game.hasPlayer(function(current) {
                                        return get.distance(player, current) <= 1 && get.damageEffect(current, player, player) > 0;
                                    });
                                    if (!check && !player.isTurnedOver()) return false;
                                }
                                if (tag == 'reverseEquip') {
                                    if (player.countCards('e') != 1) return false;
                                    var check = game.hasPlayer(function(current) {
                                        return get.distance(player, current) <= 1 && get.damageEffect(current, player, player) > 0;
                                    });
                                    if (!check && !player.isTurnedOver()) return false;
                                }
                            },

                        },
                    },

                    "hx_mogu": {
                        trigger: {
                            player: "useCard2",
                        },
                        forced: true,
                        filter: function(event, player) {
                            return player.isPhaseUsing() && event.card && get.color(event.card) == 'black';
                        },
                        init: function(player) {
                            player.storage.hx_mogu = 0;
                        },
                        content: function() {
                            player.storage.hx_mogu += 1;
                        },
                        group: ["hx_mogu_init", "hx_mogu_buff"],
                        subSkill: {
                            init: {
                                trigger: {
                                    player: "phaseUseBegin",
                                },
                                forced: true,
                                popup: false,
                                content: function() {
                                    player.storage.hx_mogu = 0;
                                },
                            },
                            buff: {
                                forced: true,
                                mod: {
                                    globalFrom: function(from, to, distance) {
                                        if (from.isPhaseUsing()) {
                                            return distance - from.storage.hx_mogu;
                                        }
                                    },
                                    cardUsable: function(card, player, num) {
                                        if (card.name == 'sha' && player.isPhaseUsing()) {
                                            return num + player.storage.hx_mogu;
                                        }
                                    },
                                },
                            },
                        },
                    },

                    "hx_kongchou": {
                        trigger: {
                            player: "phaseUseAfter",
                        },
                        forced: true,
                        filter: function(event, player) {
                            var shaTemplate = {
                                name: 'sha',
                                iscard: true
                            };
                            var num = lib.card['sha'].usable;
                            if (!num) return false;
                            num = Math.min(1 + player.storage.hx_mogu, game.checkMod(shaTemplate, player, num, 'cardUsable', player));
                            var numUsed = player.getHistory('useCard', event => get.name(event.card) == 'sha').length;
                            if (num <= numUsed) return false;
                            return true;
                        },
                        content: function() {
                            var shaTemplate = {
                                name: 'sha',
                                iscard: true
                            };
                            var num = lib.card['sha'].usable;
                            if (!num) event.finish();
                            num = Math.min(1 + player.storage.hx_mogu, game.checkMod(shaTemplate, player, num, 'cardUsable', player));
                            var numUsed = player.getHistory('useCard', event => get.name(event.card) == 'sha').length;
                            if (num <= numUsed) event.finish();
                            player.draw(num - numUsed);
                        },
                    },

                    "hx_junzheng": {
                        trigger: {
                            player: "phaseJudgeBegin",
                        },
                        forced: true,
                        filter: function(event, player) {
                            return player.countCards("hej") > 0;
                        },
                        content: function() {
                            'step 0'
                            var list = [];
                            if (player.countCards("h") > 0) list.push('手牌区');
                            if (player.countCards("e") > 0) list.push('装备区');
                            if (player.countCards("j") > 0) list.push('判定区');
                            if (list.length == 1) {
                                event.count = player.countCards("hej");
                                if (player.countCards("h") > 0) player.discard(player.getCards("h"));
                                if (player.countCards("e") > 0) player.discard(player.getCards("e"));
                                if (player.countCards("j") > 0) player.discard(player.getCards("j"));
                                event.goto(2);
                            } else {
                                player.chooseControl(list, true).set('prompt', '军整：弃置一个区域的全部牌').ai = function() {
                                    if (list.contains('判定区')) return '判定区';
                                    if (!list.contains('装备区')) return '手牌区';
                                    if (!list.contains('手牌区')) return '装备区';
                                    var cnt1 = 0;
                                    var cnt2 = 0;
                                    var avg1 = 0;
                                    var avg2 = 0;
                                    var card1 = player.getCards("h");
                                    var card2 = player.getCards("e");
                                    for (var i = 0; i < card1.length; i++) {
                                        if (get.value(card1[i]) >= 7) cnt1 += 1;
                                        avg1 += get.value(card1[i]);
                                    }
                                    for (var i = 0; i < card2.length; i++) {
                                        if (get.value(card2[i]) >= 7) cnt2 += 1;
                                        avg2 += get.value(card2[i]);
                                    }
                                    avg1 /= player.countCards("h");
                                    avg2 /= player.countCards("e");
                                    if (cnt1 > cnt2 && avg1 > avg2) return '装备区';
                                    if (cnt2 > cnt1 && avg2 > avg1) return '手牌区';
                                    if (player.hasSkillTag('noe')) return '装备区';
                                    if (player.hasSkillTag('noh')) return '手牌区';
                                    if (cnt2 >= cnt1) return '手牌区';
                                    if (player.countCards("h") >= player.countCards("e") + 2) return '手牌区';
                                    if (player.countCards("e") >= player.countCards("h") + 2) return '装备区';
                                    if (Math.random() > 0.5) return '手牌区';
                                    return '装备区';
                                };
                            }
                            'step 1'
                            if (result.control == '手牌区') {
                                event.count = player.countCards("h");
                                player.discard(player.getCards("h"));
                            }
                            if (result.control == '装备区') {
                                event.count = player.countCards("e");
                                player.discard(player.getCards("e"));
                            }
                            if (result.control == '判定区') {
                                event.count = player.countCards("j");
                                player.discard(player.getCards("j"));
                            }
                            'step 2'
                            var players = game.filterPlayer();
                            var flag = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].countCards("he") >= event.count) flag = 1;
                            }
                            if (flag == 0) {
                                player.draw(event.count);
                                event.finish();
                            } else {
                                player.chooseTarget('指定一名其他角色，令其弃置' + get.cnNumber(event.count) + '张牌，或取消并摸' + get.cnNumber(event.count) + '张牌', function(card, player, target) {
                                    return target.countCards("he") >= event.count;
                                }).ai = function(target) {
                                    if (player.hp <= 2 && player.countCards("h") == 0) return -100;
                                    if (get.attitude(player, target) >= 0) return -100;
                                    var players = game.filterPlayer();
                                    if (target.hp <= 2 && target.countCards("he") - event.count <= 1) return -1.5 * Math.max(1, 5 - target.countCards("he")) * get.attitude(player, target);
                                    if (Math.random() > 0.4) return -100;
                                    return -Math.max(1, 5 - target.countCards("he")) * get.attitude(player, target);
                                }
                            }
                            'step 3'
                            if (result.bool) {
                                player.discardPlayerCard(result.targets[0], "he", event.count, true);
                            } else {
                                player.draw(event.count);
                            }
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.type(card) == 'delay') return [0, 1];
                                },
                            },
                        },
                    },

                    "hx_mouzhan": {
                        trigger: {
                            global: "phaseBegin",
                        },
                        filter: function(event, player) {
                            if (event.player == player) return false;
                            var cnt1 = event.player.countCards("h");
                            var cnt2 = event.player.countCards("e");
                            var cnt3 = event.player.countCards("j");
                            if (cnt1 > 0 && cnt2 == 0 && cnt3 == 0) return true;
                            if (cnt1 == 0 && cnt2 > 0 && cnt3 == 0) return true;
                            if (cnt1 == 0 && cnt2 == 0 && cnt3 > 0) return true;
                            return false;
                        },
                        check: function(event, player) {
                            var att = get.attitude(player, event.player);
                            if (att == 0) return false;
                            if (att > 0) {
                                if (event.player.countCards("j") > 0) return true;
                                if (event.player.hasSkillTag('noe') && event.player.countCards("e") > 0) return true;
                                if (event.player.hasSkillTag('noh') && event.player.countCards("h") > 0) return true;
                                if (event.player.hp <= 2) {
                                    if (event.player.countCards("e") > 0 && !event.player.getEquip(2) && !event.player.getEquip(3)) return true;
                                    if (event.player.countCards("h") > 2) return true;
                                    return false;
                                }
                                if (event.player.countCards("h") >= 2) return true;
                                if (event.player.countCards("e") > 0) return false;
                                return Math.random() > 0.5;
                            }
                            if (event.player.countCards("j") > 0) return false;
                            if (event.player.hasSkillTag('noe') && event.player.countCards("e") > 0) return false;
                            if (event.player.hasSkillTag('noh') && event.player.countCards("h") > 0) return false;
                            if (event.player.hp <= 2) {
                                if (event.player.getEquip(2) || event.player.getEquip(3)) return true;
                                if (event.player.countCards("h") <= 2) return true;
                                return false;
                            }
                            if (event.player.countCards("h") >= 2) return false;
                            if (event.player.countCards("e") > 0) return true;
                            return Math.random() > 0.75;
                        },
                        content: function() {
                            player.logSkill("hx_mouzhan", trigger.player);
                            trigger.player.addTempSkill("hx_junzheng", "phaseAfter");
                        },
                    },

                    "hx_zhengge": {
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function(event, player) {
                            return player.countCards("hej") > 0;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var list = [];
                            if (player.countCards("h") > 0) list.push('手牌区');
                            if (player.countCards("e") > 0) list.push('装备区');
                            if (player.countCards("j") > 0) list.push('判定区');
                            player.chooseControl(list, "cancel2").set('prompt', '整革：弃置一个区域的全部牌').set('ai', function(evt, player) {
                                var cnt1 = 0;
                                var cnt2 = 0;
                                var cnt3 = 0;
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    var target = players[i];
                                    var att = get.attitude(player, target);
                                    if (target == player) {
                                        var c1 = 0;
                                        var c2 = 0;
                                        var avg1 = 0;
                                        var avg2 = 0;
                                        var card1 = player.getCards("h");
                                        var card2 = player.getCards("e");
                                        for (var j = 0; j < card1.length; j++) {
                                            if (get.value(card1[j]) >= 7) cnt1 += 1;
                                            avg1 += get.value(card1[j]);
                                        }
                                        for (var j = 0; j < card2.length; j++) {
                                            if (get.value(card2[j]) >= 7) cnt2 += 1;
                                            avg2 += get.value(card2[j]);
                                        }
                                        avg1 /= player.countCards("h");
                                        avg2 /= player.countCards("e");
                                        if (target.countCards("h") > 0) {
                                            if (target.hp <= 2 && target.countCards("h") <= 2 && avg1 >= 8) cnt1 -= 1;
                                            else if (avg1 <= 8 && avg1 <= target.countCards("h") + 5) cnt1 += 1;
                                            else if (avg1 >= 8) cnt1 -= 1;
                                            else if (target.hasSkillTag('noh')) cnt1 += 1;
                                        }
                                        if (target.countCards("e") > 0) {
                                            if (target.hp <= 2 && (target.getEquip(2) || target.getEquip(3))) cnt2 -= 1;
                                            else if (target.countCards("e") >= 2 && avg2 <= 5) cnt2 += 1;
                                            else if (avg2 >= 8) cnt2 -= 1;
                                            else if (target.hasSkillTag('noe')) cnt2 += 1;
                                        }
                                        if (target.countCards("j") > 0) {
                                            cnt2 += 1;
                                        }
                                        continue;
                                    }
                                    var c2 = 0;
                                    var avg2 = 0;
                                    var card2 = target.getCards("e");
                                    var att = get.attitude(player, target);
                                    for (var j = 0; j < card2.length; j++) {
                                        if (get.value(card2[j]) >= 7) cnt2 += 1;
                                        avg2 += get.value(card2[j], target);
                                    }
                                    avg2 /= target.countCards("e");
                                    if (target.countCards("h") > 0) {
                                        if (target.hasSkillTag('noh')) {
                                            if (att >= 3) cnt1 += 1;
                                            else if (att < 0) cnt1 -= 1;
                                        } else if (target.hp <= 2 && target.countCards("h") <= 2) {
                                            if (att >= 3) cnt1 -= 1;
                                            else if (att < 0) cnt1 += 1;
                                        } else if (target.hp > 2 && target.countCards("h") > 2) {
                                            if (att >= 3) cnt1 += 1;
                                            else if (att < 0) cnt1 -= 1;
                                        }
                                    }
                                    if (target.countCards("e") > 0) {
                                        if (target.hasSkillTag('noe')) {
                                            if (att >= 3) cnt2 += 1;
                                            else if (att < 0) cnt2 -= 1;
                                        } else if (target.hp <= 2 && (target.getEquip(2) || target.getEquip(3))) {
                                            if (att >= 3) cnt2 -= 1;
                                            else if (att < 0) cnt2 += 1;
                                        } else if (avg2 >= 8) {
                                            if (att >= 3) cnt2 -= 1;
                                            else if (att < 0) cnt2 += 1;
                                        } else if (target.countCards("e") >= 2 && avg2 <= 5) {
                                            if (att >= 3) cnt2 += 1;
                                            else if (att < 0) cnt2 -= 1;
                                        }
                                    }
                                    if (target.countCards("j") > 0) {
                                        if (att >= 3) cnt2 += 1;
                                        else if (att < 0) cnt2 -= 1;
                                    }
                                }
                                if (cnt1 < 0 && cnt2 < 0 && cnt3 < 0) return "cancel2";
                                if (cnt3 >= cnt1 && cnt3 >= cnt2) {
                                    if (list.contains('判定区')) return '判定区';
                                    if (cnt1 >= cnt2 && cnt1 >= 0 && list.contains('手牌区')) return '手牌区';
                                    if (cnt2 >= cnt1 && cnt2 >= 0 && list.contains('装备区')) return '装备区';
                                    if (cnt1 >= 0 && list.contains('手牌区')) return '手牌区';
                                    if (cnt2 >= 0 && list.contains('装备区')) return '装备区';
                                    return "cancel2";
                                }
                                if (cnt2 >= cnt1 && cnt2 >= cnt3) {
                                    if (list.contains('装备区')) return '装备区';
                                    if (cnt3 >= cnt1 && cnt3 >= 0 && list.contains('判定区')) return '判定区';
                                    if (cnt1 >= cnt3 && cnt1 >= 0 && list.contains('手牌区')) return '手牌区';
                                    if (cnt3 >= 0 && list.contains('判定区')) return '判定区';
                                    if (cnt1 >= 0 && list.contains('手牌区')) return '手牌区';
                                    return "cancel2";
                                }
                                if (cnt1 >= cnt2 && cnt1 >= cnt3) {
                                    if (list.contains('手牌区')) return '手牌区';
                                    if (cnt3 >= cnt2 && cnt3 >= 0 && list.contains('判定区')) return '判定区';
                                    if (cnt2 >= cnt3 && cnt2 >= 0 && list.contains('装备区')) return '装备区';
                                    if (cnt3 >= 0 && list.contains('判定区')) return '判定区';
                                    if (cnt2 >= 0 && list.contains('装备区')) return '装备区';
                                    return "cancel2";
                                }
                                return "cancel2";
                            });
                            'step 1'
                            if (result.control && result.control != 'cancel2') {
                                player.logSkill("hx_zhengge", game.filterPlayer());
                                if (result.control == '手牌区') {
                                    event.count = player.countCards("h");
                                    player.storage.hx_zhengge = "h";
                                    player.discard(player.getCards("h"));
                                }
                                if (result.control == '装备区') {
                                    event.count = player.countCards("e");
                                    player.storage.hx_zhengge = "e";
                                    player.discard(player.getCards("e"));
                                }
                                if (result.control == '判定区') {
                                    event.count = player.countCards("j");
                                    player.storage.hx_zhengge = "j";
                                    player.discard(player.getCards("j"));
                                }
                            } else event.finish();
                            'step 2'
                            player.draw(event.count);
                            var current = player.next;
                            var area = player.storage.hx_zhengge;
                            while (current != player) {
                                if (area == 'h' && current.countCards("h") > 0) {
                                    var count = current.countCards("h")
                                    current.discard(current.getCards("h"));
                                    current.draw(count);
                                }
                                if (area == 'e' && current.countCards("e") > 0) {
                                    var count = current.countCards("e")
                                    current.discard(current.getCards("e"));
                                    current.draw(count);
                                }
                                if (area == 'j' && current.countCards("j") > 0) {
                                    var count = current.countCards("j")
                                    current.discard(current.getCards("j"));
                                    current.draw(count);
                                }
                                current = current.next;
                            }
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.type(card) != 'delay') return;
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        var att = get.attitude(target, players[i]);
                                        if (target != players[i] && att >= 3 && players[i].countCards("j") > 0) return [0, 1];
                                    }
                                    return [0, 0];
                                },
                            },
                        },
                    },

                    "hx_huntong": {
                        trigger: {
                            global: "dieAfter",
                        },
                        filter: function(event, player) {
                            if (get.mode() != 'identity') return false;
                            if (!player.hasZhuSkill('hx_huntong')) return false;
                            if (event.player.isAlive()) return false;
                            if (event.player.identity != 'fan') return false;
                            return true;
                        },
                        direct: true,
                        zhuSkill: true,
                        content: function() {
                            'step 0'
                            player.chooseBool('是否对' + get.translation(trigger.player) + '发动【混统】？').ai = function() {
                                return true;
                            };
                            'step 1'
                            if (result.bool) {
                                player.logSkill('hx_huntong', trigger.player);
                                var identity = 'zhong';
                                var list;
                                if (_status.characterlist) {
                                    list = [];
                                    for (var i = 0; i < _status.characterlist.length; i++) {
                                        var name = _status.characterlist[i];
                                        if (lib.character[name][1] == 'qun') list.push(name);
                                    }
                                }
                                var players = game.players.concat(game.dead);
                                for (var i = 0; i < players.length; i++) {
                                    list.remove(players[i].name);
                                    list.remove(players[i].name1);
                                    list.remove(players[i].name2);
                                }
                                var p = list.randomGets(1);
                                game.log(trigger.player, "将武将牌替换为", p);
                                trigger.player.reinit(trigger.player.name, p);
                                game.broadcastAll(function(source, identity) {
                                    if (source.node.dieidentity) {
                                        source.node.dieidentity.innerHTML = get.translation(identity + 2);
                                    }
                                    source.revive(1, false);
                                    source.maxHp = 3;
                                    //source.node.maxHp.show();
                                    source.update();
                                    source.identity = identity;
                                    source.setIdentity();
                                }, trigger.player, identity);
                                trigger.player.changeGroup("qun");
                                trigger.player.draw(2);
                                //var evt=trigger.getParent('damage');
                                //if(evt.untrigger) evt.untrigger(false,trigger.player);
                                game.addVideo('setIdentity', trigger.player, 'zhong');
                            } else event.finish();
                        },
                    },

                    "hx_yinbao": {
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        filter: function(event, player) {
                            var players = game.filterPlayer();
                            var count = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].hp < player.hp) count += 1;
                            }
                            return count > 0 && player.getStat('damage') >= count;
                        },
                        content: function() {
                            var players = game.filterPlayer();
                            var count = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].hp < player.hp) count += 1;
                            }
                            player.draw(count);
                        },
                    },

                    "hx_sizhan": {
                        trigger: {
                            player: "useCardBefore",
                        },
                        firstDo: true,
                        filter: function(event, player) {
                            if (event.card.name != 'sha' && event.card.name != 'guohe' && event.card.name != 'shunshou') return false;
                            var tars = game.filterPlayer(function(current) {
                                return current != player && player.inRange(current) && lib.filter.targetEnabled2(event.card, player, current);
                            });
                            return tars.length > 0;
                        },
                        direct: true,
                        content: function() {
                            "step 0"
                            event.extar = game.filterPlayer(function(current) {
                                if (current == player) return false;
                                return player.inRange(current) && lib.filter.targetEnabled(trigger.card, player, current);
                            });
                            player.chooseBool('是否令' + get.translation(trigger.card) + '的目标改为' + get.translation(event.extar) + '？').ai = function() {
                                var eff1 = 0,
                                    eff2 = 0,
                                    tri = _status.event.getTrigger();
                                for (var i = 0; i < event.extar.length; i++) {
                                    eff1 += get.effect(event.extar[i], tri.card, player, player);
                                }
                                for (var i = 0; i < trigger.targets.length; i++) {
                                    eff2 += get.effect(trigger.targets[i], tri.card, player, player);
                                }
                                if (eff1 > eff2) {
                                    return true;
                                }
                                return false;
                            };
                            "step 1"
                            if (result.bool) {
                                player.logSkill('hx_sizhan', event.extar);
                                trigger.targets = [];
                                trigger.targets.addArray(event.extar);
                            }
                        },
                    },

                    "hx_dubang": {
                        enable: "phaseUse",
                        usable: 1,
                        filter: function(event, player) {
                            var players = game.filterPlayer();
                            var cnt1 = 0;
                            var cnt2 = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (player.storage.hx_dubang != true) {
                                    if (player.inRange(players[i]) || players[i] == player) continue;
                                } else if (!player.inRange(players[i]) && players[i] != player) continue;
                                if (players[i].countCards("ej") == 0) continue;
                                for (var j = 0; j < players.length; j++) {
                                    var check = false;
                                    if (player.storage.hx_dubang != true) {
                                        check = player.inRange(players[j]) || players[j] == player;
                                    } else check = (!player.inRange(players[j])) && players[j] != player;
                                    if (check) {
                                        var from = players[i];
                                        var to = players[j];
                                        var js = from.getCards('j');
                                        for (var k = 0; k < js.length; k++) {
                                            if (_status.event.nojudge) break;
                                            if (to.canAddJudge(js[k])) return true;
                                        }
                                        if (to.isMin()) return false;
                                        var es = from.getCards('e');
                                        for (var k = 0; k < es.length; k++) {
                                            if (to.isEmpty(get.subtype(es[k]))) return true;
                                        }
                                    }
                                }
                            }
                            return false;
                        },
                        intro: {
                            content: function(storage, player, skill) {
                                if (player.storage.hx_dubang != true) return '“内”与“外”未交换';
                                return '“内”与“外”已交换';
                            },
                        },
                        content: function() {
                            'step 0'
                            var next = player.chooseTarget(2, function(card, player, target) {
                                if (ui.selected.targets.length) {
                                    if (player.storage.hx_dubang != true) {
                                        if (!player.inRange(target) && player != target) return false;
                                    } else if (player.inRange(target) || target == player) return false;
                                    var from = ui.selected.targets[0];
                                    var js = from.getCards('j');
                                    for (var i = 0; i < js.length; i++) {
                                        if (_status.event.nojudge) break;
                                        if (target.canAddJudge(js[i])) return true;
                                    }
                                    if (target.isMin()) return false;
                                    var es = from.getCards('e');
                                    for (var i = 0; i < es.length; i++) {
                                        if (target.isEmpty(get.subtype(es[i]))) return true;
                                    }
                                    return false;
                                } else {
                                    if (player.storage.hx_dubang != true) {
                                        if (player.inRange(target) || player == target) return false;
                                    } else if (!player.inRange(target) && player != target) return false;
                                    var range = 'ej';
                                    if (_status.event.nojudge) range = 'e';
                                    return target.countCards(range) > 0;
                                }
                            });
                            next.set('nojudge', event.nojudge || false);
                            next.set('ai', function(target) {
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                var sgnatt = get.sgn(att);
                                if (ui.selected.targets.length == 0) {
                                    if (att > 0) {
                                        if (!_status.event.nojudge && target.countCards('j', function(card) {
                                                return game.hasPlayer(function(current) {
                                                    return current != target && current.canAddJudge(card) && get.attitude(player, current) < 0;
                                                })
                                            })) return 14;
                                        if (target.countCards('e', function(card) {
                                                return get.value(card, target) < 0 && game.hasPlayer(function(current) {
                                                    return current != target && get.attitude(player, current) < 0 && current.isEmpty(get.subtype(card)) && get.effect(target, card, player, player) < 0;
                                                });
                                            }) > 0) return 9;
                                    } else if (att < 0) {
                                        if (game.hasPlayer(function(current) {
                                                if (current != target && get.attitude(player, current) > 0) {
                                                    var es = target.getCards('e');
                                                    for (var i = 0; i < es.length; i++) {
                                                        if (get.value(es[i], target) > 0 && current.isEmpty(get.subtype(es[i])) && get.effect(current, es[i], player, player) > 0) return true;
                                                    }
                                                }
                                            })) {
                                            return -att;
                                        }
                                    }
                                    return 0;
                                }
                                var es = ui.selected.targets[0].getCards('e');
                                var i;
                                var att2 = get.sgn(get.attitude(player, ui.selected.targets[0]));
                                for (i = 0; i < es.length; i++) {
                                    if (sgnatt != 0 && att2 != 0 && sgnatt != att2 &&
                                        get.sgn(get.value(es[i], ui.selected.targets[0])) == -att2 &&
                                        get.sgn(get.effect(target, es[i], player, target)) == sgnatt &&
                                        target.isEmpty(get.subtype(es[i]))) {
                                        return Math.abs(att);
                                    }
                                }
                                if (i == es.length && (_status.event.nojudge || !ui.selected.targets[0].countCards('j', function(card) {
                                        return target.canAddJudge(card);
                                    }) || att2 <= 0)) {
                                    return 0;
                                }
                                return -att * att2;
                            });
                            next.set('multitarget', true);
                            next.set('targetprompt', _status.event.targetprompt || ['被移走', '移动目标']);
                            next.set('prompt', event.prompt || '移动场上的一张牌');
                            if (event.prompt2) next.set('prompt2', event.prompt2);
                            if (event.forced) next.set('forced', true);
                            'step 1'
                            event.result = result;
                            if (result.bool) {
                                player.line2(result.targets, 'green');
                                event.targets = result.targets;
                            } else {
                                event.finish();
                            }
                            'step 2'
                            game.delay();
                            'step 3'
                            if (targets.length == 2) {
                                player.choosePlayerCard('ej', true, function(button) {
                                    var player = _status.event.player;
                                    var targets0 = _status.event.targets0;
                                    var targets1 = _status.event.targets1;
                                    if (get.attitude(player, targets0) > 0 && get.attitude(player, targets1) < 0) {
                                        if (get.position(button.link) == 'j') return 12;
                                        if (get.value(button.link, targets0) < 0 && get.effect(targets1, button.link, player, targets1) > 0) return 10;
                                        return 0;
                                    } else {
                                        if (get.position(button.link) == 'j') return -10;
                                        return get.value(button.link) * get.effect(targets1, button.link, player, targets1);
                                    }
                                }, targets[0]).set('nojudge', event.nojudge || false).set('targets0', targets[0]).set('targets1', targets[1]).set('filterButton', function(button) {
                                    var targets1 = _status.event.targets1;
                                    if (get.position(button.link) == 'j') {
                                        if (_status.event.nojudge) return false;
                                        return targets1.canAddJudge(button.link);
                                    } else {
                                        return targets1.isEmpty(get.subtype(button.link));
                                    }
                                });
                            } else {
                                event.finish();
                            }
                            'step 4'
                            if (result.bool && result.links.length) {
                                var link = result.links[0];
                                if (get.position(link) == 'e') {
                                    event.targets[1].equip(link);
                                } else if (link.viewAs) {
                                    event.targets[1].addJudge({
                                        name: link.viewAs
                                    }, [link]);
                                } else {
                                    event.targets[1].addJudge(link);
                                }
                                event.targets[0].$give(link, event.targets[1], false);
                                game.log(event.targets[0], '的', link, '被移动给了', event.targets[1])
                                event.result.card = link;
                                event.result.position = get.position(link);
                                game.delay();
                            }
                        },
                        ai: {
                            order: 13,
                            expose: 0.6,
                            result: {
                                player: function(player, target) {
                                    var players = game.filterPlayer();
                                    var val = 0;
                                    for (var i = 0; i < players.length; i++) {
                                        if (player.storage.hx_dubang != true) {
                                            if (player.inRange(players[i]) || players[i] == player) continue;
                                        } else if (!player.inRange(players[i]) && players[i] != player) continue;
                                        if (players[i].countCards("ej") == 0) continue;
                                        for (var j = 0; j < players.length; j++) {
                                            var check = false;
                                            if (player.storage.hx_dubang != true) {
                                                check = player.inRange(players[j]) || players[j] == player;
                                            } else check = (!player.inRange(players[j])) && players[j] != player;
                                            if (check) {
                                                var from = players[i];
                                                var to = players[j];
                                                var es = from.getCards('e');
                                                var k;
                                                var att2 = get.sgn(get.attitude(player, from));
                                                var att = get.attitude(player, to);
                                                var sgnatt = get.sgn(att);
                                                for (k = 0; k < es.length; k++) {
                                                    if (sgnatt != 0 && att2 != 0 && sgnatt != att2 &&
                                                        get.sgn(get.value(es[k], from)) == -att2 &&
                                                        get.sgn(get.effect(to, es[k], player, to)) == sgnatt &&
                                                        to.isEmpty(get.subtype(es[i]))) {
                                                        val = Math.max(val, Math.abs(att));
                                                    }
                                                }
                                                if (k == es.length && (_status.event.nojudge || !from.countCards('j', function(card) {
                                                        return to.canAddJudge(card);
                                                    }) || att2 <= 0)) {
                                                    val = Math.max(val, 0);
                                                } else val = Math.max(val, -att * att2);
                                            }
                                        }
                                    }
                                    if (val > 0) return val;
                                    else return -1;
                                },
                            },
                            threaten: 1.5,
                        },
                    },

                    "hx_fudeng": {
                        trigger: {
                            player: "loseAfter",
                        },
                        filter: function(event, player) {
                            return (!player.countCards('e') && event.es && event.es.length > 0) ||
                                (!player.countCards('h') && event.hs && event.hs.length > 0) ||
                                (!player.countCards('j') && event.js && event.js.length > 0);
                        },
                        skillAnimation: true,
                        animationColor: "thunder",
                        unique: true,
                        juexingji: true,
                        forced: true,
                        content: function() {
                            player.awakenSkill("hx_fudeng");
                            player.draw(2);
                            player.recover();
                            player.storage.hx_dubang = true;
                            player.markSkill("hx_dubang");
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.type(card) == 'delay' && player.countCards('j') == 0 && player.isDamaged()) return [1, 2];
                                },
                            },
                            noh: true,
                            noe: true,
                            skillTagFilter: function(player, tag) {
                                if (tag == 'noh') {
                                    if (player.countCards('h') != 1) return false;
                                }
                                if (tag == 'noe') {
                                    if (player.countCards('e') != 1) return false;
                                }
                            },
                        },
                    },

                    "hx_jiewei": {
                        trigger: {
                            player: "damageBegin1",
                        },
                        filter: function(event, player) {
                            if (player.countCards("e") == 0) return false;
                            var suits = [];
                            var cards = player.getCards("e");
                            for (var i = 0; i < cards.length; i++) {
                                suits.push(get.suit(cards[i]));
                            }
                            return event.card && suits.contains(get.suit(event.card)) && event.notLink();
                        },
                        forced: true,
                        content: function() {
                            trigger.num -= 1;
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target) {
                                    if (player.hasSkillTag('jueqing', false, target)) return;
                                    if (target.countCards("e") == 0) return;
                                    var suits = [];
                                    var cards = target.getCards("e");
                                    for (var i = 0; i < cards.length; i++) {
                                        suits.push(get.suit(cards[i]));
                                    }
                                    if (!card || !suits.contains(get.suit(card))) return;
                                    var num = get.tag(card, 'damage');
                                    if (card.name == 'sha') {
                                        if (player.hasSkill("jiu") || player.countCards("h", {
                                                name: "jiu"
                                            }) > 0) return [1, -0.5];
                                        else return 'zerotarget';
                                    }
                                    if (num) {
                                        if (num > 1) return 0.5;
                                        else return 'zerotarget';
                                    } else return;
                                },
                            },
                        },
                    },

                    "hx_zhuanying": {
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter"],
                        },
                        init: function(player) {
                            player.storage.hx_zhuanying2 = [];
                        },
                        filter: function(event, player) {
                            return event.cards && event.cards.filter(function(card) {
                                return get.position(card, true) == 'd' && get.type(card) == 'equip';
                            }).length > 0;
                        },
                        forced: true,
                        content: function() {
                            var cards = [];
                            for (var i = 0; i < trigger.cards.length; i++) {
                                var card = trigger.cards[i];
                                if (get.position(card, true) == 'd' && get.type(card) == 'equip') cards.push(card);
                            }
                            player.$gain2(cards);
                            player.lose(cards, ui.special, "toStorage");
                            player.storage.hx_zhuanying2 = player.storage.hx_zhuanying2.concat(cards);
                            player.syncStorage("hx_zhuanying2");
                            player.markSkill("hx_zhuanying2");
                            game.log(player, '将', cards, '置于武将牌上作为“货”');
                        },
                    },

                    "hx_zhuanying2": {
                        marktext: "货",
                        intro: {
                            content: 'cards',
                            onunmark: function(storage, player) {
                                if (storage && storage.length) {
                                    player.$throw(storage, 1000);
                                    game.cardsDiscard(storage);
                                    game.log(storage, '被置入了弃牌堆');
                                    storage.length = 0;
                                }
                            },
                        },
                    },

                    "hx_tonghuo": {
                        trigger: {
                            global: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            return player.storage.hx_zhuanying2.length > 0 && event.player != player;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            trigger.player.chooseCard('h', '是否将一张手牌交给' + get.translation(player) + '？', function(card, player) {
                                return true;
                            }).set('ai', function(card) {
                                var cards = player.storage.hx_zhuanying2;
                                var max = 0;
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.value(cards[i], trigger.player) > max) max = get.value(cards[i], trigger.player);
                                }
                                if (max >= 8) return max - get.value(card, trigger.player);
                                if (get.attitude(trigger.player, player) >= 0) return max - get.value(card, trigger.player);
                                if (get.value(card, trigger.player) < 5) return max - get.value(card, trigger.player);
                                return max - 2 - get.value(card, trigger.player);
                            });
                            'step 1'
                            if (result.bool) {
                                trigger.player.logSkill("hx_tonghuo", player);
                                event.card = result.cards[0];
                                player.gain(result.cards, trigger.player, 'give');
                                trigger.player.chooseButton(['通货：选择要获得的牌', player.storage.hx_zhuanying2], [1, 1], true).set('ai', function(button) {
                                    return get.value(button.link, trigger.player, 'raw');
                                });
                            } else event.finish();
                            'step 2'
                            if (result.bool) {
                                player.storage.hx_zhuanying2.remove(result.links[0]);
                                trigger.player.gain(result.links[0], 'gain2');
                                player.syncStorage('hx_zhuanying2');
                                player.markSkill("hx_zhuanying2");
                                if (player.getCards("h").contains(event.card)) {
                                    player.chooseBool('是否将' + get.translation(event.card) + '置为“货”？').ai = function() {
                                        var current = _status.currentPhase;
                                        var enemy = 0;
                                        while (current != player) {
                                            if (get.attitude(player, current) < 0) enemy += 1;
                                            current = current.next;
                                        }
                                        if (enemy == 0) return 5 - get.value(event.card) > 0;
                                        return 5 - get.useful(event.card, player) > 0;
                                    };
                                } else event.finish();
                            } else event.finish();
                            'step 3'
                            if (result.bool) {
                                player.lose(event.card, ui.special, "toStorage");
                                player.storage.hx_zhuanying2 = player.storage.hx_zhuanying2.concat(event.card);
                                player.syncStorage("hx_zhuanying2");
                                player.markSkill("hx_zhuanying2");
                                game.log(player, '将', event.card, '置于武将牌上作为“货”');
                            }
                        },
                    },

                    "hx_fuli": {
                        trigger: {
                            player: "phaseBegin",
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            if (player.storage.hx_zhuanying2.length == 0) {
                                var cards = get.cards(2);
                                player.storage.hx_zhuanying2 = player.storage.hx_zhuanying2.concat(cards);
                                player.$gain2(cards);
                                game.log(player, '将', cards, '置于武将牌上作为“货”');
                                player.syncStorage("hx_zhuanying2");
                                player.markSkill("hx_zhuanying2");
                                event.finish();
                            } else {
                                player.chooseTarget(get.prompt2("hx_fuli3d8"), [1, Math.min(player.hp, player.storage.hx_zhuanying2.length)], function(card, player, target) {
                                    return true;
                                }).set('ai', function(target) {
                                    if (get.attitude(player, target) <= 0) return -1;
                                    if (target.hasJudge("lebu") && target.countCards("h") > target.getHandcardLimit()) return 0;
                                    return get.attitude(player, target);
                                });
                            }
                            'step 1'
                            if (result.bool) {
                                event.count = 0;
                                event.targets = result.targets;
                                player.logSkill("hx_fuli", event.targets);
                            } else event.finish();
                            'step 2'
                            event.targets[event.count].chooseButton(['赋利：选择要获得的牌', player.storage.hx_zhuanying2], [1, 1], true).set('ai', function(button) {
                                return get.value(button.link, trigger.player, 'raw');
                            });
                            'step 3'
                            if (result.bool) {
                                player.storage.hx_zhuanying2.remove(result.links[0]);
                                event.targets[event.count].gain(result.links[0], 'gain2');
                                player.syncStorage('hx_zhuanying2');
                                player.markSkill("hx_zhuanying2");
                            }
                            event.count += 1;
                            if (event.count == event.targets.length) {
                                event.finish();
                                return;
                            } else event.goto(2);
                        }
                    },

                    "hx_daye": {
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        content: function() {
                            'step 0'
                            var targets = game.players.slice(0);
                            targets.remove(player);
                            targets.sort(lib.sort.seat);
                            event.targets = targets;
                            'step 1'
                            if (event.targets.length) {
                                event.target = event.targets.shift();
                            } else {
                                event.goto(4);
                            }
                            'step 2'
                            if (event.target.countCards('he')) {
                                event.target.chooseCard('he', '选择一张牌交给' + get.translation(player), true).ai = function(card) {
                                    var att = get.attitude(event.target, player);
                                    if (att <= 0) return -get.value(card);
                                    if (event.target.hp < player.hp && get.type(card) == 'basic') {
                                        return 8 - get.value(card);
                                    }
                                    return get.value(card);
                                }
                            } else {
                                event.goto(1);
                            }
                            'step 3'
                            if (result.bool) {
                                player.gain(result.cards[0]);
                                target.$give(1, player);
                            }
                            event.goto(1);
                            'step 4'
                            var targets = game.players.slice(0);
                            targets.remove(player);
                            targets.sort(lib.sort.seat);
                            event.targets = targets;
                            'step 5'
                            if (event.targets.length) {
                                event.target = event.targets.shift();
                            } else {
                                event.finish();
                            }
                            'step 6'
                            if (player.countCards('he')) {
                                player.chooseCard('he', '选择一张牌交给' + get.translation(event.target), true).ai = function(card) {
                                    var att = get.attitude(player, event.target);
                                    if (att <= 0) return -get.value(card);
                                    var cnt = 0;
                                    for (var i = 0; i < event.targets.length; i++) {
                                        if (get.attitude(player, event.targets[i]) > 0 && event.targets[i].hp < event.target.hp) cnt += 1;
                                    }
                                    if (event.target.hp < player.hp) {
                                        if (get.type(card) == 'basic') return get.value(card) + 2 * Math.max(0, 3 - cnt);
                                        return 11 - get.value(card);
                                    }
                                    return -get.value(card);
                                }
                            } else {
                                event.goto(5);
                            }
                            'step 7'
                            if (result.bool) {
                                target.gain(result.cards[0]);
                                player.$give(1, target);
                            }
                            event.goto(5);
                        },
                    },

                    "hx_haolu": {
                        trigger: {
                            player: "dieBefore",
                        },
                        skillAnimation: true,
                        animationColor: "thunder",
                        unique: true,
                        juexingji: true,
                        zhuSkill: true,
                        filter: function(event, player) {
                            return get.mode() == 'identity' && event.player == game.zhu &&
                                player.hasZhuSkill("hx_haolu") && event.source && event.source.isIn();;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill("hx_haolu");
                            trigger.cancel();
                            player.identity = 'zhong';
                            player.showIdentity();
                            player.update();
                            trigger.source.identity = 'zhu';
                            trigger.source.showIdentity();
                            trigger.source.update();
                            trigger.source.gainMaxHp();
                            game.zhu = trigger.source;
                            player.die();
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, effect) {
                                    if (get.mode() != 'identity') return;
                                    if (!target.hasZhuSkill("hx_haolu")) return;
                                    if (player.identity == 'fan') return;
                                    if (!get.tag(card, 'damage')) return;
                                    if (target.hp == 1 && player.hp > target.hp + 1) return [0, 0, 0, 3];
                                    else return;
                                },
                            },
                        },
                    },

                    "hx_yimeng": {
                        trigger: {
                            player: ["chooseToUseBegin"],
                        },
                        init: function(player) {
                            player.storage.yimeng_map = new Map();
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                var cards = [];
                                player.storage.yimeng_map.set(players[i], true);
                            }
                        },
                        filter: function(event, player) {
                            if (event.responded) return false;
                            if (!event.filterCard({
                                    name: 'shan'
                                }, player, event)) return false;
                            if (event.name == 'chooseToRespond' && !lib.filter.cardRespondable({
                                    name: 'shan'
                                }, player, event)) return false;
                            var sour = event.getParent().player;
                            return true;
                        },
                        direct: true,
                        content: function() {
                            "step 0"
                            player.chooseTarget("役盟：选择一名其他角色，令其交给你一张【闪】", function(card, player, target) {
                                if (player == target) return false;
                                return true;
                            }, false).ai = function(target) {
                                var att = get.attitude(player, target);
                                var s = 1;
                                if (player.storage.yimeng_map.get(target) == false) s = 0.6;
                                if (player.hp == 1) {
                                    if (player.countCards("h") == 0 || player.hp == 1) {
                                        if (att < 0) return Math.max(1, 3 - target.countCards("h"));
                                        if (att >= 3) {
                                            if (target.hp > 1) return (target.countCards("h") * 0.1 + 0.1) * s;
                                            return (target.countCards("h") - 2) * s;
                                        }
                                        return 0.5;
                                    }
                                    if (att <= 0) return 0.1;
                                    return (target.countCards("h") + 0.1) * s;
                                }
                                if (player.countCards("h") == 0 || player.hp == 1) {
                                    if (att < 0) return Math.max(1, 4 - target.countCards("h"));
                                    if (att >= 3) {
                                        if (target.hp > 1) return (target.countCards("h") * 0.1 + 0.1) * s;
                                        return (target.countCards("h") - 3) * s;
                                    }
                                    return 0.5;
                                }
                                if (att <= 0) return 0.1;
                                return (target.countCards("h") + 0.1) * s;
                            };
                            "step 1"
                            if (result.bool) {
                                event.target = result.targets[0];
                                player.logSkill("hx_yimeng", event.target);
                                event.target.chooseCard({
                                    filterCard: function(card) {
                                        return card.name == 'shan';
                                    },
                                    position: 'h',
                                    selectCard: 1,
                                    ai: function(card) {
                                        var att = get.attitude(event.target, player);
                                        if (att <= 0) {
                                            var check = (player.hp == 1 && player.countCards("h") <= 1 && event.target.hp >= 2);
                                            if (player.countCards("h") == 0 && !check && event.target.hp <= 3) return 1;
                                            return att;
                                        }
                                        if (event.target.hp == 1 && player.hp != 1 && event.target.countCards("h", {
                                                name: "shan"
                                            }) <= 1) return 0;
                                        return 1;
                                    },
                                    prompt: '是否交给' + get.translation(player) + '一张【闪】？'
                                });
                            } else event.finish();
                            "step 2"
                            if (result.bool) {
                                player.gain(result.cards, event.target, 'give');
                            } else {
                                player.storage.yimeng_map.set(event.target, false);
                                if (player.countCards("h") == 0 || player.hp == 1) event.target.loseHp();
                                event.finish();
                            }
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, effect) {
                                    if (card.name != 'sha') return;
                                    if (target.countCards('h') != 0) return;
                                    if (!player.hasFriend() && player.countCards("h", {
                                            name: "shan"
                                        }) == 0) return [1, 0, 1, -2];
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] == player || players[i] == target) continue;
                                        if (get.attitude(player, players[i]) <= 0) continue;
                                        if (players[i].countCards("h") == 0) return [1, 0, 1, -2];
                                    }
                                    return [1, 0, 1, -1];
                                },
                            },
                        },
                        group: ["hx_yimeng_record"],
                        subSkill: {
                            record: {
                                trigger: {
                                    global: "drawBegin",
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                content: function() {
                                    player.storage.yimeng_map.set(trigger.player, true);
                                },
                            },
                        }
                    },

                    "hx_tuixin": {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            return player.countCards('h', 'sha') > 0;
                        },
                        direct: true,
                        content: function() {
                            "step 0"
                            player.chooseCard({
                                filterCard: function(card) {
                                    return card.name == 'sha';
                                },
                                position: 'h',
                                selectCard: 1,
                                ai: function(card) {
                                    if (player.countCards('h', 'sha') == 1 && !player.isDamaged()) return 5 - get.value(card);
                                    if (player.isDamaged()) return 8 - get.value(card);
                                    return 6 - get.value(card);
                                },
                                prompt: '推心：重铸手牌中的一张【杀】',
                            });
                            "step 1"
                            if (result.bool) {
                                var cards = result.cards;
                                player.lose(cards, ui.discardPile, 'visible');
                                player.$throw(cards, 1000);
                                game.log(player, '将', cards, '置入弃牌堆');
                                player.draw(cards.length);
                                player.chooseTarget("推心：选择一名其他角色，令其弃置一张【杀】", function(card, player, target) {
                                    if (player == target) return false;
                                    return true;
                                }, true).ai = function(target) {
                                    var att = get.attitude(player, target);
                                    if (player.isDamaged()) {
                                        var s = 0;
                                        if (att < 0) s = 0.1;
                                        return Math.min(1, 5 - target.countCards("h")) + s;
                                    }
                                    if (att >= 0) return -att;
                                    return Math.min(1, 5 - Math.abs(target.countCards("h") - 2));
                                };
                            } else event.finish();
                            "step 2"
                            if (result.bool) {
                                event.target = result.targets[0];
                                player.logSkill("hx_tuixin", event.target);
                                if (event.target.countCards("h", {
                                        name: "sha"
                                    }) > 0) {
                                    var next = event.target.chooseToDiscard("弃置一张【杀】", {
                                        name: "sha"
                                    }, true);
                                    next.set("ai", function(card) {
                                        return 10 - get.useful(card);
                                    });
                                } else player.recover();
                            } else event.finish();
                        },
                    },

                    "hx_shuobang": {
                        trigger: {
                            player: "phaseDrawEnd",
                        },
                        forced: true,
                        content: function() {
                            var max = 0;
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                max = Math.max(max, players[i].countCards("h"));
                            }
                            if (max == player.countCards("h")) {
                                player.gainMaxHp();
                            } else {
                                player.draw();
                            }
                        },
                    },

                    "hx_yiquan": {
                        trigger: {
                            global: "phaseDiscardBegin",
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            event.list = [];
                            event.list.push("+2");
                            event.list.push("-2");
                            event.list.push('cancel2');
                            player.chooseControl(event.list, function() {
                                if (player.maxHp <= 3) return "cancel2";
                                var att = get.attitude(player, trigger.player);
                                if (att == 0) return "cancel2";
                                if (att < 0) {
                                    var prev = Math.max(0, trigger.player.countCards("h") - trigger.player.getHandcardLimit());
                                    var after = Math.max(0, trigger.player.countCards("h") - Math.max(0, trigger.player.getHandcardLimit() - 2));
                                    if (after - prev == 0) return "cancel2";
                                    if (after - prev == 1) {
                                        if (trigger.player.getHandcardLimit() == 1 && player.maxHp >= 4 &&
                                            (player.isDamaged() || trigger.player.hp == 1)) return "-2";
                                        return "cancel2";
                                    }
                                    if (player.maxHp >= 4 &&
                                        (player.isDamaged() || trigger.player.hp <= 2)) return "-2";
                                    return "cancel2";
                                }
                                var prev = Math.max(0, trigger.player.countCards("h") - trigger.player.getHandcardLimit());
                                var after = Math.max(0, trigger.player.countCards("h") - (trigger.player.getHandcardLimit() + 2));
                                if (trigger.player == player) {
                                    after = Math.max(0, trigger.player.countCards("h") + 1 - (trigger.player.getHandcardLimit() + 2));
                                }
                                if (trigger.player == player) {
                                    if (prev - after >= 2) {
                                        if (player.isDamaged() && player.maxHp >= 4) return "+2";
                                    }
                                    return "cancel2";
                                }
                                if (att >= 3) {
                                    if (prev - after == 0) return "cancel2";
                                    if (prev - after == 1) {
                                        if (player.maxHp >= 5 &&
                                            (player.isDamaged() || trigger.player.hp == 1)) return "+2";
                                        return "cancel2";
                                    }
                                    if (player.maxHp >= 4 &&
                                        player.isDamaged()) return "+2";
                                    return "cancel2";
                                }
                                if (player.maxHp >= 5 &&
                                    (player.isDamaged() || trigger.player.hp == 1)) return "+2";
                                return "cancel2";
                            }).set('prompt', get.prompt2('hx_yiquan'));
                            'step 1'
                            if (result.control != 'cancel2') {
                                player.logSkill("hx_yiquan", trigger.player);
                                if (result.control == '+2') {
                                    player.draw();
                                    trigger.player.addTempSkill("hx_yiquan_1");
                                }
                                if (result.control == '-2') trigger.player.addTempSkill("hx_yiquan_2");
                                player.loseMaxHp();
                            } else event.finish();
                        },
                    },

                    "hx_yiquan_1": {
                        mod: {
                            maxHandcard: function(player, num) {
                                return 2 + num;
                            }
                        },
                    },

                    "hx_yiquan_2": {
                        mod: {
                            maxHandcard: function(player, num) {
                                return num - 2;
                            }
                        },
                    },

                    "hx_zhishi_lz": {
                        unique: true,
                        zhuSkill: true,
                        trigger: {
                            player: "phaseEnd",
                        },
                        filter: function(event, player) {
                            if (!player.hasZhuSkill("hx_zhishi_lz")) return false;
                            if (!game.hasPlayer(function(current) {
                                    return current.group == 'wei' && current.countCards("he") > 0;
                                })) return false;
                            return true;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget("治世：选择任意名魏势力角色", [1, Infinity], function(card, player, target) {
                                return target.group == 'wei' && target.countCards("he") > 0;
                            }).set('ai', function(target) {
                                if (target == player) {
                                    var cards = target.getCards("he");
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.value(cards[i], player) < 5) return 1;
                                    }
                                    return -1;
                                }
                                var att = get.attitude(player, target);
                                if (att == 0) return 0.1;
                                var check1 = target.countCards("h") <= 1;
                                var check2 = (target.countCards("e") == 0 || (target.countCards("e") == 1 && (target.getEquip(2) || target.getEquip(3))));
                                if (att > 0) {
                                    if (check1 && check2 && target.hp <= 2) return -1;
                                    return 1;
                                }
                                if (check1 && check2 && target.hp <= 2) return 1;
                                return -1;
                            });
                            "step 1"
                            if (result.bool) {
                                var targets = result.targets.sortBySeat();
                                event.targets = targets;
                                player.logSkill('hx_zhishi_lz', targets);
                                event.current = 0;
                            } else {
                                event.finish();
                            }
                            "step 2"
                            event.targets[event.current].chooseToDiscard("he", true);
                            "step 3"
                            if (result.bool) {
                                if (event.current < event.targets.length - 1) {
                                    event.current += 1;
                                    event.goto(2);
                                } else {
                                    event.current = 0;
                                    event.goto(4);
                                }
                            } else event.finish();
                            "step 4"
                            event.targets[event.current].chooseTarget('选择一名角色，令其摸一张牌', function(card, player, target) {
                                return true;
                            }, true).ai = function(target) {
                                if (get.attitude(event.targets[event.current], target) <= 0) return -1;
                                if (target.countCards("h") >= 3) return 1;
                                return target.maxHp - target.hp + 4 - target.countCards("h");
                            }
                            "step 5"
                            if (result.bool) {
                                game.log(event.targets[event.current], "选择了", result.targets[0]);
                                event.targets[event.current].line(result.targets[0], 'green');
                                result.targets[0].draw();
                                if (event.current < event.targets.length - 1) {
                                    event.current += 1;
                                    event.goto(4);
                                } else {
                                    event.current = 0;
                                    event.finish();
                                }
                            } else event.finish();
                        },
                    },

                    "hx_tuxian": {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        forced: true,
                        content: function() {
                            'step 0'
                            var players = game.filterPlayer();
                            var flag = 0;
                            for (var i = 0; i < players.length; i++) {
                                if (players[i] == player) continue;
                                if (get.distance(player, players[i]) > player.getAttackRange()) flag = 1;
                            }
                            if (flag == 0) {
                                player.recover();
                                event.finish();
                            } else {
                                player.chooseTarget("突险：选择一名攻击范围外的角色，对其造成1点伤害", function(card, player, target) {
                                    return target != player && get.distance(player, target) > player.getAttackRange();
                                }, true).ai = function(target) {
                                    return get.damageEffect(target, player, player);
                                };
                            }
                            'step 1'
                            if (result.bool) {
                                player.line(result.targets, "red");
                                result.targets[0].damage();
                                player.addTempSkill("hx_tuxian_temp");
                            }
                        },
                    },

                    "hx_tuxian_temp": {
                        mod: {
                            attackFrom: function(from, to, distance) {
                                return distance - 1;
                            },
                        },
                    },

                    "hx_zhongye": {
                        trigger: {
                            player: "phaseEnd",
                        },
                        filter: function(event, player) {
                            return game.roundNumber >= game.filterPlayer().length;
                        },
                        skillAnimation: true,
                        animationColor: "thunder",
                        unique: true,
                        juexingji: true,
                        forced: true,
                        limited: true,
                        content: function() {
                            'step 0'
                            player.awakenSkill("hx_zhongye");
                            event.count = 0;
                            'step 1'
                            player.chooseTarget("终业：选择一名角色成为雷【杀】的目标", function(card, player, target) {
                                return lib.filter.targetEnabled2({
                                    name: 'sha',
                                    nature: "thunder"
                                }, player, target);
                            }).ai = function(target) {
                                return get.effect(target, {
                                    name: 'sha',
                                    nature: "thunder"
                                }, player);
                            }
                            "step 2"
                            if (result.bool) {
                                player.useCard({
                                    name: 'sha',
                                    nature: "thunder"
                                }, result.targets[0], true);
                                event.count += 1;
                                if (event.count == 3) event.goto(3);
                                else event.goto(1);
                            } else event.goto(3);
                            "step 3"
                            player.gainMaxHp();
                            player.loseHp(2);
                            player.removeSkill("hx_tuxian");
                        },
                        intro: {
                            content: "limited",
                        },
                    },

                    "hx_fenshen": {
                        group: ["hx_fenshen_sha", "hx_fenshen_shan"],
                    },

                    "hx_fenshen_sha": {
                        trigger: {
                            player: "useCard2",
                        },
                        filter: function(event, player) {
                            if (event.card.name != 'sha') return false;
                            if (player.hasSkill("hx_fenshen_sha_temp")) return false;
                            return game.hasPlayer(function(current) {
                                return !event.targets.contains(current) && lib.filter.targetEnabled2(
                                    event.card, player, current);
                            });
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(get.prompt('hx_fenshen'), '为' + get.translation(trigger.card) + '增加一个目标', function(card, player, target) {
                                return target != player && !_status.event.sourcex.contains(target) && lib.filter.targetEnabled2(
                                    trigger.card, player, target);
                            }).set('sourcex', trigger.targets).set('ai', function(target) {
                                var player = _status.event.player;
                                var eff = 0;
                                if (!player.inRange(target)) eff = 2;
                                return get.effect(target, _status.event.card, player, player) + eff;
                            }).set('card', trigger.card);
                            'step 1'
                            if (result.bool) {
                                player.addTempSkill("hx_fenshen_sha_temp");
                                if (!event.isMine() && !event.isOnline()) game.delayx();
                                event.target = result.targets[0];
                            } else {
                                event.finish();
                            }
                            'step 2'
                            player.logSkill('hx_fenshen', event.target);
                            if (!player.inRange(event.target)) player.draw();
                            trigger.targets.push(event.target);
                        },
                        ai: {
                            effect: {
                                player: function(card, player, target, current, isLink) {
                                    if (!isLink && card.name == 'sha') {
                                        if (player._hxfenshentmp) return;
                                        player._hxfenshentmp = true;
                                        if (get.effect(target, card, player, player) < 0) {
                                            delete player._hxfenshentmp;
                                            return;
                                        }
                                        if (game.hasPlayer(function(current) {
                                                return current != target &&
                                                    lib.filter.targetEnabled2(
                                                        card, player, current) &&
                                                    get.effect(current, card, player, player) > 0 &&
                                                    !player.inRange(current);
                                            })) {
                                            delete player._hxfenshentmp;
                                            return [1, 2];
                                        } else if (game.hasPlayer(function(current) {
                                                return current != target &&
                                                    lib.filter.targetEnabled2(
                                                        card, player, current) &&
                                                    get.effect(current, card, player, player) > 0;
                                            })) {
                                            delete player._hxfenshentmp;
                                            return [1, 1];
                                        }
                                        delete player._hxfenshentmp;
                                    }
                                },
                            },
                        },
                    },

                    "hx_fenshen_sha_temp": {},

                    "hx_fenshen_shan": {
                        trigger: {
                            player: "useCard2",
                        },
                        filter: function(event, player) {
                            if (event.card.name != 'shan') return false;
                            if (!event.card.cards) return false;
                            if (player.hasSkill("hx_fenshen_shan_temp")) return false;
                            return true;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(get.prompt('hx_fenshen'), '将' + get.translation(trigger.card) + '交给一名角色', function(card, player, target) {
                                return target != player;
                            }).set('ai', function(target) {
                                if (get.attitude(player, target) <= 0) return -1;
                                var eff = 0;
                                if (!player.inRange(target) && player != target) eff = 3;
                                return Math.max(1, 3 - target.hp) * Math.max(1, 3 - target.countCards("h")) + eff;
                            });
                            'step 1'
                            if (result.bool) {
                                player.addTempSkill("hx_fenshen_shan_temp");
                                if (!event.isMine() && !event.isOnline()) game.delayx();
                                event.target = result.targets[0];
                            } else {
                                event.finish();
                            }
                            'step 2'
                            player.logSkill('hx_fenshen', event.target);
                            if (!player.inRange(event.target)) player.draw();
                            event.target.gain(trigger.card.cards[0], player, 'give');
                        },
                    },

                    "hx_fenshen_shan_temp": {},

                    "hx_duijue": {
                        group: ["hx_duijue_filter", "hx_duijue_init"],
                        trigger: {
                            global: "phaseEnd",
                        },
                        init: function(player) {
                            player.storage.hx_duijue = [];
                        },
                        filter: function(event, player) {
                            return player.storage.hx_duijue.length == 1;
                        },
                        check: function(event, player) {
                            var target = player.storage.hx_duijue[0];
                            if (target.isTurnedOver()) return true;
                            if (get.attitude(player, target) <= 0) return true;
                            if (get.damageEffect(target, player, player) > 0) return true;
                            if (player.hp < target.hp && player.hp <= 2 && player.countCards("h") <= 2) return true;
                            return false;
                        },
                        content: function() {
                            'step 0'
                            event.target = player.storage.hx_duijue[0];
                            var controls = [];
                            controls.push("摸两张牌");
                            controls.push("对" + get.translation(event.target) + "造成1点伤害");
                            player.chooseControl(function(event, player) {
                                var target = player.storage.hx_duijue[0];
                                var att = get.attitude(player, target);
                                var eff = get.damageEffect(target, player, player);
                                if (att > 0) {
                                    if (eff > 0) {
                                        if (player.countCards("h") <= 2) return "选项一";
                                        return "选项二";
                                    }
                                    return "选项一";
                                }
                                if (eff == 0) "选项一";
                                if (eff > 0) {
                                    if (target.hp >= 2 && target.hp <= player.hp && player.countCards("h") >= 2) return "选项二";
                                    if (target.hp == 1 && player.countCards("h") >= 1) return "选项二";
                                    return "选项一";
                                }
                                return "选项一";
                            }).set("prompt", "对决：请选择执行一项").set("choiceList", controls);
                            'step 1'
                            if (result.control) {
                                player.logSkill("hx_duijue", event.target);
                                if (result.control == '选项一') player.draw(2);
                                else event.target.damage();
                                if (event.target.isTurnedOver()) {
                                    event.finish();
                                    return;
                                }
                                event.target.draw(2);
                                event.target.turnOver();
                                event.target.addTempSkill("hx_duijue_debuff", {
                                    player: "phaseUseAfter"
                                });
                                event.target.storage.hx_duijue_player = player;
                                event.target.phaseUse();
                            } else event.finish();
                        },
                        subSkill: {
                            filter: {
                                trigger: {
                                    player: ["useCard"],
                                },
                                popup: false,
                                forced: true,
                                silent: true,
                                filter: function(event, player) {
                                    if (!event.targets) return false;
                                    return true;
                                },
                                content: function() {
                                    for(var i = 0;i<trigger.targets.length;i++){
                                        if(trigger.targets[i] == player) continue;
                                        if (!player.storage.hx_duijue.contains(trigger.targets[i])) {
                                            player.storage.hx_duijue.push(trigger.targets[i]);
                                        }
                                    }
                                }
                            },
                            init: {
                                trigger: {
                                    player: ["phaseBegin", "phaseAfter"],
                                },
                                popup: false,
                                forced: true,
                                silent: true,
                                content: function() {
                                    player.storage.hx_duijue = [];
                                }
                            },
                        },
                        ai: {
                            effect: {
                                player: function(card, player, target, current) {
                                    if (player != _status.currentPhase) return;
                                    if (get.tag(card, 'multitarget')) return current - 2;
                                    if (player.storage.hx_duijue.length == 0 || player.storage.hx_duijue.length >= 2) return;
                                    var target1 = player.storage.hx_duijue[0];
                                    if (!target) return;
                                    if (get.attitude(player, target1) <= 0 && target1 != target) return current - 2;
                                    return;
                                },
                            },
                        },
                    },

                    "hx_duijue_debuff": {
                        mod: {
                            playerEnabled: function(card, player, target) {
                                if (player.storage.hx_duijue_player != target) return false;
                            }
                        }
                    },
                },
                translate: {
                    "hx_fengshen": "风神",
                    "hx_fengshen_info": "弃牌阶段开始时，或你的武将牌状态变化时，你可以摸一张牌。",
                    "hx_yinshi": "隐仕",
                    "hx_yinshi_info": "每当你受到一次伤害后，可以横置武将牌；每当你造成一次伤害后，可以重置武将牌。",
                    "hx_jingzhi": "精治",
                    "hx_jingzhi_info": "出牌阶段，你可以弃置任意数量的牌，然后令一名角色摸等量的牌，若你以此法弃置了基本牌，此阶段你不能再发动此技能。",
                    "hx_yiliao": "遗料",
                    "hx_yiliao_info": "每当你进入濒死状态时，你可以观看牌堆顶的五张牌，然后你可以令一名角色获得其中的三张牌，其余以任意顺序置于牌堆顶。",
                    "hx_zhangbing": "掌兵",
                    "hx_zhangbing_info": "出牌阶段限一次，你可以观看一名装备区的牌数量不大于你攻击范围的其他角色的手牌，并使用其中一张。",
                    "hx_shiquan": "释权",
                    "hx_shiquan_info": "出牌阶段限一次，你可以将两张牌交给一名其他角色，然后其选择一项：交给你其装备区内的一张牌，或将武将牌翻面。",
                    "hx_jiashen": "加身",
                    "hx_jiashen_info": "主公技，出牌阶段限一次，其他吴势力角色与你可以对彼此使用装备牌和【桃】。",
                    "hx_jiashen_2": "加身",
                    "hx_jiashen_2_info": "出牌阶段限一次，你可以对主公使用装备牌和【桃】。",
                    "hx_choushi": "筹世",
                    "hx_choushi_info": "锁定技，每轮开始时，由你安排非主公角色的行动顺序。",
                    "hx_choushi_setup": "筹世",
                    "hx_choushi_setup_info": "",
                    "hx_choushi_zhu": "筹世",
                    "hx_choushi_zhu_info": "",
                    "hx_zhiyin": "知隐",
                    "hx_zhiyin_info": "锁定技，你视为不在体力值大于你的角色的攻击范围内。",
                    "hx_zhuantu": "转突",
                    "hx_zhuantu_info": "锁定技，弃牌阶段开始前，你须失去一点体力或体力上限，并视为使用一张【杀】，若此杀造成伤害，此阶段改为出牌阶段。",
                    "hx_baizhan": "百战",
                    "hx_baizhan_info": "锁定技，回合结束时，若此回合你造成的伤害不少于三点，此回合结束后你进行一个额外的回合。",
                    "hx_shangyue": "殇乐",
                    "hx_shangyue_info": "主公技，锁定技，若场上有其他群势力角色，且体力值均小于你，你受到或造成的伤害+1。",
                    "hx_huaizhi": "怀志",
                    "hx_huaizhi_info": "回合结束时，你可以摸两张牌并弃置手牌至上限，若你未以此法弃置牌，你失去一点体力，若你以此法弃置了红色牌，你进行一个额外的出牌阶段。",
                    "hx_zaifa": "再伐",
                    "hx_zaifa_info": "出牌阶段开始时，你可以视为对一名其他角色使用了一张【杀】，若未造成伤害，其不计入阶段使用次数限制，否则，你弃置一张手牌。",
                    "hx_kuiding": "窥鼎",
                    "hx_kuiding_info": "觉醒技，回合开始时，若你的体力值为全场最多（或之一），你需失去一点体力并弃置两张牌，然后增加一点体力上限并获得“妄尊”。",
                    "hx_leiyue": "酹月",
                    "hx_leiyue_info": "锁定技，当你不为场上体力值最大或最小的角色时，你视为拥有技能“涉猎”；否则，你视为拥有技能“酒诗”。",
                    "hx_diedang": "跌宕",
                    "hx_diedang_info": "回合结束时，你可以摸等同于与回合开始时手牌数差数量的牌，若多于三张，你将武将牌翻面。",
                    "hx_xinyong": "新咏",
                    "hx_xinyong_info": "你可以将一张手牌当【无中生有】使用并记录其花色，你只能以“故歌”方式使用被记录花色的手牌。",
                    "hx_guge": "故歌",
                    "hx_guge_info": "你可以将一张花色被“新咏”记录的手牌当【无懈可击】使用，然后此回合结束时你可以消除该记录。",
                    "hx_lvye": "履野",
                    "hx_lvye_info": "锁定技，未受伤角色的回合结束时，你需消除“新咏”的一项记录；锦囊将对体力为一角色生效时，你能用任意手牌发动“故歌”。",
                    "hx_zhixing": "知行",
                    "hx_zhixing_info": "回合结束时，若你此回合使用牌数量等于体力值，你可以视为使用一张基本牌。",
                    "hx_mingwu": "明悟",
                    "hx_mingwu_info": "觉醒技，你使用过所有名称的基本牌后，增加一点体力上限，回复一点体力，摸两张牌，并获得技能“心渠”。",
                    "hx_xinqu": "心渠",
                    "hx_xinqu_info": "出牌阶段开始时，你可以将一张红桃牌当一张普通锦囊牌使用。",
                    "hx_qiongqu": "穷驱",
                    "hx_qiongqu_info": "摸牌阶段，你额外摸两张牌且你的手牌上限减二（至少为一）。弃牌阶段结束时，你可以依据弃置的牌类别数发动相应效果：一或更多，弃置场上的一张牌；二或更多，对攻击范围外的一名角色造成1点伤害；三或更多，此回合结束后进行一个额外回合。",
                    "hx_juecheng": "绝骋",
                    "hx_juecheng_info": "锁定技，你与其他角色计算距离-1；其他角色与你计算距离+1。",
                    "hx_yulie": "郁烈",
                    "hx_yulie_info": "锁定技，你手牌中的的非武器装备牌均视为雷【杀】。你的雷【杀】不计入数量限制。",
                    "hx_rongfu": "戎覆",
                    "hx_rongfu_info": "一名角色的回合内，此回合第X张牌进入弃牌堆时，若之为【杀】，你摸一张牌，若之为【闪】，你获得之。X为你此回合开始时的体力值。",
                    "hx_fenru": "奋入",
                    "hx_fenru_info": "锁定技，游戏开始时，将【方天画戟】、【白银狮子】、【的卢】与【大宛】置于你的装备区；你始终视为装备着【麒麟弓】。",
                    "hx_yuding": "羽定",
                    "hx_yuding_info": "限定技，出牌阶段，你可以将武将牌翻面，然后视为你对至多三名角色各使用了一张额外的【杀】，以此法使用的【杀】造成伤害时，若目标角色的武将牌正面朝上，其翻面。",
                    "hx_geixiang": "给饷",
                    "hx_geixiang_info": "出牌阶段开始时，你可以弃置一张牌，然后令一名其他角色摸X张牌，X为其没有牌的区域数+1。",
                    "hx_zhonglv": "中律",
                    "hx_zhonglv_info": "一轮限三次，每当你攻击范围内的一名角色受到伤害后，你可以摸一张牌，然后令伤害来源弃置X张牌，X为此次伤害数量。",
                    "hx_binglun": "兵论",
                    "hx_binglun_info": "出牌阶段限一次，你可以将一张牌交给一名角色，然后令其选择一项：对其攻击范围内你指定的角色使用一张杀并重置此技能；或令你摸一张牌并对其造成一点伤害。",
                    "hx_tuqiu": "屠酋",
                    "hx_tuqiu_info": "你的回合内，你可令此回合其他角色使用或打出的第X张牌无效，X为其体力值。",
                    "hx_qianfa": "千发",
                    "hx_qianfa_info": "锁定技，出牌阶段，你使用一张牌的距离与次数限制与你此阶段开始时的手牌数相同。",
                    "hx_nizhen": "逆阵",
                    "hx_nizhen_info": "锁定技，当你失去最后一张手牌时，失去一点体力或减一点体力上限，然后摸三张牌。",
                    "hx_juezhen": "绝阵",
                    "hx_juezhen_info": "出牌阶段，当你的体力值为一时，可以将一张【杀】当做【万箭齐发】使用。",
                    "hx_xingxiao": "行效",
                    "hx_xingxiao_info": "限定技，其他角色的回合结束后，你可以进行一个额外的回合，若此回合与上一个回合被使用的牌至少有三张名称重合且各不相同，下轮开始时重置此技能。",
                    "hx_gezhi": "革制",
                    "hx_gezhi_info": "你的回合开始时，你可以重铸一张手牌并进行一次判定，若判定牌花色与被重铸的牌相同，你移动场上的一张牌，若颜色不同，你摸一张牌。",
                    "hx_fuwen": "复文",
                    "hx_fuwen_info": "主公技，其他魏势力角色使用的非延时类锦囊牌进入弃牌堆时，其可以弃置两张手牌然后令你获得之。",
                    "hx_fuwen_2": "复文",
                    "hx_fuwen_2_info": "你使用的非延时类锦囊牌进入弃牌堆时，其可以弃置两张手牌然后令主公获得之。",
                    "hx_kulv": "苦旅",
                    "hx_kulv_info": "锁定技，你的回合结束时，若有角色不在你攻击范围内，你需弃置一张牌并令攻击范围+1；若你此时没有牌或所有角色均在你攻击范围内，减一点体力上限，将“苦旅”的发动条件与效果修改为“所有角色在你攻击范围内”与“摸两张牌并令手牌上限+1”。",
                    "hx_kulv_2": "苦旅",
                    "hx_kulv_2_info": "锁定技，你的回合结束时，若所有角色在你攻击范围内，你需摸两张牌并令手牌上限+1。",
                    "hx_kulv_mark": "苦旅",
                    "hx_kulv_mark_info": "",
                    "hx_qinghui": "擎恢",
                    "hx_qinghui_info": "你的回合结束时，你可以使用一张【杀】，然后展示所有手牌，若其中没有【杀】，你摸一张牌。你可以重复此流程，直到你展示出【杀】为止。",
                    "hx_jiexing": "节行",
                    "hx_jiexing_info": " 锁定技，回合开始时，你摸一张牌，然后你需弃置X张（至少一张）花色不同的牌，指定等量的阶段并摸X-1张牌，此回合你只执行你所指定的阶段。若你一次以此法弃置了四张牌，你对一名角色造成一点伤害。",
                    "hx_zhikun": "峙坤",
                    "hx_zhikun_info": "锁定技，场上每有一张武器牌，你与其他角色计算距离-1；场上每有一张防具牌，其他角色与你计算距离+1；场上每有一张坐骑牌，你的手牌上限+1；场上每有一张宝物牌，你摸牌阶段摸牌时所摸牌数+1；场上每有一张黑色锦囊牌，你造成的伤害+1；场上每有一张红色锦囊牌，你受到的伤害-1。",
                    "hx_zhenbing": "振禀",
                    "hx_zhenbing_info": "每当一张装备牌进入弃牌堆后，若为武器牌，你摸一张牌；若为防具牌，你可以用一张基本牌替换之；若为宝物牌，你回复一点体力。",
                    "hx_zhenbing_wuqi": "振禀·武器",
                    "hx_zhenbing_fangju": "振禀·防具",
                    "hx_zhenbing_baowu": "振禀·宝物",
                    "hx_zhengmin": "拯民",
                    "hx_zhengmin_info": "其他角色的回合开始时，你可以弃置任意数量的非基本牌并指定等量的角色，此回合这些角色受到普通伤害时，防止之。",
                    "hx_xiongyu": "雄驭",
                    "hx_xiongyu_info": "回合技，你/其他角色的回合，出牌阶段/需要使用或打出一张基本牌时，你可以观看一名手牌数不大于/不小于你的其他角色的手牌，并使用一张牌/使用或打出对应的基本牌。若如此做，交给其一张牌或失去1点体力/令其摸一张牌。",
                    "hx_gefeng": "歌风",
                    "hx_gefeng_info": "主公技，一名角色的回合结束时，若其本回合造成过伤害，可以展示其手牌。若均为黑色/红色，你回复一点体力/摸一张牌。",
                    "hx_gefeng_2": "歌风",
                    "hx_gefeng_2_info": "你的回合结束时，若你本回合造成过伤害，你可以展示手牌。若均为黑色/红色，主公回复一点体力/摸一张牌。",
                    "hx_shanhua": "善划",
                    "hx_shanhua_info": "出牌阶段限一次，你可以选择一名角色，其随机展示X张手牌与牌堆顶等量的牌，然后选择一份获得，另一份弃置，X为其体力值（不足则全展示）。之后，你可重铸一张牌。本回合你每使用一张非延时锦囊牌，此技能可额外发动一次。",
                    "hx_chengjian": "诚荐",
                    "hx_chengjian_info": "当你体力值发生一次变化后，你可以指定一名其他角色并展示牌堆顶一张牌，令其获得之。如为锦囊牌，令其再摸一张牌。",
                    "hx_shijue": "识决",
                    "hx_shijue_info": "一回合限一次，一张锦囊牌进入弃牌堆后，你可以弃置一张与之颜色相同的牌，然后令当前回合角色或你获得之。如两张牌花色相同，你可令一名其他角色获得你弃置的牌。",
                    "hx_fubian": "扶变",
                    "hx_fubian_info": "一轮限一次，一名其他角色的回合结束时，若你在此回合获得过牌或受到过伤害，你可以立即摸一张牌并进行一个额外的出牌阶段。如你在此阶段造成了伤害，该阶段结束后，你选择一项：回复一点体力，或摸一张牌。",
                    "hx_yehai": "谒海",
                    "hx_yehai_info": "结束阶段开始时，你可以展示所有手牌，然后弃置手牌至其中仅含数量较多颜色的牌。若为黑色，视为你使用一张通常锦囊，否则，视为你使用一张【杀】。",
                    "hx_wenxian": "问贤",
                    "hx_wenxian_info": "主公技，一名其他角色死亡后，你可以将伤害来源角色势力改为魏；你可令魏势力角色获得你因【谒海】弃置的牌。",
                    "hx_queyue": "却月",
                    "hx_queyue_info": "你可以将两张牌当一张基本牌使用或打出。若其中有装备牌，你摸一张牌，若两张牌颜色相同，你可以弃置当前回合角色的一张牌。",
                    "hx_queyue_sha": "却月·杀",
                    "hx_queyue_shan": "却月·闪",
                    "hx_queyue_tao": "却月·桃",
                    "hx_queyue_jiu": "却月·酒",
                    "hx_fubing": "府兵",
                    "hx_fubing_info": "主公技，其他蜀势力角色装备区的牌进入弃牌堆时，可以令你获得之。",
                    "hx_fubing_2": "府兵",
                    "hx_fubing_2_info": "你装备区的牌进入弃牌堆时，可以令主公获得之。",
                    "hx_cuidi": "摧敌",
                    "hx_cuidi_info": "锁定技，你使用杀指定未受伤角色为目标时，此杀不可被响应。若其体力值不大于一，此杀伤害数值+1。",
                    "hx_lufu": "戮俘",
                    "hx_lufu_info": "一名其他角色脱离濒死状态时，你可以失去一点体力上限，并视为对其使用了一张无视距离与次数限制的【杀】。",
                    "hx_yanxi": "掩袭",
                    "hx_yanxi_info": "出牌阶段，你可与一名其他角色拼点，若你赢且其没有手牌，你对其造成一点伤害，如其手牌多于你，你令其弃置一张手牌。如你没赢，立即结束此阶段。",
                    "hx_lizu": "励卒",
                    "hx_lizu_info": "你的拼点牌生效前，你可展示一张手牌，若两张牌颜色不同，拼点牌点数+3。",
                    "hx_juechen": "绝尘",
                    "hx_juechen_info": "锁定技，一名其他角色的手牌与装备区牌数之和：多于你手牌数X张及以上时，你或其指定对方为【杀】或【决斗】的目标时，你摸一张牌；否则，对方无法响应你使用的【杀】或【决斗】，且不能指定你为【杀】或【决斗】的目标。X为你已损失体力值（至少为1）。",
                    "hx_zhongchi": "终驰",
                    "hx_zhongchi_info": "觉醒技，一名角色的准备阶段，若你的体力值为1，你令所有角色弃置装备区所有牌，并废除所有装备区。以此法弃置的牌中每有一张武器/防具/坐骑/宝物牌，你摸一张牌/手牌上限+1/攻击距离+1/回复1点体力。",
                    "hx_zhongchi_zuoji": "终驰",
                    "hx_zhongchi_fangju": "终驰",
                    "hx_qijia": "凄笳",
                    "hx_qijia_info": "回合结束时，你可以进行一次判定，然后你可以弃置场上一张与判定牌颜色相同的牌，你可以重复此流程，直到你没有弃置场上的牌为止。",
                    "hx_jiaogong": "徼功",
                    "hx_jiaogong_info": "你的判定牌生效后，你可以弃置一张与之颜色相同的牌，然后令一名角色获得判定牌，且若判定牌为【闪】或装备牌，你摸两张牌。",
                    "hx_jueyun": "决运",
                    "hx_jueyun_info": "一轮限一次，一次判定开始时，你可以从牌堆或弃牌堆中选择一张牌，直接作为判定牌，然后洗牌。",
                    "hx_qianyin": "谦隐",
                    "hx_qianyin_info": "锁定技，你不会成为非梅花花色的【杀】的目标。你受到不为【杀】造成的伤害时，取消之。",
                    "hx_tianming": "天命",
                    "hx_tianming_info": "锁定技，你的回合结束时，根据你本回合使用牌的花色数，你执行以下操作：零，恢复一点体力；一，摸一张牌；二，弃置一名其他角色区域内的一张牌；三，移动场上的一张牌；四，对一名其他角色造成一点伤害。",
                    "hx_dingguo": "定国",
                    "hx_dingguo_info": "觉醒技，当你首次脱离濒死状态或令其他角色进入濒死状态后，你减一点体力上限，摸两张牌，并获得技能“制衡”。",
                    "hx_guangna": "广纳",
                    "hx_guangna_info": "主公技，其他魏势力角色的出牌阶段限一次，该角色可以将一张非基本牌交给你。",
                    "hx_guangna2": "广纳",
                    "hx_guangna2_info": "出牌阶段限一次，你可以将一张非基本牌交给主公。",
                    "hx_zunwei": "尊威",
                    "hx_zunwei_info": "锁定技，其他角色不能使用或打出点数为9或5的牌。其他角色的点数为9或5的牌因弃置进入弃牌堆时，你获得之。",
                    "hx_zunwei_2": "尊威",
                    "hx_zunwei_2_info": "锁定技，其他角色不能使用或打出点数为5的牌。其他角色的点数为5的牌因弃置进入弃牌堆时，你获得之。",
                    "hx_zuigong": "罪躬",
                    "hx_zuigong_info": "限定技，当你处于濒死状态时，你可以弃置你区域内的所有牌并复原你的武将牌，然后摸四张牌并将体力回复至1点，然后从“尊威”的点数中永久移去“9”。",
                    "hx_tianen": "天恩",
                    "hx_tianen_info": "主公技，其他蜀势力角色的回合开始时，你可令“尊威”对其于此回合增加点数“1”，或移去点数“5”。",
                    "hx_wuwai": "物外",
                    "hx_wuwai_info": "锁定技，你不能成为与你体力不相等的角色的普通锦囊牌的目标；你不能成为与你手牌不相等的角色的普通【杀】的目标。",
                    "hx_chaji": "察机",
                    "hx_chaji_info": "锁定技，若你未受伤，你视为拥有技能“奇策”；若你已受伤，你视为拥有技能“观星”。",
                    "hx_fengtao": "锋讨",
                    "hx_fengtao_info": "出牌阶段限一次，你可以弃置一张牌，然后弃置一名其他角色的一张牌。若两张牌的类别相同，你可以视为对其使用了一张无视距离与次数限制的【杀】。",
                    "hx_jishi": "集师",
                    "hx_jishi_info": "限定技，出牌阶段开始时，若你手牌中【杀】的数量不少于体力值，你可展示之，然后回复一点体力且本阶段使用【杀】及发动“锋讨”无数量限制。",
                    "hx_xiongjue": "雄决",
                    "hx_xiongjue_info": "当你不以此法对造成或受到一次伤害时，可以将此伤害转移至一名手牌数或体力值大于你的其他角色。若为你受到的伤害，本轮你不能再发动此选项。",
                    "hx_qingsu": "清肃",
                    "hx_qingsu_info": "主公技，你或一名吴势力角色杀死一名角色后，可令对方摸两张牌。",
                    "hx_qingsu_2": "清肃",
                    "hx_qingsu_2_info": "当你杀死一名角色时，可令一名拥有【清肃】的角色摸两张牌。",
                    "hx_qingzhi": "倾志",
                    "hx_qingzhi_info": "回合开始时，你可以展示所有手牌，然后将其中数量较多颜色的牌交给其他角色。若为黑色，你摸X张牌（X为你已损失体力值），否则，视为你使用一张【桃】。",
                    "hx_julie": "聚烈",
                    "hx_julie_info": "主公技，一名角色体力回复至上限后，你可以将其势力改为蜀；其他蜀势力角色可以于回合结束时交给你一张红色牌。",
                    "hx_julie2": "聚烈",
                    "hx_julie2_info": "",
                    "hx_jiegong": "节攻",
                    "hx_jiegong_info": "一名角色的弃牌阶段开始时，你可选择其装备区内的一张牌，令其选择一项：将此牌置于其或你的手牌区。若其选择后者，其摸一张牌。",
                    "hx_zhanyu": "展御",
                    "hx_zhanyu_info": "一名角色的出牌阶段开始时，你可选择手中的一张装备牌，置于一名角色的装备区。此回合该角色不能成为普通【杀】的目标。",
                    "hx_xiance": "先策",
                    "hx_xiance_info": "出牌阶段开始时，你可以视为使用一张未以此法使用过的通常锦囊牌。",
                    "hx_houzhi": "后智",
                    "hx_houzhi_info": "你可以将此局游戏你使用过的名称的牌当【无懈可击】使用。",
                    "hx_anzhi": "安志",
                    "hx_anzhi_info": "锁定技，若你体力值大于2，你视为拥有技能“克己”，若你体力值不大于2，你视为拥有技能“八阵”。",
                    "hx_zhechong": "折冲",
                    "hx_zhechong_info": "与你距离不大于X的一名其他角色成为一张黑色【杀】的对象后，你可以摸一张牌并将其转移给你。当场上人数大于X时，其他角色计算与你的距离时+X。（X为你已损失体力值）",
                    "hx_qingshi": "倾势",
                    "hx_qingshi_info": "摸牌阶段结束时，你可展示此阶段获得的两张牌。若颜色相同，你摸一张牌，本回合视为拥有“乱击”。否则，出牌阶段结束时，你可视为使用了一张【桃园结义】。",
                    "hx_renyuan": "仁远",
                    "hx_renyuan_info": "主公技，若你已受伤，你可在需要使用或打出一张【闪】时，令群势力角色依次选择是否替你使用或打出之，若如此做，其摸一张牌。",
                    "hx_jieqi": "解奇",
                    "hx_jieqi_info": "回合技，当你使用或打出的一张基本牌或通常锦囊牌结算后，你可弃置一张花色或点数与其相同的手牌，然后将其收回手牌。",
                    "hx_taohui": "韬晦",
                    "hx_taohui_info": "锁定技，出牌阶段结束时，若你于此阶段使用牌的花色均相同，你摸一张牌；若点数均相同，你恢复1点体力且本回合手牌上限+1。",
                    "hx_shouxun": "首勋",
                    "hx_shouxun_info": "锁定技，你在回合内造成首次伤害时，将牌堆顶X张牌置于你的武将牌上，称为“勋”，X为伤害数值。当黑色/红色的“勋”不少于半数时，你使用【杀】次数/手牌上限+1。",
                    "hx_lugong": "录功",
                    "hx_lugong_info": "觉醒技，回合开始时，若你“勋”的张数不小于3，你减1点体力上限，恢复1点体力，然后获得“华荣”。",
                    "hx_huarong": "华荣",
                    "hx_huarong_info": "锁定技，摸牌阶段开始时，你获得1张“勋”并摸X张牌，X为与该牌花色相同的其他“勋”的数量。",
                    "hx_heliu": "合流",
                    "hx_heliu_info": "其他角色的弃牌阶段结束时，你可以获得此阶段其因弃置而进入弃牌堆的所有红色牌。",
                    "hx_fuyi": "抚邑",
                    "hx_fuyi_info": "限定技，回合结束后，你可以令所有角色依次摸两张牌，然后执行一个额外的弃牌阶段。你进入濒死状态后，重置此技能。",
                    "hx_zhishi": "治师",
                    "hx_zhishi_info": "你攻击范围内其他角色的回合开始时，你可以与其拼点，若你赢，防止其于此回合内造成的伤害。",
                    "hx_xujin": "虚襟",
                    "hx_xujin_info": "觉醒技，回合结束时，若你的体力值为场上最多或最少之一，你须减一点体力上限并摸两张牌，然后获得技能“识思”。",
                    "hx_shisi": "识思",
                    "hx_shisi_info": "你的回合外，每当你失去一次牌后，你可以观看一名角色的所有手牌。若有黑色牌，弃置其中一张，否则，你摸一张牌。",
                    "hx_huimao": "挥旄",
                    "hx_huimao_info": "你不以此法造成或受到一次其他角色的伤害后，可改变武将牌横置状态，并令所有角色选择是否对对方使用一张【杀】。",
                    "hx_bingzhu": "兵主",
                    "hx_bingzhu_info": "锁定技，其他角色与你的武将牌横置状态：不同时，其方块手牌均视为【杀】；相同时，其黑桃手牌均视为【闪】。",
                    "hx_yufen": "余奋",
                    "hx_yufen_info": "锁定技，你使用一张红色基本牌时，若其效果不是令你回复体力，你回复1点体力。体力值小于你的角色不能响应你使用的【杀】。",
                    "hx_yufen_buff": "余奋",
                    "hx_yufen_buff_info": "",
                    "hx_minglve": "明略",
                    "hx_minglve_info": "当你失去一个区域内的最后一张牌时，可依区域类型令一名角色执行：手牌区，摸一张牌；判定区，恢复1点体力；装备区，失去1点体力。",
                    "hx_jianxin": "鉴心",
                    "hx_jianxin_info": "出牌阶段限一次，你可以与一名角色彼此观看对方手牌，然后各弃置其中一张。",
                    "hx_nangce": "囊策",
                    "hx_nangce_info": "你的回合外，你使用或打出一张基本牌或通常锦囊时，可将其置于武将牌上。你可以弃置其中一张，令一张颜色不同的通常锦囊牌再次结算。",
                    "hx_nangce_extra": "囊策",
                    "hx_nangce_extra_info": "",
                    "hx_ruliao": "入料",
                    "hx_ruliao_info": "你的回合内，你使用或打出一张基本牌或通常锦囊时，可将其置于武将牌上。你可以弃置其中一张，令一张颜色相同的基本牌无效。",
                    "hx_ruliao_cancel": "入料",
                    "hx_ruliao_cancel_info": "",
                    "hx_jinxun": "矜勋",
                    "hx_jinxun_info": "锁定技，你的回合结束时，若你此回合未造成伤害，摸一张牌并失去1点体力。",
                    "hx_duozhen": "夺阵",
                    "hx_duozhen_info": "你的回合外，当你使用或打出一张【闪】后，可装备场上的一张装备牌，然后你可以使用一张【杀】。",
                    "hx_qizheng": "奇正",
                    "hx_qizheng_info": "你使用的一张只指定一个目标的基本牌开始结算时，可额外指定一名其他角色为目标，且对其效果与对第一名相反。",
                    "hx_qizheng_sha": "奇正",
                    "hx_qizheng_sha_info": "",
                    "hx_qizheng_tao": "奇正",
                    "hx_qizheng_tao_info": "",
                    "hx_qizheng_lost": "奇正",
                    "hx_qizheng_lost_info": "",
                    "hx_qizheng_draw": "奇正",
                    "hx_qizheng_draw_info": "",
                    "hx_qizheng_damage": "奇正",
                    "hx_qizheng_damage_info": "",
                    "hx_qizheng_plus": "奇正",
                    "hx_qizheng_plus_info": "你使用的一张只指定一个目标的基本牌或普通锦囊开始结算时，可额外指定一名其他角色为目标，且对其效果与对第一名相反。",
                    "hx_gaoyin": "高隐",
                    "hx_gaoyin_info": "觉醒技，回合结束时，若你此回合至少发动了两次“奇正”，你减一点体力上限，在“奇正”中的“基本牌”后添加“或普通锦囊”。",
                    "hx_jishuo": "羁朔",
                    "hx_jishuo_info": "锁定技，其他角色使用的黑色基本牌进入弃牌堆时，将其置于你的武将牌上。你的判定阶段开始时，若判定区没有【兵粮寸断】，你将武将牌上的一张当做之置入判定区。",
                    "hx_safu": "洒赋",
                    "hx_safu_info": "回合开始时，你可弃置你武将牌上或场上的一张牌，并可重复此过程（弃置的所有牌点数须连续）。之后，你摸等量的牌。",
                    "hx_jingyu": "靖宇",
                    "hx_jingyu_info": "锁定技，出牌阶段开始时，你令你此阶段使用【杀】的次数与指定目标数上限+X，X为你的攻击范围。",
                    "hx_qudi": "取的",
                    "hx_qudi_info": "轮次技，一名其他角色使用【杀】指定一名角色时，你可为其重新指定目标与来源。",
                    "hx_xueci": "血慈",
                    "hx_xueci_info": "轮次技，你使用【杀】造成一次伤害后，可令一名角色回复1点体力。其他角色可以对你发动此技能。",
                    "hx_xueci_1": "血慈",
                    "hx_xueci_1_info": "",
                    "hx_tianwen": "天问",
                    "hx_tianwen_info": "你进入濒死状态时，可进行一次判定，若为红色，你将体力回复至1点。",
                    "hx_yundao": "陨悼",
                    "hx_yundao_info": "一名角色进入濒死状态时，你可令其发动一次“英魂”。",
                    "hx_shilie": "示烈",
                    "hx_shilie_info": "出牌阶段开始时，你可以展示所有手牌，然后视为对一名角色使用了一张【火攻】。你使用的【火攻】描述中的“弃置”改为“重铸”，若其未造成伤害，令对方弃置一张手牌。",
                    "hx_zhifeng": "指锋",
                    "hx_zhifeng_info": "你使用的【杀】若对一名角色造成了伤害，你可观看其手牌，并弃置其中一张基本牌；若其被【闪】抵消，与你距离为1的角色可对其使用一张【杀】。",
                    "hx_huazhen": "划阵",
                    "hx_huazhen_info": "你成为其他角色一张牌的唯一目标时，可判定，若颜色不同，取消之。",
                    "hx_genggu": "鲠骨",
                    "hx_genggu_info": "锁定技，你受到一次伤害时，如伤害来源体力值大于你，其失去1点体力；你进入濒死状态时，伤害来源弃置全部手牌。",
                    "hx_hanqing": "汗青",
                    "hx_hanqing_info": "锁定技，回合开始时，你获得你于回合外进入弃牌堆的所有牌。",
                    "hx_binzu": "膑足",
                    "hx_binzu_info": "锁定技，你与其他角色计算距离时彼此+1。",
                    "hx_jianzao": "减灶",
                    "hx_jianzao_info": "你可跳过摸牌阶段，然后本回合的攻击范围与使用【杀】的伤害各+1。若如此做，回合结束时，摸两张牌。",
                    "hx_jianzao_buff_1": "减灶",
                    "hx_jianzao_buff_1_info": "",
                    "hx_jianzao_buff_2": "减灶",
                    "hx_jianzao_buff_2_info": "",
                    "hx_weijiu": "围救",
                    "hx_weijiu_info": "阶段技，你对一名其他角色造成伤害后，你可令另一名其他已受伤角色回复1点体力，然后摸一张牌。",
                    "hx_youzhan": "犹战",
                    "hx_youzhan_info": "锁定技，你非【决斗】的锦囊牌均视为【决斗】。",
                    "hx_zhenji": "缜机",
                    "hx_zhenji_info": "锁定技，你于出牌阶段使用的第一张基本牌或普通锦囊结算过程中，其他角色非锁定技失效，且不能使用与打出牌。",
                    "hx_zeshi": "择势",
                    "hx_zeshi_info": "觉醒技，一名角色进入濒死状态时，你获得“帷幕”并选择一项：令其体力值恢复至1点，你获得“乱武”；令其弃置所有手牌与装备区内的牌，你获得“业炎”。",
                    "hx_tingfen": "挺奋",
                    "hx_tingfen_info": "锁定技，你使用的【杀】造成伤害时，若你的装备区或手牌区内没有牌，其伤害+1。",
                    "hx_paomou": "抛鍪",
                    "hx_paomou_info": "锁定技，回合结束时，若你的装备区有牌，你需弃置其中一张，然后摸一张牌，并视为使用了一张无视距离的【杀】。",
                    "hx_hemeng": "合盟",
                    "hx_hemeng_info": "出牌阶段开始时，你可视为使用了一张【酒】。然后，你可选择一名手牌数为全场最大或最小的其他角色。若为最大，令其弃置一张手牌，若仍为最大，视为对其使用一张不计入限制的【杀】；若为最小，令其摸一张牌，若仍为最小，令其再摸一张牌。",
                    "hx_zhuoneng": "擢能",
                    "hx_zhuoneng_info": "主公技，限定技，你或一名其他角色用【桃】令对方脱离濒死状态时，你可令其摸三张牌，将体力恢复至3点，然后若场上没有“管夷吾”，其将一张武将牌替换为“管夷吾”。",
                    "hx_taluan": "踏乱",
                    "hx_taluan_info": "攻击范围内一名其他角色的回合结束时，若你的手牌数量与此回合开始时相同，你可以视为对当前回合角色使用一张【杀】。",
                    "hx_jingzhai": "靖砦",
                    "hx_jingzhai_info": "锁定技，若你装备区的牌数不少于体力值，当你受到伤害时，若其不为普通【杀】造成，防止之。",
                    "hx_yilv": "义旅",
                    "hx_yilv_info": "其他角色可以将未造成伤害的【杀】交给你，你可以将造成伤害的【杀】交给其他角色。",
                    "hx_zhengshi": "整师",
                    "hx_zhengshi_info": "出牌阶段开始时，你可以重铸手牌中的【杀】，若数量不小于你的体力值，你可以移动场上一张牌。",
                    "hx_zhengshi1": "拯世",
                    "hx_zhengshi1_info": "轮次开始时，你可以令主公或体力值最大的其他角色选择【五谷丰登】或【桃园结义】，然后其视为使用之。",
                    "hx_anjian": "安谏",
                    "hx_anjian_info": "当你成为其他角色的一张多目标普通锦囊的目标时，你可以令其对一个目标无效，然后使用者摸一张牌。",
                    "hx_yingshi": "应师",
                    "hx_yingshi_info": "回合技，你的回合外，一张基本牌或普通锦囊牌结算后，你可将一张手牌当此牌使用。",
                    "hx_yijin": "义襟",
                    "hx_yijin_info": "限定技，一名其他角色进入濒死状态时，你可令其恢复三点体力。",
                    "hx_qulie": "驱烈",
                    "hx_qulie_info": "回合技，当你恢复一次体力或对攻击范围外的角色造成一次伤害时，可对攻击范围内的另一名角色造成1点伤害。",
                    "hx_qulie2": "驱烈",
                    "hx_qulie2_info": "回合技，当你恢复一次体力或对攻击范围内的角色造成一次伤害时，可对攻击范围外的另一名角色造成1点伤害。",
                    "hx_jingnan": "靖难",
                    "hx_jingnan_info": "限定技，当你进入濒死状态时，你可以增加1点体力上限，将体力恢复至2点，摸两张牌，然后交换“驱烈”中“内”“外”两个字的位置。",
                    "hx_shengwei": "盛威",
                    "hx_shengwei_info": "主公技，锁定技，吴势力角色无视“驱烈”的距离限制。",
                    "hx_xiaodou": "啸斗",
                    "hx_xiaodou_info": "锁定技，你失去手牌区或装备区的最后一张牌时，须选择一项：1.对一名与你距离为1的角色造成1点伤害；2.摸一张牌，然后将武将牌翻面。",
                    "hx_mogu": "墨鼓",
                    "hx_mogu_info": "锁定技，出牌阶段，你每使用一张黑色牌，本阶段攻击距离与使用【杀】限制各+1。",
                    "hx_kongchou": "空酬",
                    "hx_kongchou_info": "锁定技，出牌阶段结束时，你摸X张牌（X为“墨鼓”叠加后你剩余可使用【杀】的次数）。",
                    "hx_junzheng": "军整",
                    "hx_junzheng_info": "锁定技，判定阶段开始时，若你的区域里有牌，你须弃置一个区域内的所有牌，然后选择一项：1. 摸等量的牌；2. 弃置一名其他角色等量的牌。",
                    "hx_mouzhan": "谋战",
                    "hx_mouzhan_info": "其他角色的回合开始时，若其仅有一个区域内有牌，你可令其本回合内拥有“军整”。",
                    "hx_zhengge": "整革",
                    "hx_zhengge_info": "回合开始时，你可弃置一个区域内的所有（至少一张）牌，然后摸等量的牌。然后，所有其他角色需依次执行此操作。",
                    "hx_huntong": "混统",
                    "hx_huntong_info": "主公技，一名反贼角色死亡时，你可令其身份牌改为忠臣，然后将武将牌替换为一名场上没有的群势力角色，并将体力上限调整至3，手牌调整为2，体力值调整为1。",
                    "hx_yinbao": "淫暴",
                    "hx_yinbao_info": "锁定技，回合结束时，若你本回合造成了至少X点伤害，你摸X张牌（X为场上体力值小于你的角色数）。",
                    "hx_sizhan": "四战",
                    "hx_sizhan_info": "你使用一张【杀】、【过河拆桥】与【顺手牵羊】时，可将目标改为攻击范围内所有其他角色。",
                    "hx_dubang": "度邦",
                    "hx_dubang_info": "阶段技，出牌阶段，你可将场上一张攻击范围外的牌移动至攻击范围内。",
                    "hx_fudeng": "复登",
                    "hx_fudeng_info": "觉醒技，你失去一个区域内的最后一张牌后，摸两张牌，回复1点体力，然后交换“度邦”中的“内”与“外”。",
                    "hx_jiewei": "节威",
                    "hx_jiewei_info": "锁定技，与你装备区的一张牌花色相同的牌对你的伤害-1。",
                    "hx_zhuanying": "专营",
                    "hx_zhuanying_info": "锁定技，一张装备区进入弃牌堆后，将其置于你的武将牌上，称为“货”。",
                    "hx_zhuanying2": "专营",
                    "hx_tonghuo": "通货",
                    "hx_tonghuo_info": "其他角色的出牌阶段开始时，其可以将一张手牌交给你，并获得一张“货”，然后你可以将获得的牌置为“货”。",
                    "hx_fuli": "赋利",
                    "hx_fuli_info": "回合开始时，若你没有“货”，你可以将牌堆顶的两张牌置为“货”。否则，你可令至多X名角色获得一张“货”（X为你的体力值）。",
                    "hx_daye": "大业",
                    "hx_daye_info": "锁定技，回合开始时，所有其他角色均需交给你一张牌，然后你交给所有其他角色各一张牌。",
                    "hx_haolu": "好颅",
                    "hx_haolu_info": "主公技，觉醒技，你阵亡时，需将身份牌改为忠臣，然后伤害来源将身份牌改为主公，并增加一点体力上限。",
                    "hx_yimeng": "役盟",
                    "hx_yimeng_info": "你需要使用一张【闪】时，可令一名其他角色选择是否交给你一张【闪】。如你没有手牌或体力值为1，其选择否时，需失去1点体力。",
                    "hx_tuixin": "推心",
                    "hx_tuixin_info": "出牌阶段开始时，你可以重铸一张【杀】，然后令一名其他角色弃置一张【杀】。如其无法弃置，你回复1点体力。",
                    "hx_shuobang": "硕邦",
                    "hx_shuobang_info": "锁定技，摸牌阶段结束时，若你的手牌数不为场上最多，你摸一张牌，否则，你增加一点体力上限。",
                    "hx_yiquan": "弈权",
                    "hx_yiquan_info": "一名角色的弃牌阶段开始时，你可以减一点体力上限并令其此阶段手牌上限+2或-2，若为前者，你摸一张牌。",
                    "hx_zhishi_lz": "治世",
                    "hx_zhishi_lz_info": "主公技，回合结束时，你可以令任意数量魏势力角色弃置一张牌，然后这些角色各令一名角色摸一张牌。",
                    "hx_tuxian": "突险",
                    "hx_tuxian_info": "锁定技，出牌阶段开始时，若没有角色在你攻击范围外，你回复1点体力。否则，你需对一名攻击范围外的其他角色造成1点伤害，然后本回合攻击范围+1。",
                    "hx_zhongye": "终业",
                    "hx_zhongye_info": "觉醒技，回合结束时，若游戏轮数不小于场上角色数，你可以视为使用最多三张雷属性的【杀】，然后失去2点体力，增加1点体力上限并失去“突险”。",
                    "hx_fenshen": "分身",
                    "hx_fenshen_info": "每回合每项限一次：你使用一张【杀】时，可指定一名其他角色，作为额外目标；你使用一张【闪】时，可指定一名其他角色，获得此牌。若该角色不在你攻击范围内，你摸一张牌。",
                    "hx_duijue": "对决",
                    "hx_duijue_info": "回合结束时，若你本回合使用的牌仅指定了一名其他角色为目标，你可以摸两张牌或对其造成1点伤害。然后若其武将牌正面朝上，令其摸两张牌，将武将牌翻面并执行一个出牌阶段。此阶段该角色的牌只能指定你为目标。",
                },
            },
            intro: "<div><li>思路来源：百度【三国杀设计】吧全史人物系列（jordan圣帝），感谢周子鱼制作露头素材<li>插画：Pixiv（画师ID及名字标注在武将列传中）<li>人物萌娘化仅供娱乐，不喜勿喷<li>仅供个人娱乐，严禁传播或盈利。版权方若主张版权，作者将第一时间撤换素材或删除分享文件。<li>作者联系QQ：691127429，扩展讨论QQ群：533488054，欢迎提出意见及报告bug</div>",
            author: "陈恭杜弼的区别",
            diskURL: "",
            forumURL: "",
            version: "1.0",
        },
        files: {
            "character": ["hx_xiean.jpg", "hx_wangmeng.jpg", "hx_zhaokuangyi.jpg", "hx_zhangliang.jpg", "hx_licunxu.jpg", "hx_zuti.jpg", "hx_huanwen.jpg", "hx_sushi.jpg", "hx_dufu.jpg", "hx_wangshouren.jpg", "hx_huoqubing.jpg", "hx_diqing.jpg", "hx_xueli.jpg", "hx_xiaohe.jpg", "hx_lijing.jpg", "hx_hanxin.jpg", "hx_tuobahong.jpg", "hx_zhangqian.jpg", "hx_lidingguo.jpg", "hx_weiqing.jpg", "hx_yuefei.jpg", "hx_guanyiwu.jpg", "hx_liubang.jpg", "hx_fangxuanling.jpg", "hx_duruhui.jpg", "hx_caocao.jpg", "hx_liuyu.jpg", "hx_baiqi.jpg", "hx_chenqingzhi.jpg", "hx_xiangyu.jpg", "hx_linkun.jpg", "hx_liuji.jpg", "hx_lishimin.jpg", "hx_liuche.jpg", "hx_limi.jpg", "hx_xuda.jpg", "hx_zhuyuanzhang.jpg", "hx_liubei.jpg", "hx_menggong.jpg", "hx_fanli.jpg", "hx_guoziyi.jpg", "hx_fujian.jpg", "hx_chenping.jpg", "hx_yangsu.jpg", "hx_zhangquanyi.jpg", "hx_murongke.jpg", "hx_xiexuan.jpg", "hx_lianpo.jpg", "hx_gaojiong.jpg", "hx_zhugeliang.jpg", "hx_yuchirong.jpg", "hx_sunwu.jpg", "hx_yuxin.jpg", "hx_sudingfang.jpg", "hx_yaoguangxiao.jpg", "hx_quyuan.jpg", "hx_zhouyu.jpg", "hx_wuqi.jpg", "hx_simaqian.jpg", "hx_sunbin.jpg", "hx_yangzaixing.jpg", "hx_jiaxu.jpg", "hx_xueandu.jpg", "hx_qixiaobai.jpg", "hx_zhouyafu.jpg", "hx_zongze.jpg", "hx_fengdao.jpg", "hx_lishiji.jpg", "hx_zhudi.jpg", "hx_hanqinhu.jpg", "hx_xinqiji.jpg", "hx_liguangbi.jpg", "hx_yangjian.jpg", "hx_zhuwen.jpg", "hx_zhaopu.jpg", "hx_sanghongyang.jpg", "hx_yangguang.jpg", "hx_banchao.jpg", "hx_lizhi.jpg", "hx_changyuchun.jpg", "hx_gecongzhou.jpg", "hx_shiwansui.jpg"],
            "card": [],
            "skill": []
        }
    }
})